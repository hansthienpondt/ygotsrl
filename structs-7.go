/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi struct {
	AddPaths           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths           `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState         E_SrlNokiaCommon_AdminState                                                                `path:"admin-state" module:"srl_nokia-bgp"`
	AfiSafiName        E_SrlNokiaCommon_BgpAddressFamily                                                          `path:"afi-safi-name" module:"srl_nokia-bgp"`
	Evpn               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn               `path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy       *string                                                                                    `path:"export-policy" module:"srl_nokia-bgp"`
	ImportPolicy       *string                                                                                    `path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast `path:"ipv4-labeled-unicast" module:"srl_nokia-bgp"`
	Ipv4Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast `path:"ipv6-labeled-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-bgp"`
	L3VpnIpv4Unicast   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast   `path:"l3vpn-ipv4-unicast" module:"srl_nokia-bgp"`
	L3VpnIpv6Unicast   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast   `path:"l3vpn-ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths{}
	return t.AddPaths
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4LabeledUnicast retrieves the value of the Ipv4LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateIpv4LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast {
	if t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	t.Ipv4LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast{}
	return t.Ipv4LabeledUnicast
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6LabeledUnicast retrieves the value of the Ipv6LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateIpv6LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast {
	if t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	t.Ipv6LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast{}
	return t.Ipv6LabeledUnicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateL3VpnIpv4Unicast retrieves the value of the L3VpnIpv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateL3VpnIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast {
	if t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	t.L3VpnIpv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast{}
	return t.L3VpnIpv4Unicast
}

// GetOrCreateL3VpnIpv6Unicast retrieves the value of the L3VpnIpv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetOrCreateL3VpnIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast {
	if t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	t.L3VpnIpv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast{}
	return t.L3VpnIpv6Unicast
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4LabeledUnicast returns the value of the Ipv4LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv4LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetIpv4LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast {
	if t != nil && t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6LabeledUnicast returns the value of the Ipv6LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv6LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetIpv6LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast {
	if t != nil && t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetL3VpnIpv4Unicast returns the value of the L3VpnIpv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field L3VpnIpv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetL3VpnIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast {
	if t != nil && t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	return nil
}

// GetL3VpnIpv6Unicast returns the value of the L3VpnIpv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi. If the receiver or the field L3VpnIpv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetL3VpnIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast {
	if t != nil && t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiName is set, it can
// safely use t.GetAfiSafiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetAfiSafiName() E_SrlNokiaCommon_BgpAddressFamily {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddPaths.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.Ipv4LabeledUnicast.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6LabeledUnicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.L3VpnIpv4Unicast.PopulateDefaults()
	t.L3VpnIpv6Unicast.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn struct {
	AdvertiseIpv6NextHops *bool                                                                                    `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/evpn/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Evpn_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast struct {
	AdvertiseIpv6NextHops *bool                                                                                                  `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	NextHopUnchanged      *bool                                                                                                  `path:"next-hop-unchanged" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                                  `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetNextHopUnchanged retrieves the value of the leaf NextHopUnchanged from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopUnchanged is set, it can
// safely use t.GetNextHopUnchanged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopUnchanged == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetNextHopUnchanged() bool {
	if t == nil || t.NextHopUnchanged == nil {
		return false
	}
	return *t.NextHopUnchanged
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast struct {
	AdvertiseIpv6NextHops *bool                                                                                             `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	LinkBandwidth         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth `path:"link-bandwidth" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit   `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                             `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetOrCreateLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkBandwidth.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/link-bandwidth YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth struct {
	AddNextHopCountToReceivedBgpRoutes SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union `path:"add-next-hop-count-to-received-bgp-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) IsYANGGoStruct() {
}

// GetAddNextHopCountToReceivedBgpRoutes retrieves the value of the leaf AddNextHopCountToReceivedBgpRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddNextHopCountToReceivedBgpRoutes is set, it can
// safely use t.GetAddNextHopCountToReceivedBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddNextHopCountToReceivedBgpRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) GetAddNextHopCountToReceivedBgpRoutes() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union {
	if t == nil || t.AddNextHopCountToReceivedBgpRoutes == nil {
		return nil
	}
	return t.AddNextHopCountToReceivedBgpRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast struct {
	NextHopUnchanged *bool                                                                                                  `path:"next-hop-unchanged" module:"srl_nokia-bgp"`
	PrefixLimit      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetNextHopUnchanged retrieves the value of the leaf NextHopUnchanged from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopUnchanged is set, it can
// safely use t.GetNextHopUnchanged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopUnchanged == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) GetNextHopUnchanged() bool {
	if t == nil || t.NextHopUnchanged == nil {
		return false
	}
	return *t.NextHopUnchanged
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast struct {
	LinkBandwidth *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth `path:"link-bandwidth" module:"srl_nokia-bgp"`
	PrefixLimit   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit   `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetOrCreateLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkBandwidth.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/link-bandwidth YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth struct {
	AddNextHopCountToReceivedBgpRoutes SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union `path:"add-next-hop-count-to-received-bgp-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) IsYANGGoStruct() {
}

// GetAddNextHopCountToReceivedBgpRoutes retrieves the value of the leaf AddNextHopCountToReceivedBgpRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddNextHopCountToReceivedBgpRoutes is set, it can
// safely use t.GetAddNextHopCountToReceivedBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddNextHopCountToReceivedBgpRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) GetAddNextHopCountToReceivedBgpRoutes() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union {
	if t == nil || t.AddNextHopCountToReceivedBgpRoutes == nil {
		return nil
	}
	return t.AddNextHopCountToReceivedBgpRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast struct {
	AdvertiseIpv6NextHops *bool                                                                                                `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                                `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast struct {
	PrefixLimit *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 0
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions struct {
	AllowOwnAs      *uint8                                                                                        `path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs `path:"remove-private-as" module:"srl_nokia-bgp" yangPresence:"true"`
	ReplacePeerAs   *bool                                                                                         `path:"replace-peer-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) IsYANGGoStruct() {
}

// GetOrCreateRemovePrivateAs retrieves the value of the RemovePrivateAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetOrCreateRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs {
	if t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	t.RemovePrivateAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs{}
	return t.RemovePrivateAs
}

// GetRemovePrivateAs returns the value of the RemovePrivateAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions. If the receiver or the field RemovePrivateAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs {
	if t != nil && t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	return nil
}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOwnAs is set, it can
// safely use t.GetAllowOwnAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOwnAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// GetReplacePeerAs retrieves the value of the leaf ReplacePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplacePeerAs is set, it can
// safely use t.GetReplacePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplacePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) GetReplacePeerAs() bool {
	if t == nil || t.ReplacePeerAs == nil {
		return false
	}
	return *t.ReplacePeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RemovePrivateAs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs *bool                                                                                               `path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly  *bool                                                                                               `path:"leading-only" module:"srl_nokia-bgp"`
	Mode         E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {
}

// GetIgnorePeerAs retrieves the value of the leaf IgnorePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnorePeerAs is set, it can
// safely use t.GetIgnorePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnorePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) GetIgnorePeerAs() bool {
	if t == nil || t.IgnorePeerAs == nil {
		return false
	}
	return *t.IgnorePeerAs
}

// GetLeadingOnly retrieves the value of the leaf LeadingOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeadingOnly is set, it can
// safely use t.GetLeadingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeadingOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) GetLeadingOnly() bool {
	if t == nil || t.LeadingOnly == nil {
		return false
	}
	return *t.LeadingOnly
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnorePeerAs == nil {
		var v bool = false
		t.IgnorePeerAs = &v
	}
	if t.LeadingOnly == nil {
		var v bool = false
		t.LeadingOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-bgp"`
	Password *string `path:"password" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) IsYANGGoStruct() {
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// GetPassword retrieves the value of the leaf Password from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection struct {
	EnableBfd    *bool `path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover *bool `path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) IsYANGGoStruct() {
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetFastFailover retrieves the value of the leaf FastFailover from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFailover is set, it can
// safely use t.GetFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFailover == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) GetFastFailover() bool {
	if t == nil || t.FastFailover == nil {
		return false
	}
	return *t.FastFailover
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart struct {
	AdminState           E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	RequestedRestartTime *uint16                     `path:"requested-restart-time" module:"srl_nokia-bgp"`
	StaleRoutesTime      *uint16                     `path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetRequestedRestartTime retrieves the value of the leaf RequestedRestartTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestedRestartTime is set, it can
// safely use t.GetRequestedRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestedRestartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) GetRequestedRestartTime() uint16 {
	if t == nil || t.RequestedRestartTime == nil {
		return 300
	}
	return *t.RequestedRestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) GetStaleRoutesTime() uint16 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RequestedRestartTime == nil {
		var v uint16 = 300
		t.RequestedRestartTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs  *bool   `path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return false
	}
	return *t.PrependGlobalAs
}

// GetPrependLocalAs retrieves the value of the leaf PrependLocalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependLocalAs is set, it can
// safely use t.GetPrependLocalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependLocalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) GetPrependLocalAs() bool {
	if t == nil || t.PrependLocalAs == nil {
		return false
	}
	return *t.PrependLocalAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/multihop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop struct {
	AdminState  E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	MaximumHops *uint8                      `path:"maximum-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaximumHops retrieves the value of the leaf MaximumHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumHops is set, it can
// safely use t.GetMaximumHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) GetMaximumHops() uint8 {
	if t == nil || t.MaximumHops == nil {
		return 0
	}
	return *t.MaximumHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector struct {
	Client    *bool                                                                                         `path:"client" module:"srl_nokia-bgp"`
	ClusterId SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union `path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) IsYANGGoStruct() {
}

// GetClient retrieves the value of the leaf Client from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Client is set, it can
// safely use t.GetClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Client == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) GetClient() bool {
	if t == nil || t.Client == nil {
		return false
	}
	return *t.Client
}

// GetClusterId retrieves the value of the leaf ClusterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) GetClusterId() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union {
	if t == nil || t.ClusterId == nil {
		return nil
	}
	return t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity struct {
	Large    *bool `path:"large" module:"srl_nokia-bgp"`
	Standard *bool `path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) IsYANGGoStruct() {
}

// GetLarge retrieves the value of the leaf Large from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute struct {
	ExportPolicy *string `path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast  *bool   `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast  *bool   `path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) IsYANGGoStruct() {
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4Unicast retrieves the value of the leaf Ipv4Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Unicast is set, it can
// safely use t.GetIpv4Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) GetIpv4Unicast() bool {
	if t == nil || t.Ipv4Unicast == nil {
		return false
	}
	return *t.Ipv4Unicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers struct {
	ConnectRetry                 *uint16 `path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime                     *uint16 `path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval            *uint16 `path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval *uint16 `path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
	PrefixLimitRestartTimer      *uint16 `path:"prefix-limit-restart-timer" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetConnectRetry() uint16 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetHoldTime() uint16 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveInterval is set, it can
// safely use t.GetKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetKeepaliveInterval() uint16 {
	if t == nil || t.KeepaliveInterval == nil {
		return 0
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAdvertisementInterval is set, it can
// safely use t.GetMinimumAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetMinimumAdvertisementInterval() uint16 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 0
	}
	return *t.MinimumAdvertisementInterval
}

// GetPrefixLimitRestartTimer retrieves the value of the leaf PrefixLimitRestartTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLimitRestartTimer is set, it can
// safely use t.GetPrefixLimitRestartTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLimitRestartTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) GetPrefixLimitRestartTimer() uint16 {
	if t == nil || t.PrefixLimitRestartTimer == nil {
		return 0
	}
	return *t.PrefixLimitRestartTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag `path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) IsYANGGoStruct() {
}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bgp"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport struct {
	LocalAddress *string `path:"local-address" module:"srl_nokia-bgp"`
	MtuDiscovery *bool   `path:"mtu-discovery" module:"srl_nokia-bgp"`
	PassiveMode  *bool   `path:"passive-mode" module:"srl_nokia-bgp"`
	TcpMss       *uint16 `path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PassiveMode is set, it can
// safely use t.GetPassiveMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PassiveMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetTcpMss retrieves the value of the leaf TcpMss from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference represents the /srl_nokia-network-instance/network-instance/protocols/bgp/preference YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference struct {
	Ebgp *uint8 `path:"ebgp" module:"srl_nokia-bgp"`
	Ibgp *uint8 `path:"ibgp" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) GetEbgp() uint8 {
	if t == nil || t.Ebgp == nil {
		return 170
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) GetIbgp() uint8 {
	if t == nil || t.Ibgp == nil {
		return 170
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint8 = 170
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint8 = 170
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement represents the /srl_nokia-network-instance/network-instance/protocols/bgp/rib-management YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement struct {
	Table map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table `path:"table" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) IsYANGGoStruct() {}

// NewTable creates a new entry in the Table list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) NewTable(
	AddressFamily E_SrlNokiaCommon_BgpAddressFamily,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Table == nil {
		t.Table = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table)
	}

	key := AddressFamily

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Table[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Table", key)
	}

	t.Table[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table{
		AddressFamily: AddressFamily,
	}

	return t.Table[key], nil
}

// RenameTable renames an entry in the list Table within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) RenameTable(oldK, newK E_SrlNokiaCommon_BgpAddressFamily) error {
	if _, ok := t.Table[newK]; ok {
		return fmt.Errorf("key %v already exists in Table", newK)
	}

	e, ok := t.Table[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Table", oldK)
	}
	e.AddressFamily = newK

	t.Table[newK] = e
	delete(t.Table, oldK)
	return nil
}

// GetOrCreateTable retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) GetOrCreateTable(
	AddressFamily E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table {
	key := AddressFamily

	if v, ok := t.Table[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTable(AddressFamily)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTable got unexpected error: %v", err))
	}
	return v
}

// GetTable retrieves the value with the specified key from
// the Table map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) GetTable(
	AddressFamily E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table {
	if t == nil {
		return nil
	}

	key := AddressFamily

	if lm, ok := t.Table[key]; ok {
		return lm
	}
	return nil
}

// DeleteTable deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) DeleteTable(AddressFamily E_SrlNokiaCommon_BgpAddressFamily) {
	key := AddressFamily

	delete(t.Table, key)
}

// AppendTable appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table struct to the
// list Table of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) AppendTable(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table,
) error {
	key := v.AddressFamily

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Table == nil {
		t.Table = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table)
	}

	if _, ok := t.Table[key]; ok {
		return fmt.Errorf("duplicate key for list Table %v", key)
	}

	t.Table[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Table {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table represents the /srl_nokia-network-instance/network-instance/protocols/bgp/rib-management/table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table struct {
	AddressFamily    E_SrlNokiaCommon_BgpAddressFamily `path:"address-family" module:"srl_nokia-bgp"`
	RouteTableImport *string                           `path:"route-table-import" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) IsYANGGoStruct() {}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) GetAddressFamily() E_SrlNokiaCommon_BgpAddressFamily {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetRouteTableImport retrieves the value of the leaf RouteTableImport from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableImport is set, it can
// safely use t.GetRouteTableImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableImport == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) GetRouteTableImport() string {
	if t == nil || t.RouteTableImport == nil {
		return ""
	}
	return *t.RouteTableImport
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"address-family": t.AddressFamily,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement_Table) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-advertisement YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement struct {
	RapidWithdrawal   *bool `path:"rapid-withdrawal" module:"srl_nokia-bgp"`
	WaitForFibInstall *bool `path:"wait-for-fib-install" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) IsYANGGoStruct() {}

// GetRapidWithdrawal retrieves the value of the leaf RapidWithdrawal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidWithdrawal is set, it can
// safely use t.GetRapidWithdrawal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidWithdrawal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) GetRapidWithdrawal() bool {
	if t == nil || t.RapidWithdrawal == nil {
		return false
	}
	return *t.RapidWithdrawal
}

// GetWaitForFibInstall retrieves the value of the leaf WaitForFibInstall from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForFibInstall is set, it can
// safely use t.GetWaitForFibInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForFibInstall == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) GetWaitForFibInstall() bool {
	if t == nil || t.WaitForFibInstall == nil {
		return true
	}
	return *t.WaitForFibInstall
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RapidWithdrawal == nil {
		var v bool = false
		t.RapidWithdrawal = &v
	}
	if t.WaitForFibInstall == nil {
		var v bool = true
		t.WaitForFibInstall = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector struct {
	Client    *bool                                                                                `path:"client" module:"srl_nokia-bgp"`
	ClusterId SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union `path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) IsYANGGoStruct() {}

// GetClient retrieves the value of the leaf Client from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Client is set, it can
// safely use t.GetClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Client == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) GetClient() bool {
	if t == nil || t.Client == nil {
		return false
	}
	return *t.Client
}

// GetClusterId retrieves the value of the leaf ClusterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) GetClusterId() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union {
	if t == nil || t.ClusterId == nil {
		return nil
	}
	return t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Client == nil {
		var v bool = false
		t.Client = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity struct {
	Large    *bool `path:"large" module:"srl_nokia-bgp"`
	Standard *bool `path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) IsYANGGoStruct() {}

// GetLarge retrieves the value of the leaf Large from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) GetLarge() bool {
	if t == nil || t.Large == nil {
		return true
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return true
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Large == nil {
		var v bool = true
		t.Large = &v
	}
	if t.Standard == nil {
		var v bool = true
		t.Standard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag `path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bgp"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) IsYANGGoStruct() {}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport struct {
	MtuDiscovery            *bool   `path:"mtu-discovery" module:"srl_nokia-bgp"`
	SingleHopConnectedCheck *bool   `path:"single-hop-connected-check" module:"srl_nokia-bgp"`
	TcpMss                  *uint16 `path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) IsYANGGoStruct() {}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetSingleHopConnectedCheck retrieves the value of the leaf SingleHopConnectedCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleHopConnectedCheck is set, it can
// safely use t.GetSingleHopConnectedCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleHopConnectedCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) GetSingleHopConnectedCheck() bool {
	if t == nil || t.SingleHopConnectedCheck == nil {
		return true
	}
	return *t.SingleHopConnectedCheck
}

// GetTcpMss retrieves the value of the leaf TcpMss from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 1024
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SingleHopConnectedCheck == nil {
		var v bool = true
		t.SingleHopConnectedCheck = &v
	}
	if t.TcpMss == nil {
		var v uint16 = 1024
		t.TcpMss = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected struct {
	TeDatabaseInstall *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall `path:"te-database-install" module:"srl_nokia-traffic-engineering" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) IsYANGGoStruct() {}

// GetOrCreateTeDatabaseInstall retrieves the value of the TeDatabaseInstall field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) GetOrCreateTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall {
	if t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	t.TeDatabaseInstall = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall{}
	return t.TeDatabaseInstall
}

// GetTeDatabaseInstall returns the value of the TeDatabaseInstall struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected. If the receiver or the field TeDatabaseInstall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) GetTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall {
	if t != nil && t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TeDatabaseInstall.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected/te-database-install YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall struct {
	BgpLs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs `path:"bgp-ls" module:"srl_nokia-traffic-engineering" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) IsYANGGoStruct() {
}

// GetOrCreateBgpLs retrieves the value of the BgpLs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) GetOrCreateBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs {
	if t.BgpLs != nil {
		return t.BgpLs
	}
	t.BgpLs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs{}
	return t.BgpLs
}

// GetBgpLs returns the value of the BgpLs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall. If the receiver or the field BgpLs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) GetBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs {
	if t != nil && t.BgpLs != nil {
		return t.BgpLs
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected/te-database-install/bgp-ls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs struct {
	BgpLsIdentifier *uint32 `path:"bgp-ls-identifier" module:"srl_nokia-traffic-engineering"`
	IgpIdentifier   *uint64 `path:"igp-identifier" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) IsYANGGoStruct() {
}

// GetBgpLsIdentifier retrieves the value of the leaf BgpLsIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsIdentifier is set, it can
// safely use t.GetBgpLsIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) GetBgpLsIdentifier() uint32 {
	if t == nil || t.BgpLsIdentifier == nil {
		return 0
	}
	return *t.BgpLsIdentifier
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected_TeDatabaseInstall_BgpLs) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi represents the /srl_nokia-network-instance/network-instance/protocols/gribi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi struct {
	AdminState                        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-gribi-server"`
	DefaultMetric                     *uint32                     `path:"default-metric" module:"srl_nokia-gribi-server"`
	DefaultPreference                 *uint8                      `path:"default-preference" module:"srl_nokia-gribi-server"`
	MaxEcmpHashBucketsPerNextHopGroup *uint16                     `path:"max-ecmp-hash-buckets-per-next-hop-group" module:"srl_nokia-gribi-server"`
	MaximumRoutes                     *uint32                     `path:"maximum-routes" module:"srl_nokia-gribi-server"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetDefaultPreference retrieves the value of the leaf DefaultPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPreference is set, it can
// safely use t.GetDefaultPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetDefaultPreference() uint8 {
	if t == nil || t.DefaultPreference == nil {
		return 6
	}
	return *t.DefaultPreference
}

// GetMaxEcmpHashBucketsPerNextHopGroup retrieves the value of the leaf MaxEcmpHashBucketsPerNextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpHashBucketsPerNextHopGroup is set, it can
// safely use t.GetMaxEcmpHashBucketsPerNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpHashBucketsPerNextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetMaxEcmpHashBucketsPerNextHopGroup() uint16 {
	if t == nil || t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		return 256
	}
	return *t.MaxEcmpHashBucketsPerNextHopGroup
}

// GetMaximumRoutes retrieves the value of the leaf MaximumRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumRoutes is set, it can
// safely use t.GetMaximumRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) GetMaximumRoutes() uint32 {
	if t == nil || t.MaximumRoutes == nil {
		return 0
	}
	return *t.MaximumRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.DefaultPreference == nil {
		var v uint8 = 6
		t.DefaultPreference = &v
	}
	if t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		var v uint16 = 256
		t.MaxEcmpHashBucketsPerNextHopGroup = &v
	}
	if t.MaximumRoutes == nil {
		var v uint32 = 0
		t.MaximumRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi) ΛBelongingModule() string {
	return "srl_nokia-gribi-server"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp represents the /srl_nokia-network-instance/network-instance/protocols/igmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                  `path:"admin-state" module:"srl_nokia-igmp"`
	Interface               map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface `path:"interface" module:"srl_nokia-igmp"`
	QueryInterval           *uint32                                                                      `path:"query-interval" module:"srl_nokia-igmp"`
	QueryLastMemberInterval *uint32                                                                      `path:"query-last-member-interval" module:"srl_nokia-igmp"`
	QueryResponseInterval   *uint32                                                                      `path:"query-response-interval" module:"srl_nokia-igmp"`
	RobustCount             *uint32                                                                      `path:"robust-count" module:"srl_nokia-igmp"`
	Ssm                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm                  `path:"ssm" module:"srl_nokia-igmp"`
	TraceOptions            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions         `path:"trace-options" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) NewInterface(InterfaceName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetInterface(InterfaceName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm{}
	return t.Ssm
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions{}
	return t.TraceOptions
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.Ssm.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping struct {
	AdminState          E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-igmp-snooping"`
	Interface           map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface `path:"interface" module:"srl_nokia-igmp-snooping"`
	QueryInterval       *uint32                                                                              `path:"query-interval" module:"srl_nokia-igmp-snooping"`
	QuerySourceAddress  *string                                                                              `path:"query-source-address" module:"srl_nokia-igmp-snooping"`
	ReportSourceAddress *string                                                                              `path:"report-source-address" module:"srl_nokia-igmp-snooping"`
	RobustCount         *uint32                                                                              `path:"robust-count" module:"srl_nokia-igmp-snooping"`
	TraceOptions        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions         `path:"trace-options" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface struct {
	FastLeave                 *bool                                                                                            `path:"fast-leave" module:"srl_nokia-igmp-snooping"`
	ImportPolicy              *string                                                                                          `path:"import-policy" module:"srl_nokia-igmp-snooping"`
	InterfaceName             *string                                                                                          `path:"interface-name" module:"srl_nokia-igmp-snooping"`
	MaximumNumberGroupSources *uint32                                                                                          `path:"maximum-number-group-sources" module:"srl_nokia-igmp-snooping"`
	MaximumNumberGroups       *uint32                                                                                          `path:"maximum-number-groups" module:"srl_nokia-igmp-snooping"`
	MaximumNumberSources      *uint32                                                                                          `path:"maximum-number-sources" module:"srl_nokia-igmp-snooping"`
	MrouterPort               *bool                                                                                            `path:"mrouter-port" module:"srl_nokia-igmp-snooping"`
	QueryInterval             *uint32                                                                                          `path:"query-interval" module:"srl_nokia-igmp-snooping"`
	QueryLastMemberInterval   *uint32                                                                                          `path:"query-last-member-interval" module:"srl_nokia-igmp-snooping"`
	QueryResponseInterval     *uint32                                                                                          `path:"query-response-interval" module:"srl_nokia-igmp-snooping"`
	RobustCount               *uint32                                                                                          `path:"robust-count" module:"srl_nokia-igmp-snooping"`
	RouterAlertCheck          *bool                                                                                            `path:"router-alert-check" module:"srl_nokia-igmp-snooping"`
	SendQueries               *bool                                                                                            `path:"send-queries" module:"srl_nokia-igmp-snooping"`
	StaticMembershipGroups    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-igmp-snooping"`
	Version                   *uint8                                                                                           `path:"version" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) IsYANGGoStruct() {}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 0
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 3
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == nil {
		var v uint8 = 3
		t.Version = &v
	}
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group `path:"group" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) NewGroup(
	Group string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group)
	}

	key := Group

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group{
		Group: &Group,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Group = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) GetOrCreateGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group {
	key := Group

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Group)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) GetGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group {
	if t == nil {
		return nil
	}

	key := Group

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) DeleteGroup(Group string) {
	key := Group

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group,
) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key received for Group")
	}

	key := *v.Group

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface/static-membership-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct {
	Group  *string                                                                                                                  `path:"group" module:"srl_nokia-igmp-snooping"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source `path:"source" module:"srl_nokia-igmp-snooping"`
	Starg  YANGEmpty                                                                                                                `path:"starg" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroup retrieves the value of the leaf Group from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"group": *t.Group,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/interface/static-membership-groups/group/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_Interface_StaticMembershipGroups_Group_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace `path:"trace" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) IsYANGGoStruct() {
}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace struct {
	Packet *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-igmp-snooping" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct {
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-igmp-snooping"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Modifier            `path:"modifier" module:"srl_nokia-igmp-snooping"`
	SourceMac map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac `path:"source-mac" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSourceMac creates a new entry in the SourceMac list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) NewSourceMac(
	SourceMac string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	key := SourceMac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceMac", key)
	}

	t.SourceMac[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac{
		SourceMac: &SourceMac,
	}

	return t.SourceMac[key], nil
}

// RenameSourceMac renames an entry in the list SourceMac within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) RenameSourceMac(oldK, newK string) error {
	if _, ok := t.SourceMac[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceMac", newK)
	}

	e, ok := t.SourceMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceMac", oldK)
	}
	e.SourceMac = &newK

	t.SourceMac[newK] = e
	delete(t.SourceMac, oldK)
	return nil
}

// GetOrCreateSourceMac retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetOrCreateSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac {
	key := SourceMac

	if v, ok := t.SourceMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceMac(SourceMac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceMac got unexpected error: %v", err))
	}
	return v
}

// GetSourceMac retrieves the value with the specified key from
// the SourceMac map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac {
	if t == nil {
		return nil
	}

	key := SourceMac

	if lm, ok := t.SourceMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceMac deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) DeleteSourceMac(SourceMac string) {
	key := SourceMac

	delete(t.SourceMac, key)
}

// AppendSourceMac appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac struct to the
// list SourceMac of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) AppendSourceMac(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac,
) error {
	if v.SourceMac == nil {
		return fmt.Errorf("invalid nil key received for SourceMac")
	}

	key := *v.SourceMac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	if _, ok := t.SourceMac[key]; ok {
		return fmt.Errorf("duplicate key for list SourceMac %v", key)
	}

	t.SourceMac[key] = v
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceMac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface struct {
	InterfaceName *string `path:"interface-name" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac represents the /srl_nokia-network-instance/network-instance/protocols/igmp-snooping/trace-options/trace/packet/source-mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac struct {
	SourceMac *string `path:"source-mac" module:"srl_nokia-igmp-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) IsYANGGoStruct() {
}

// GetSourceMac retrieves the value of the leaf SourceMac from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceMac == nil {
		return nil, fmt.Errorf("nil value for key SourceMac")
	}

	return map[string]interface{}{
		"source-mac": *t.SourceMac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping_TraceOptions_Trace_Packet_SourceMac) ΛBelongingModule() string {
	return "srl_nokia-igmp-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface struct {
	AdminState                E_SrlNokiaCommon_AdminState                                                              `path:"admin-state" module:"srl_nokia-igmp"`
	ImportPolicy              *string                                                                                  `path:"import-policy" module:"srl_nokia-igmp"`
	InterfaceName             *string                                                                                  `path:"interface-name" module:"srl_nokia-igmp"`
	MaximumNumberGroupSources *uint32                                                                                  `path:"maximum-number-group-sources" module:"srl_nokia-igmp"`
	MaximumNumberGroups       *uint32                                                                                  `path:"maximum-number-groups" module:"srl_nokia-igmp"`
	MaximumNumberSources      *uint32                                                                                  `path:"maximum-number-sources" module:"srl_nokia-igmp"`
	QueryInterval             *uint32                                                                                  `path:"query-interval" module:"srl_nokia-igmp"`
	QueryLastMemberInterval   *uint32                                                                                  `path:"query-last-member-interval" module:"srl_nokia-igmp"`
	QueryResponseInterval     *uint32                                                                                  `path:"query-response-interval" module:"srl_nokia-igmp"`
	RouterAlertCheck          *bool                                                                                    `path:"router-alert-check" module:"srl_nokia-igmp"`
	Ssm                       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm                    `path:"ssm" module:"srl_nokia-igmp"`
	StaticMembershipGroups    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-igmp"`
	SubnetCheck               *bool                                                                                    `path:"subnet-check" module:"srl_nokia-igmp"`
	Version                   *uint8                                                                                   `path:"version" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) IsYANGGoStruct() {}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm{}
	return t.Ssm
}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 3
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == nil {
		var v uint8 = 3
		t.Version = &v
	}
	t.Ssm.PopulateDefaults()
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings `path:"mappings" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"start": t.Start,
		"end":   t.End,
	}, nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                                     `path:"end" module:"srl_nokia-igmp"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-igmp"`
	Start  *string                                                                                                     `path:"start" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange `path:"group-range" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"start": t.Start,
		"end":   t.End,
	}, nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct {
	End    *string                                                                                                               `path:"end" module:"srl_nokia-igmp"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source `path:"source" module:"srl_nokia-igmp"`
	Starg  YANGEmpty                                                                                                             `path:"starg" module:"srl_nokia-igmp"`
	Start  *string                                                                                                               `path:"start" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp/interface/static-membership-groups/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Interface_StaticMembershipGroups_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings `path:"mappings" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"start": t.Start,
		"end":   t.End,
	}, nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                           `path:"end" module:"srl_nokia-igmp"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-igmp"`
	Start  *string                                                                                           `path:"start" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/igmp/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}
