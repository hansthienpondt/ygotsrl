/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaSystem_System_Maintenance_Profile represents the /srl_nokia-system/system/maintenance/profile YANG schema element.
type SrlNokiaSystem_System_Maintenance_Profile struct {
	Bgp  *SrlNokiaSystem_System_Maintenance_Profile_Bgp  `path:"bgp" module:"srl_nokia-maintenance-mode"`
	Isis *SrlNokiaSystem_System_Maintenance_Profile_Isis `path:"isis" module:"srl_nokia-maintenance-mode"`
	Name *string                                         `path:"name" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Profile) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Maintenance_Profile) GetOrCreateBgp() *SrlNokiaSystem_System_Maintenance_Profile_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaSystem_System_Maintenance_Profile_Bgp{}
	return t.Bgp
}

// GetOrCreateIsis retrieves the value of the Isis field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Maintenance_Profile) GetOrCreateIsis() *SrlNokiaSystem_System_Maintenance_Profile_Isis {
	if t.Isis != nil {
		return t.Isis
	}
	t.Isis = &SrlNokiaSystem_System_Maintenance_Profile_Isis{}
	return t.Isis
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaSystem_System_Maintenance_Profile. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Maintenance_Profile) GetBgp() *SrlNokiaSystem_System_Maintenance_Profile_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetIsis returns the value of the Isis struct pointer
// from SrlNokiaSystem_System_Maintenance_Profile. If the receiver or the field Isis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Maintenance_Profile) GetIsis() *SrlNokiaSystem_System_Maintenance_Profile_Isis {
	if t != nil && t.Isis != nil {
		return t.Isis
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Maintenance_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Maintenance_Profile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Maintenance_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Maintenance_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.Isis.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Maintenance_Profile struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Maintenance_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Maintenance_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Maintenance_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Maintenance_Profile.
func (*SrlNokiaSystem_System_Maintenance_Profile) ΛBelongingModule() string {
	return "srl_nokia-maintenance-mode"
}

// SrlNokiaSystem_System_Maintenance_Profile_Bgp represents the /srl_nokia-system/system/maintenance/profile/bgp YANG schema element.
type SrlNokiaSystem_System_Maintenance_Profile_Bgp struct {
	ExportPolicy *string `path:"export-policy" module:"srl_nokia-maintenance-mode"`
	ImportPolicy *string `path:"import-policy" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Profile_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Profile_Bgp) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaSystem_System_Maintenance_Profile_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Bgp) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaSystem_System_Maintenance_Profile_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Bgp) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Maintenance_Profile_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Maintenance_Profile_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Maintenance_Profile_Bgp.
func (*SrlNokiaSystem_System_Maintenance_Profile_Bgp) ΛBelongingModule() string {
	return "srl_nokia-maintenance-mode"
}

// SrlNokiaSystem_System_Maintenance_Profile_Isis represents the /srl_nokia-system/system/maintenance/profile/isis YANG schema element.
type SrlNokiaSystem_System_Maintenance_Profile_Isis struct {
	Overload *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload `path:"overload" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Profile_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Profile_Isis) IsYANGGoStruct() {}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis) GetOrCreateOverload() *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload{}
	return t.Overload
}

// GetOverload returns the value of the Overload struct pointer
// from SrlNokiaSystem_System_Maintenance_Profile_Isis. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis) GetOverload() *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Maintenance_Profile_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overload.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Maintenance_Profile_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Maintenance_Profile_Isis.
func (*SrlNokiaSystem_System_Maintenance_Profile_Isis) ΛBelongingModule() string {
	return "srl_nokia-maintenance-mode"
}

// SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload represents the /srl_nokia-system/system/maintenance/profile/isis/overload YANG schema element.
type SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload struct {
	MaxMetric *bool `path:"max-metric" module:"srl_nokia-maintenance-mode"`
	SetBit    *bool `path:"set-bit" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetSetBit retrieves the value of the leaf SetBit from the SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBit is set, it can
// safely use t.GetSetBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBit == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) GetSetBit() bool {
	if t == nil || t.SetBit == nil {
		return false
	}
	return *t.SetBit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
	if t.SetBit == nil {
		var v bool = false
		t.SetBit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload.
func (*SrlNokiaSystem_System_Maintenance_Profile_Isis_Overload) ΛBelongingModule() string {
	return "srl_nokia-maintenance-mode"
}

// SrlNokiaSystem_System_Management represents the /srl_nokia-system/system/management YANG schema element.
type SrlNokiaSystem_System_Management struct {
	Openconfig *SrlNokiaSystem_System_Management_Openconfig `path:"openconfig" module:"srl_nokia-openconfig" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Management implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Management) IsYANGGoStruct() {}

// GetOrCreateOpenconfig retrieves the value of the Openconfig field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Management) GetOrCreateOpenconfig() *SrlNokiaSystem_System_Management_Openconfig {
	if t.Openconfig != nil {
		return t.Openconfig
	}
	t.Openconfig = &SrlNokiaSystem_System_Management_Openconfig{}
	return t.Openconfig
}

// GetOpenconfig returns the value of the Openconfig struct pointer
// from SrlNokiaSystem_System_Management. If the receiver or the field Openconfig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Management) GetOpenconfig() *SrlNokiaSystem_System_Management_Openconfig {
	if t != nil && t.Openconfig != nil {
		return t.Openconfig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Management
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Management) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Openconfig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Management) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Management"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Management) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Management) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Management.
func (*SrlNokiaSystem_System_Management) ΛBelongingModule() string {
	return "srl_nokia-system"
}

// SrlNokiaSystem_System_Management_Openconfig represents the /srl_nokia-system/system/management/openconfig YANG schema element.
type SrlNokiaSystem_System_Management_Openconfig struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-openconfig"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Management_Openconfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Management_Openconfig) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_Management_Openconfig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Management_Openconfig) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Management_Openconfig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Management_Openconfig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Management_Openconfig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Management_Openconfig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Management_Openconfig) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Management_Openconfig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Management_Openconfig.
func (*SrlNokiaSystem_System_Management_Openconfig) ΛBelongingModule() string {
	return "srl_nokia-openconfig"
}

// SrlNokiaSystem_System_Mirroring represents the /srl_nokia-system/system/mirroring YANG schema element.
type SrlNokiaSystem_System_Mirroring struct {
	MirroringInstance map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance `path:"mirroring-instance" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring) IsYANGGoStruct() {}

// NewMirroringInstance creates a new entry in the MirroringInstance list of the
// SrlNokiaSystem_System_Mirroring struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring) NewMirroringInstance(Name string) (*SrlNokiaSystem_System_Mirroring_MirroringInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MirroringInstance == nil {
		t.MirroringInstance = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MirroringInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MirroringInstance", key)
	}

	t.MirroringInstance[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance{
		Name: &Name,
	}

	return t.MirroringInstance[key], nil
}

// RenameMirroringInstance renames an entry in the list MirroringInstance within
// the SrlNokiaSystem_System_Mirroring struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring) RenameMirroringInstance(oldK, newK string) error {
	if _, ok := t.MirroringInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MirroringInstance", newK)
	}

	e, ok := t.MirroringInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MirroringInstance", oldK)
	}
	e.Name = &newK

	t.MirroringInstance[newK] = e
	delete(t.MirroringInstance, oldK)
	return nil
}

// GetOrCreateMirroringInstance retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring) GetOrCreateMirroringInstance(Name string) *SrlNokiaSystem_System_Mirroring_MirroringInstance {
	key := Name

	if v, ok := t.MirroringInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMirroringInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMirroringInstance got unexpected error: %v", err))
	}
	return v
}

// GetMirroringInstance retrieves the value with the specified key from
// the MirroringInstance map field of SrlNokiaSystem_System_Mirroring. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring) GetMirroringInstance(Name string) *SrlNokiaSystem_System_Mirroring_MirroringInstance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MirroringInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteMirroringInstance deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring) DeleteMirroringInstance(Name string) {
	key := Name

	delete(t.MirroringInstance, key)
}

// AppendMirroringInstance appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance struct to the
// list MirroringInstance of SrlNokiaSystem_System_Mirroring. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring) AppendMirroringInstance(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MirroringInstance == nil {
		t.MirroringInstance = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance)
	}

	if _, ok := t.MirroringInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MirroringInstance %v", key)
	}

	t.MirroringInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MirroringInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring.
func (*SrlNokiaSystem_System_Mirroring) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance represents the /srl_nokia-system/system/mirroring/mirroring-instance YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance struct {
	AdminState        E_SrlNokiaCommon_AdminState                                          `path:"admin-state" module:"srl_nokia-mirroring"`
	Description       *string                                                              `path:"description" module:"srl_nokia-mirroring"`
	MirrorDestination *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination `path:"mirror-destination" module:"srl_nokia-mirroring"`
	MirrorSource      *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource      `path:"mirror-source" module:"srl_nokia-mirroring"`
	Name              *string                                                              `path:"name" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance) IsYANGGoStruct() {}

// GetOrCreateMirrorDestination retrieves the value of the MirrorDestination field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetOrCreateMirrorDestination() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination {
	if t.MirrorDestination != nil {
		return t.MirrorDestination
	}
	t.MirrorDestination = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination{}
	return t.MirrorDestination
}

// GetOrCreateMirrorSource retrieves the value of the MirrorSource field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetOrCreateMirrorSource() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource {
	if t.MirrorSource != nil {
		return t.MirrorSource
	}
	t.MirrorSource = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource{}
	return t.MirrorSource
}

// GetMirrorDestination returns the value of the MirrorDestination struct pointer
// from SrlNokiaSystem_System_Mirroring_MirroringInstance. If the receiver or the field MirrorDestination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetMirrorDestination() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination {
	if t != nil && t.MirrorDestination != nil {
		return t.MirrorDestination
	}
	return nil
}

// GetMirrorSource returns the value of the MirrorSource struct pointer
// from SrlNokiaSystem_System_Mirroring_MirroringInstance. If the receiver or the field MirrorSource is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetMirrorSource() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource {
	if t != nil && t.MirrorSource != nil {
		return t.MirrorSource
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_Mirroring_MirroringInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaSystem_System_Mirroring_MirroringInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mirroring_MirroringInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.MirrorDestination.PopulateDefaults()
	t.MirrorSource.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-destination YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination struct {
	Local  *string                                                                     `path:"local" module:"srl_nokia-mirroring"`
	Remote *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote `path:"remote" module:"srl_nokia-mirroring" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) IsYANGGoStruct() {}

// GetOrCreateRemote retrieves the value of the Remote field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) GetOrCreateRemote() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote {
	if t.Remote != nil {
		return t.Remote
	}
	t.Remote = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote{}
	return t.Remote
}

// GetRemote returns the value of the Remote struct pointer
// from SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination. If the receiver or the field Remote is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) GetRemote() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote {
	if t != nil && t.Remote != nil {
		return t.Remote
	}
	return nil
}

// GetLocal retrieves the value of the leaf Local from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) GetLocal() string {
	if t == nil || t.Local == nil {
		return ""
	}
	return *t.Local
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Remote.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-destination/remote YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote struct {
	Encap           E_SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_Encap          `path:"encap" module:"srl_nokia-mirroring"`
	NetworkInstance *string                                                                                     `path:"network-instance" module:"srl_nokia-mirroring"`
	TunnelEndPoints *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints `path:"tunnel-end-points" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) IsYANGGoStruct() {}

// GetOrCreateTunnelEndPoints retrieves the value of the TunnelEndPoints field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) GetOrCreateTunnelEndPoints() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints {
	if t.TunnelEndPoints != nil {
		return t.TunnelEndPoints
	}
	t.TunnelEndPoints = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints{}
	return t.TunnelEndPoints
}

// GetTunnelEndPoints returns the value of the TunnelEndPoints struct pointer
// from SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote. If the receiver or the field TunnelEndPoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) GetTunnelEndPoints() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints {
	if t != nil && t.TunnelEndPoints != nil {
		return t.TunnelEndPoints
	}
	return nil
}

// GetEncap retrieves the value of the leaf Encap from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) GetEncap() E_SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_Encap {
	if t == nil || t.Encap == 0 {
		return 0
	}
	return t.Encap
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelEndPoints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-destination/remote/tunnel-end-points YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-mirroring"`
	DstIpv4    *string                     `path:"dst-ipv4" module:"srl_nokia-mirroring"`
	DstIpv6    *string                     `path:"dst-ipv6" module:"srl_nokia-mirroring"`
	SrcIpv4    *string                     `path:"src-ipv4" module:"srl_nokia-mirroring"`
	SrcIpv6    *string                     `path:"src-ipv6" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDstIpv4 retrieves the value of the leaf DstIpv4 from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIpv4 is set, it can
// safely use t.GetDstIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIpv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) GetDstIpv4() string {
	if t == nil || t.DstIpv4 == nil {
		return ""
	}
	return *t.DstIpv4
}

// GetDstIpv6 retrieves the value of the leaf DstIpv6 from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIpv6 is set, it can
// safely use t.GetDstIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIpv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) GetDstIpv6() string {
	if t == nil || t.DstIpv6 == nil {
		return ""
	}
	return *t.DstIpv6
}

// GetSrcIpv4 retrieves the value of the leaf SrcIpv4 from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpv4 is set, it can
// safely use t.GetSrcIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) GetSrcIpv4() string {
	if t == nil || t.SrcIpv4 == nil {
		return ""
	}
	return *t.SrcIpv4
}

// GetSrcIpv6 retrieves the value of the leaf SrcIpv6 from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpv6 is set, it can
// safely use t.GetSrcIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) GetSrcIpv6() string {
	if t == nil || t.SrcIpv6 == nil {
		return ""
	}
	return *t.SrcIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorDestination_Remote_TunnelEndPoints) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource struct {
	Acl          *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl                     `path:"acl" module:"srl_nokia-mirroring"`
	Interface    map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface    `path:"interface" module:"srl_nokia-mirroring"`
	Subinterface map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface `path:"subinterface" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) NewInterface(Name string) (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) GetOrCreateInterface(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface {
	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) GetInterface(Name string) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface struct to the
// list Interface of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) AppendInterface(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSubinterface creates a new entry in the Subinterface list of the
// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) NewSubinterface(
	Name string,
) (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface{
		Name: &Name,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) RenameSubinterface(oldK, newK string) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Name = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) GetOrCreateSubinterface(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface {
	key := Name

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) GetSubinterface(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) DeleteSubinterface(Name string) {
	key := Name

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface struct to the
// list Subinterface of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) AppendSubinterface(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// GetOrCreateAcl retrieves the value of the Acl field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) GetOrCreateAcl() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl {
	if t.Acl != nil {
		return t.Acl
	}
	t.Acl = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl{}
	return t.Acl
}

// GetAcl returns the value of the Acl struct pointer
// from SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource. If the receiver or the field Acl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) GetAcl() *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl {
	if t != nil && t.Acl != nil {
		return t.Acl
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Acl.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Subinterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/acl YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl struct {
	Ipv4Filter map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter `path:"ipv4-filter" module:"srl_nokia-mirroring"`
	Ipv6Filter map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter `path:"ipv6-filter" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) IsYANGGoStruct() {}

// NewIpv4Filter creates a new entry in the Ipv4Filter list of the
// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) NewIpv4Filter(
	Name string,
) (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Filter == nil {
		t.Ipv4Filter = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Filter", key)
	}

	t.Ipv4Filter[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter{
		Name: &Name,
	}

	return t.Ipv4Filter[key], nil
}

// RenameIpv4Filter renames an entry in the list Ipv4Filter within
// the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) RenameIpv4Filter(oldK, newK string) error {
	if _, ok := t.Ipv4Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Filter", newK)
	}

	e, ok := t.Ipv4Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Filter", oldK)
	}
	e.Name = &newK

	t.Ipv4Filter[newK] = e
	delete(t.Ipv4Filter, oldK)
	return nil
}

// GetOrCreateIpv4Filter retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) GetOrCreateIpv4Filter(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter {
	key := Name

	if v, ok := t.Ipv4Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Filter(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Filter got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Filter retrieves the value with the specified key from
// the Ipv4Filter map field of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) GetIpv4Filter(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv4Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Filter deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) DeleteIpv4Filter(Name string) {
	key := Name

	delete(t.Ipv4Filter, key)
}

// AppendIpv4Filter appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter struct to the
// list Ipv4Filter of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) AppendIpv4Filter(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Filter == nil {
		t.Ipv4Filter = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter)
	}

	if _, ok := t.Ipv4Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Filter %v", key)
	}

	t.Ipv4Filter[key] = v
	return nil
}

// NewIpv6Filter creates a new entry in the Ipv6Filter list of the
// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) NewIpv6Filter(
	Name string,
) (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Filter", key)
	}

	t.Ipv6Filter[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter{
		Name: &Name,
	}

	return t.Ipv6Filter[key], nil
}

// RenameIpv6Filter renames an entry in the list Ipv6Filter within
// the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) RenameIpv6Filter(oldK, newK string) error {
	if _, ok := t.Ipv6Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Filter", newK)
	}

	e, ok := t.Ipv6Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Filter", oldK)
	}
	e.Name = &newK

	t.Ipv6Filter[newK] = e
	delete(t.Ipv6Filter, oldK)
	return nil
}

// GetOrCreateIpv6Filter retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) GetOrCreateIpv6Filter(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter {
	key := Name

	if v, ok := t.Ipv6Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Filter(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Filter got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Filter retrieves the value with the specified key from
// the Ipv6Filter map field of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) GetIpv6Filter(
	Name string,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv6Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Filter deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) DeleteIpv6Filter(Name string) {
	key := Name

	delete(t.Ipv6Filter, key)
}

// AppendIpv6Filter appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter struct to the
// list Ipv6Filter of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) AppendIpv6Filter(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter)
	}

	if _, ok := t.Ipv6Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Filter %v", key)
	}

	t.Ipv6Filter[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Filter {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/acl/ipv4-filter YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter struct {
	Entry map[uint32]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry `path:"entry" module:"srl_nokia-mirroring"`
	Name  *string                                                                                         `path:"name" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) NewEntry(
	SequenceId uint32,
) (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) GetOrCreateEntry(
	SequenceId uint32,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) GetEntry(
	SequenceId uint32,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry struct to the
// list Entry of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) AppendEntry(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/acl/ipv4-filter/entry YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry struct {
	SequenceId *uint32 `path:"sequence-id" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) IsYANGGoStruct() {
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv4Filter_Entry) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/acl/ipv6-filter YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter struct {
	Entry map[uint32]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry `path:"entry" module:"srl_nokia-mirroring"`
	Name  *string                                                                                         `path:"name" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) NewEntry(
	SequenceId uint32,
) (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) GetOrCreateEntry(
	SequenceId uint32,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) GetEntry(
	SequenceId uint32,
) *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry struct to the
// list Entry of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) AppendEntry(
	v *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/acl/ipv6-filter/entry YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry struct {
	SequenceId *uint32 `path:"sequence-id" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) IsYANGGoStruct() {
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Acl_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/interface YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface struct {
	Direction E_SrlNokiaMirroring_Direction `path:"direction" module:"srl_nokia-mirroring"`
	Name      *string                       `path:"name" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) GetDirection() E_SrlNokiaMirroring_Direction {
	if t == nil || t.Direction == 0 {
		return SrlNokiaMirroring_Direction_egress_only
	}
	return t.Direction
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = SrlNokiaMirroring_Direction_egress_only
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Interface) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface represents the /srl_nokia-system/system/mirroring/mirroring-instance/mirror-source/subinterface YANG schema element.
type SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface struct {
	Direction E_SrlNokiaMirroring_Direction `path:"direction" module:"srl_nokia-mirroring"`
	Name      *string                       `path:"name" module:"srl_nokia-mirroring"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) GetDirection() E_SrlNokiaMirroring_Direction {
	if t == nil || t.Direction == 0 {
		return SrlNokiaMirroring_Direction_egress_only
	}
	return t.Direction
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = SrlNokiaMirroring_Direction_egress_only
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface.
func (*SrlNokiaSystem_System_Mirroring_MirroringInstance_MirrorSource_Subinterface) ΛBelongingModule() string {
	return "srl_nokia-mirroring"
}

// SrlNokiaSystem_System_Mpls represents the /srl_nokia-system/system/mpls YANG schema element.
type SrlNokiaSystem_System_Mpls struct {
	LabelRanges *SrlNokiaSystem_System_Mpls_LabelRanges `path:"label-ranges" module:"srl_nokia-mpls-label-management"`
	Services    *SrlNokiaSystem_System_Mpls_Services    `path:"services" module:"srl_nokia-mpls-label-management"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls) IsYANGGoStruct() {}

// GetOrCreateLabelRanges retrieves the value of the LabelRanges field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mpls) GetOrCreateLabelRanges() *SrlNokiaSystem_System_Mpls_LabelRanges {
	if t.LabelRanges != nil {
		return t.LabelRanges
	}
	t.LabelRanges = &SrlNokiaSystem_System_Mpls_LabelRanges{}
	return t.LabelRanges
}

// GetOrCreateServices retrieves the value of the Services field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mpls) GetOrCreateServices() *SrlNokiaSystem_System_Mpls_Services {
	if t.Services != nil {
		return t.Services
	}
	t.Services = &SrlNokiaSystem_System_Mpls_Services{}
	return t.Services
}

// GetLabelRanges returns the value of the LabelRanges struct pointer
// from SrlNokiaSystem_System_Mpls. If the receiver or the field LabelRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mpls) GetLabelRanges() *SrlNokiaSystem_System_Mpls_LabelRanges {
	if t != nil && t.LabelRanges != nil {
		return t.LabelRanges
	}
	return nil
}

// GetServices returns the value of the Services struct pointer
// from SrlNokiaSystem_System_Mpls. If the receiver or the field Services is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mpls) GetServices() *SrlNokiaSystem_System_Mpls_Services {
	if t != nil && t.Services != nil {
		return t.Services
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LabelRanges.PopulateDefaults()
	t.Services.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls.
func (*SrlNokiaSystem_System_Mpls) ΛBelongingModule() string {
	return "srl_nokia-mpls-label-management"
}

// SrlNokiaSystem_System_Mpls_LabelRanges represents the /srl_nokia-system/system/mpls/label-ranges YANG schema element.
type SrlNokiaSystem_System_Mpls_LabelRanges struct {
	Dynamic map[string]*SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic `path:"dynamic" module:"srl_nokia-mpls-label-management"`
	Static  map[string]*SrlNokiaSystem_System_Mpls_LabelRanges_Static  `path:"static" module:"srl_nokia-mpls-label-management"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls_LabelRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls_LabelRanges) IsYANGGoStruct() {}

// NewDynamic creates a new entry in the Dynamic list of the
// SrlNokiaSystem_System_Mpls_LabelRanges struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) NewDynamic(Name string) (*SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dynamic == nil {
		t.Dynamic = make(map[string]*SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dynamic[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dynamic", key)
	}

	t.Dynamic[key] = &SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic{
		Name: &Name,
	}

	return t.Dynamic[key], nil
}

// RenameDynamic renames an entry in the list Dynamic within
// the SrlNokiaSystem_System_Mpls_LabelRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) RenameDynamic(oldK, newK string) error {
	if _, ok := t.Dynamic[newK]; ok {
		return fmt.Errorf("key %v already exists in Dynamic", newK)
	}

	e, ok := t.Dynamic[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dynamic", oldK)
	}
	e.Name = &newK

	t.Dynamic[newK] = e
	delete(t.Dynamic, oldK)
	return nil
}

// GetOrCreateDynamic retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mpls_LabelRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) GetOrCreateDynamic(Name string) *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic {
	key := Name

	if v, ok := t.Dynamic[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDynamic(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDynamic got unexpected error: %v", err))
	}
	return v
}

// GetDynamic retrieves the value with the specified key from
// the Dynamic map field of SrlNokiaSystem_System_Mpls_LabelRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) GetDynamic(Name string) *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dynamic[key]; ok {
		return lm
	}
	return nil
}

// DeleteDynamic deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mpls_LabelRanges. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) DeleteDynamic(Name string) {
	key := Name

	delete(t.Dynamic, key)
}

// AppendDynamic appends the supplied SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic struct to the
// list Dynamic of SrlNokiaSystem_System_Mpls_LabelRanges. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) AppendDynamic(v *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dynamic == nil {
		t.Dynamic = make(map[string]*SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic)
	}

	if _, ok := t.Dynamic[key]; ok {
		return fmt.Errorf("duplicate key for list Dynamic %v", key)
	}

	t.Dynamic[key] = v
	return nil
}

// NewStatic creates a new entry in the Static list of the
// SrlNokiaSystem_System_Mpls_LabelRanges struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) NewStatic(Name string) (*SrlNokiaSystem_System_Mpls_LabelRanges_Static, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*SrlNokiaSystem_System_Mpls_LabelRanges_Static)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Static[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Static", key)
	}

	t.Static[key] = &SrlNokiaSystem_System_Mpls_LabelRanges_Static{
		Name: &Name,
	}

	return t.Static[key], nil
}

// RenameStatic renames an entry in the list Static within
// the SrlNokiaSystem_System_Mpls_LabelRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) RenameStatic(oldK, newK string) error {
	if _, ok := t.Static[newK]; ok {
		return fmt.Errorf("key %v already exists in Static", newK)
	}

	e, ok := t.Static[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Static", oldK)
	}
	e.Name = &newK

	t.Static[newK] = e
	delete(t.Static, oldK)
	return nil
}

// GetOrCreateStatic retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mpls_LabelRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) GetOrCreateStatic(Name string) *SrlNokiaSystem_System_Mpls_LabelRanges_Static {
	key := Name

	if v, ok := t.Static[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatic(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatic got unexpected error: %v", err))
	}
	return v
}

// GetStatic retrieves the value with the specified key from
// the Static map field of SrlNokiaSystem_System_Mpls_LabelRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) GetStatic(Name string) *SrlNokiaSystem_System_Mpls_LabelRanges_Static {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Static[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatic deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Mpls_LabelRanges. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) DeleteStatic(Name string) {
	key := Name

	delete(t.Static, key)
}

// AppendStatic appends the supplied SrlNokiaSystem_System_Mpls_LabelRanges_Static struct to the
// list Static of SrlNokiaSystem_System_Mpls_LabelRanges. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Mpls_LabelRanges_Static already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) AppendStatic(v *SrlNokiaSystem_System_Mpls_LabelRanges_Static) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*SrlNokiaSystem_System_Mpls_LabelRanges_Static)
	}

	if _, ok := t.Static[key]; ok {
		return fmt.Errorf("duplicate key for list Static %v", key)
	}

	t.Static[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls_LabelRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dynamic {
		e.PopulateDefaults()
	}
	for _, e := range t.Static {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls_LabelRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls_LabelRanges.
func (*SrlNokiaSystem_System_Mpls_LabelRanges) ΛBelongingModule() string {
	return "srl_nokia-mpls-label-management"
}

// SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic represents the /srl_nokia-system/system/mpls/label-ranges/dynamic YANG schema element.
type SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic struct {
	EndLabel   *uint32 `path:"end-label" module:"srl_nokia-mpls-label-management"`
	Name       *string `path:"name" module:"srl_nokia-mpls-label-management"`
	StartLabel *uint32 `path:"start-label" module:"srl_nokia-mpls-label-management"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) IsYANGGoStruct() {}

// GetEndLabel retrieves the value of the leaf EndLabel from the SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabel is set, it can
// safely use t.GetEndLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) GetEndLabel() uint32 {
	if t == nil || t.EndLabel == nil {
		return 0
	}
	return *t.EndLabel
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStartLabel retrieves the value of the leaf StartLabel from the SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic.
func (*SrlNokiaSystem_System_Mpls_LabelRanges_Dynamic) ΛBelongingModule() string {
	return "srl_nokia-mpls-label-management"
}

// SrlNokiaSystem_System_Mpls_LabelRanges_Static represents the /srl_nokia-system/system/mpls/label-ranges/static YANG schema element.
type SrlNokiaSystem_System_Mpls_LabelRanges_Static struct {
	EndLabel   *uint32 `path:"end-label" module:"srl_nokia-mpls-label-management"`
	Name       *string `path:"name" module:"srl_nokia-mpls-label-management"`
	Shared     *bool   `path:"shared" module:"srl_nokia-mpls-label-management"`
	StartLabel *uint32 `path:"start-label" module:"srl_nokia-mpls-label-management"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls_LabelRanges_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls_LabelRanges_Static) IsYANGGoStruct() {}

// GetEndLabel retrieves the value of the leaf EndLabel from the SrlNokiaSystem_System_Mpls_LabelRanges_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabel is set, it can
// safely use t.GetEndLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) GetEndLabel() uint32 {
	if t == nil || t.EndLabel == nil {
		return 0
	}
	return *t.EndLabel
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Mpls_LabelRanges_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetShared retrieves the value of the leaf Shared from the SrlNokiaSystem_System_Mpls_LabelRanges_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Shared is set, it can
// safely use t.GetShared() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Shared == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) GetShared() bool {
	if t == nil || t.Shared == nil {
		return true
	}
	return *t.Shared
}

// GetStartLabel retrieves the value of the leaf StartLabel from the SrlNokiaSystem_System_Mpls_LabelRanges_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls_LabelRanges_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Shared == nil {
		var v bool = true
		t.Shared = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Mpls_LabelRanges_Static struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls_LabelRanges_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls_LabelRanges_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls_LabelRanges_Static.
func (*SrlNokiaSystem_System_Mpls_LabelRanges_Static) ΛBelongingModule() string {
	return "srl_nokia-mpls-label-management"
}

// SrlNokiaSystem_System_Mpls_Services represents the /srl_nokia-system/system/mpls/services YANG schema element.
type SrlNokiaSystem_System_Mpls_Services struct {
	Evpn            *SrlNokiaSystem_System_Mpls_Services_Evpn            `path:"evpn" module:"srl_nokia-mpls-services-evpn-label-management" yangPresence:"true"`
	NetworkInstance *SrlNokiaSystem_System_Mpls_Services_NetworkInstance `path:"network-instance" module:"srl_nokia-mpls-services-network-instance-label-management" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls_Services implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls_Services) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mpls_Services) GetOrCreateEvpn() *SrlNokiaSystem_System_Mpls_Services_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaSystem_System_Mpls_Services_Evpn{}
	return t.Evpn
}

// GetOrCreateNetworkInstance retrieves the value of the NetworkInstance field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Mpls_Services) GetOrCreateNetworkInstance() *SrlNokiaSystem_System_Mpls_Services_NetworkInstance {
	if t.NetworkInstance != nil {
		return t.NetworkInstance
	}
	t.NetworkInstance = &SrlNokiaSystem_System_Mpls_Services_NetworkInstance{}
	return t.NetworkInstance
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaSystem_System_Mpls_Services. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mpls_Services) GetEvpn() *SrlNokiaSystem_System_Mpls_Services_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetNetworkInstance returns the value of the NetworkInstance struct pointer
// from SrlNokiaSystem_System_Mpls_Services. If the receiver or the field NetworkInstance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Mpls_Services) GetNetworkInstance() *SrlNokiaSystem_System_Mpls_Services_NetworkInstance {
	if t != nil && t.NetworkInstance != nil {
		return t.NetworkInstance
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls_Services
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls_Services) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.NetworkInstance.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_Services) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls_Services"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_Services) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls_Services) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls_Services.
func (*SrlNokiaSystem_System_Mpls_Services) ΛBelongingModule() string {
	return "srl_nokia-mpls-label-management"
}

// SrlNokiaSystem_System_Mpls_Services_Evpn represents the /srl_nokia-system/system/mpls/services/evpn YANG schema element.
type SrlNokiaSystem_System_Mpls_Services_Evpn struct {
	DynamicLabelBlock *string `path:"dynamic-label-block" module:"srl_nokia-mpls-services-evpn-label-management"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls_Services_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls_Services_Evpn) IsYANGGoStruct() {}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaSystem_System_Mpls_Services_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_Services_Evpn) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls_Services_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls_Services_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_Services_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls_Services_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_Services_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls_Services_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls_Services_Evpn.
func (*SrlNokiaSystem_System_Mpls_Services_Evpn) ΛBelongingModule() string {
	return "srl_nokia-mpls-services-evpn-label-management"
}

// SrlNokiaSystem_System_Mpls_Services_NetworkInstance represents the /srl_nokia-system/system/mpls/services/network-instance YANG schema element.
type SrlNokiaSystem_System_Mpls_Services_NetworkInstance struct {
	DynamicLabelBlock *string `path:"dynamic-label-block" module:"srl_nokia-mpls-services-network-instance-label-management"`
	StaticLabelBlock  *string `path:"static-label-block" module:"srl_nokia-mpls-services-network-instance-label-management"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mpls_Services_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mpls_Services_NetworkInstance) IsYANGGoStruct() {}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaSystem_System_Mpls_Services_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_Services_NetworkInstance) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaSystem_System_Mpls_Services_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mpls_Services_NetworkInstance) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mpls_Services_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mpls_Services_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_Services_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mpls_Services_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mpls_Services_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mpls_Services_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mpls_Services_NetworkInstance.
func (*SrlNokiaSystem_System_Mpls_Services_NetworkInstance) ΛBelongingModule() string {
	return "srl_nokia-mpls-services-network-instance-label-management"
}

// SrlNokiaSystem_System_Mtu represents the /srl_nokia-system/system/mtu YANG schema element.
type SrlNokiaSystem_System_Mtu struct {
	DefaultIpMtu   *uint16 `path:"default-ip-mtu" module:"srl_nokia-mtu"`
	DefaultL2Mtu   *uint16 `path:"default-l2-mtu" module:"srl_nokia-mtu"`
	DefaultMplsMtu *uint16 `path:"default-mpls-mtu" module:"srl_nokia-mtu"`
	DefaultPortMtu *uint16 `path:"default-port-mtu" module:"srl_nokia-mtu"`
	MinPathMtu     *uint16 `path:"min-path-mtu" module:"srl_nokia-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mtu) IsYANGGoStruct() {}

// GetDefaultIpMtu retrieves the value of the leaf DefaultIpMtu from the SrlNokiaSystem_System_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpMtu is set, it can
// safely use t.GetDefaultIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpMtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mtu) GetDefaultIpMtu() uint16 {
	if t == nil || t.DefaultIpMtu == nil {
		return 1500
	}
	return *t.DefaultIpMtu
}

// GetDefaultL2Mtu retrieves the value of the leaf DefaultL2Mtu from the SrlNokiaSystem_System_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultL2Mtu is set, it can
// safely use t.GetDefaultL2Mtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultL2Mtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mtu) GetDefaultL2Mtu() uint16 {
	if t == nil || t.DefaultL2Mtu == nil {
		return 9232
	}
	return *t.DefaultL2Mtu
}

// GetDefaultMplsMtu retrieves the value of the leaf DefaultMplsMtu from the SrlNokiaSystem_System_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMplsMtu is set, it can
// safely use t.GetDefaultMplsMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMplsMtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mtu) GetDefaultMplsMtu() uint16 {
	if t == nil || t.DefaultMplsMtu == nil {
		return 1508
	}
	return *t.DefaultMplsMtu
}

// GetDefaultPortMtu retrieves the value of the leaf DefaultPortMtu from the SrlNokiaSystem_System_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPortMtu is set, it can
// safely use t.GetDefaultPortMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPortMtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mtu) GetDefaultPortMtu() uint16 {
	if t == nil || t.DefaultPortMtu == nil {
		return 9232
	}
	return *t.DefaultPortMtu
}

// GetMinPathMtu retrieves the value of the leaf MinPathMtu from the SrlNokiaSystem_System_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinPathMtu is set, it can
// safely use t.GetMinPathMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinPathMtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Mtu) GetMinPathMtu() uint16 {
	if t == nil || t.MinPathMtu == nil {
		return 552
	}
	return *t.MinPathMtu
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Mtu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Mtu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultIpMtu == nil {
		var v uint16 = 1500
		t.DefaultIpMtu = &v
	}
	if t.DefaultL2Mtu == nil {
		var v uint16 = 9232
		t.DefaultL2Mtu = &v
	}
	if t.DefaultMplsMtu == nil {
		var v uint16 = 1508
		t.DefaultMplsMtu = &v
	}
	if t.DefaultPortMtu == nil {
		var v uint16 = 9232
		t.DefaultPortMtu = &v
	}
	if t.MinPathMtu == nil {
		var v uint16 = 552
		t.MinPathMtu = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mtu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Mtu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Mtu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Mtu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Mtu.
func (*SrlNokiaSystem_System_Mtu) ΛBelongingModule() string {
	return "srl_nokia-mtu"
}

// SrlNokiaSystem_System_Multicast represents the /srl_nokia-system/system/multicast YANG schema element.
type SrlNokiaSystem_System_Multicast struct {
	MulticastIds *SrlNokiaSystem_System_Multicast_MulticastIds `path:"multicast-ids" module:"srl_nokia-system-multicast"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Multicast) IsYANGGoStruct() {}

// GetOrCreateMulticastIds retrieves the value of the MulticastIds field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Multicast) GetOrCreateMulticastIds() *SrlNokiaSystem_System_Multicast_MulticastIds {
	if t.MulticastIds != nil {
		return t.MulticastIds
	}
	t.MulticastIds = &SrlNokiaSystem_System_Multicast_MulticastIds{}
	return t.MulticastIds
}

// GetMulticastIds returns the value of the MulticastIds struct pointer
// from SrlNokiaSystem_System_Multicast. If the receiver or the field MulticastIds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Multicast) GetMulticastIds() *SrlNokiaSystem_System_Multicast_MulticastIds {
	if t != nil && t.MulticastIds != nil {
		return t.MulticastIds
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Multicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Multicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MulticastIds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Multicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Multicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Multicast.
func (*SrlNokiaSystem_System_Multicast) ΛBelongingModule() string {
	return "srl_nokia-system-multicast"
}

// SrlNokiaSystem_System_Multicast_MulticastIds represents the /srl_nokia-system/system/multicast/multicast-ids YANG schema element.
type SrlNokiaSystem_System_Multicast_MulticastIds struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Multicast_MulticastIds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Multicast_MulticastIds) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Multicast_MulticastIds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Multicast_MulticastIds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Multicast_MulticastIds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Multicast_MulticastIds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Multicast_MulticastIds) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Multicast_MulticastIds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Multicast_MulticastIds.
func (*SrlNokiaSystem_System_Multicast_MulticastIds) ΛBelongingModule() string {
	return "srl_nokia-system-multicast"
}

// SrlNokiaSystem_System_Name represents the /srl_nokia-system/system/name YANG schema element.
type SrlNokiaSystem_System_Name struct {
	DomainName *string `path:"domain-name" module:"srl_nokia-system-name"`
	HostName   *string `path:"host-name" module:"srl_nokia-system-name"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Name) IsYANGGoStruct() {}

// GetDomainName retrieves the value of the leaf DomainName from the SrlNokiaSystem_System_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Name) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostName retrieves the value of the leaf HostName from the SrlNokiaSystem_System_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Name) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Name) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Name) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Name.
func (*SrlNokiaSystem_System_Name) ΛBelongingModule() string {
	return "srl_nokia-system-name"
}

// SrlNokiaSystem_System_NetworkInstance represents the /srl_nokia-system/system/network-instance YANG schema element.
type SrlNokiaSystem_System_NetworkInstance struct {
	Protocols *SrlNokiaSystem_System_NetworkInstance_Protocols `path:"protocols" module:"srl_nokia-system-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance) IsYANGGoStruct() {}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance) GetOrCreateProtocols() *SrlNokiaSystem_System_NetworkInstance_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &SrlNokiaSystem_System_NetworkInstance_Protocols{}
	return t.Protocols
}

// GetProtocols returns the value of the Protocols struct pointer
// from SrlNokiaSystem_System_NetworkInstance. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance) GetProtocols() *SrlNokiaSystem_System_NetworkInstance_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Protocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance.
func (*SrlNokiaSystem_System_NetworkInstance) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols represents the /srl_nokia-system/system/network-instance/protocols YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols struct {
	BgpVpn *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn `path:"bgp-vpn" module:"srl_nokia-system-network-instance-bgp-vpn" yangPresence:"true"`
	Evpn   *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn   `path:"evpn" module:"srl_nokia-system-network-instance" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols) IsYANGGoStruct() {}

// GetOrCreateBgpVpn retrieves the value of the BgpVpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) GetOrCreateBgpVpn() *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn {
	if t.BgpVpn != nil {
		return t.BgpVpn
	}
	t.BgpVpn = &SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn{}
	return t.BgpVpn
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) GetOrCreateEvpn() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn{}
	return t.Evpn
}

// GetBgpVpn returns the value of the BgpVpn struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols. If the receiver or the field BgpVpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) GetBgpVpn() *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn {
	if t != nil && t.BgpVpn != nil {
		return t.BgpVpn
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) GetEvpn() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpVpn.PopulateDefaults()
	t.Evpn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn represents the /srl_nokia-system/system/network-instance/protocols/bgp-vpn YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn struct {
	BgpInstance map[uint8]*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance `path:"bgp-instance" module:"srl_nokia-system-network-instance-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) NewBgpInstance(Id uint8) (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) GetOrCreateBgpInstance(Id uint8) *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) GetBgpInstance(Id uint8) *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance struct to the
// list BgpInstance of SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) AppendBgpInstance(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-vpn"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance represents the /srl_nokia-system/system/network-instance/protocols/bgp-vpn/bgp-instance YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance struct {
	Id                 *uint8                                                                                 `path:"id" module:"srl_nokia-system-network-instance-bgp-vpn"`
	RouteDistinguisher *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher `path:"route-distinguisher" module:"srl_nokia-system-network-instance-bgp-vpn"`
	RouteTarget        *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget        `path:"route-target" module:"srl_nokia-system-network-instance-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateRouteDistinguisher retrieves the value of the RouteDistinguisher field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetOrCreateRouteDistinguisher() *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher {
	if t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	t.RouteDistinguisher = &SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher{}
	return t.RouteDistinguisher
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetOrCreateRouteTarget() *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget{}
	return t.RouteTarget
}

// GetRouteDistinguisher returns the value of the RouteDistinguisher struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance. If the receiver or the field RouteDistinguisher is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetRouteDistinguisher() *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher {
	if t != nil && t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	return nil
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetRouteTarget() *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteDistinguisher.PopulateDefaults()
	t.RouteTarget.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-vpn"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher represents the /srl_nokia-system/system/network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-vpn"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget represents the /srl_nokia-system/system/network-instance/protocols/bgp-vpn/bgp-instance/route-target YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-vpn"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn represents the /srl_nokia-system/system/network-instance/protocols/evpn YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn struct {
	EthernetSegments *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments `path:"ethernet-segments" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) IsYANGGoStruct() {}

// GetOrCreateEthernetSegments retrieves the value of the EthernetSegments field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) GetOrCreateEthernetSegments() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments {
	if t.EthernetSegments != nil {
		return t.EthernetSegments
	}
	t.EthernetSegments = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments{}
	return t.EthernetSegments
}

// GetEthernetSegments returns the value of the EthernetSegments struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn. If the receiver or the field EthernetSegments is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) GetEthernetSegments() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments {
	if t != nil && t.EthernetSegments != nil {
		return t.EthernetSegments
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthernetSegments.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments struct {
	BgpInstance map[uint8]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance `path:"bgp-instance" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Timers      *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers                `path:"timers" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) NewBgpInstance(
	Id uint8,
) (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) GetOrCreateBgpInstance(
	Id uint8,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) GetBgpInstance(
	Id uint8,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance struct to the
// list BgpInstance of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) AppendBgpInstance(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) GetOrCreateTimers() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) GetTimers() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Timers.PopulateDefaults()
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance struct {
	EthernetSegment map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment `path:"ethernet-segment" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Id              *uint8                                                                                                        `path:"id" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) IsYANGGoStruct() {
}

// NewEthernetSegment creates a new entry in the EthernetSegment list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) NewEthernetSegment(
	Name string,
) (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthernetSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthernetSegment", key)
	}

	t.EthernetSegment[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment{
		Name: &Name,
	}

	return t.EthernetSegment[key], nil
}

// RenameEthernetSegment renames an entry in the list EthernetSegment within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) RenameEthernetSegment(oldK, newK string) error {
	if _, ok := t.EthernetSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in EthernetSegment", newK)
	}

	e, ok := t.EthernetSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthernetSegment", oldK)
	}
	e.Name = &newK

	t.EthernetSegment[newK] = e
	delete(t.EthernetSegment, oldK)
	return nil
}

// GetOrCreateEthernetSegment retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) GetOrCreateEthernetSegment(
	Name string,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment {
	key := Name

	if v, ok := t.EthernetSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthernetSegment(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthernetSegment got unexpected error: %v", err))
	}
	return v
}

// GetEthernetSegment retrieves the value with the specified key from
// the EthernetSegment map field of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) GetEthernetSegment(
	Name string,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.EthernetSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthernetSegment deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) DeleteEthernetSegment(Name string) {
	key := Name

	delete(t.EthernetSegment, key)
}

// AppendEthernetSegment appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct to the
// list EthernetSegment of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) AppendEthernetSegment(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment)
	}

	if _, ok := t.EthernetSegment[key]; ok {
		return fmt.Errorf("duplicate key for list EthernetSegment %v", key)
	}

	t.EthernetSegment[key] = v
	return nil
}

// GetId retrieves the value of the leaf Id from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EthernetSegment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct {
	AdminState      E_SrlNokiaCommon_AdminState                                                                                             `path:"admin-state" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	DfElection      *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection           `path:"df-election" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Esi             *string                                                                                                                 `path:"esi" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Interface       map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface `path:"interface" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	MultiHomingMode E_SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_MultiHomingMode                                                  `path:"multi-homing-mode" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Name            *string                                                                                                                 `path:"name" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	NextHop         map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop   `path:"next-hop" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Routes          *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes               `path:"routes" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	Type            E_SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_EsType                                                           `path:"type" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) NewInterface(
	EthernetInterface string,
) (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface)
	}

	key := EthernetInterface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface{
		EthernetInterface: &EthernetInterface,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.EthernetInterface = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetOrCreateInterface(
	EthernetInterface string,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface {
	key := EthernetInterface

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(EthernetInterface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetInterface(
	EthernetInterface string,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface {
	if t == nil {
		return nil
	}

	key := EthernetInterface

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) DeleteInterface(EthernetInterface string) {
	key := EthernetInterface

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface struct to the
// list Interface of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) AppendInterface(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface,
) error {
	if v.EthernetInterface == nil {
		return fmt.Errorf("invalid nil key received for EthernetInterface")
	}

	key := *v.EthernetInterface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewNextHop creates a new entry in the NextHop list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) NewNextHop(
	L3NextHop string,
) (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop)
	}

	key := L3NextHop

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop{
		L3NextHop: &L3NextHop,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.L3NextHop = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetOrCreateNextHop(
	L3NextHop string,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop {
	key := L3NextHop

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(L3NextHop)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetNextHop(
	L3NextHop string,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop {
	if t == nil {
		return nil
	}

	key := L3NextHop

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) DeleteNextHop(L3NextHop string) {
	key := L3NextHop

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop struct to the
// list NextHop of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) AppendNextHop(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop,
) error {
	if v.L3NextHop == nil {
		return fmt.Errorf("invalid nil key received for L3NextHop")
	}

	key := *v.L3NextHop

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetOrCreateDfElection retrieves the value of the DfElection field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetOrCreateDfElection() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection {
	if t.DfElection != nil {
		return t.DfElection
	}
	t.DfElection = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection{}
	return t.DfElection
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetOrCreateRoutes() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes{}
	return t.Routes
}

// GetDfElection returns the value of the DfElection struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the receiver or the field DfElection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetDfElection() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection {
	if t != nil && t.DfElection != nil {
		return t.DfElection
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetRoutes() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetEsi retrieves the value of the leaf Esi from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetMultiHomingMode retrieves the value of the leaf MultiHomingMode from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiHomingMode is set, it can
// safely use t.GetMultiHomingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiHomingMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetMultiHomingMode() E_SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_MultiHomingMode {
	if t == nil || t.MultiHomingMode == 0 {
		return SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_MultiHomingMode_all_active
	}
	return t.MultiHomingMode
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) GetType() E_SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_EsType {
	if t == nil || t.Type == 0 {
		return SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_EsType_none
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.MultiHomingMode == 0 {
		t.MultiHomingMode = SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_MultiHomingMode_all_active
	}
	if t.Type == 0 {
		t.Type = SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_EsType_none
	}
	t.DfElection.PopulateDefaults()
	t.Routes.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection struct {
	Algorithm                        *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm                        `path:"algorithm" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	InterfaceStandbySignalingOnNonDf *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf `path:"interface-standby-signaling-on-non-df" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments" yangPresence:"true"`
	Timers                           *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers                           `path:"timers" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) IsYANGGoStruct() {
}

// GetOrCreateAlgorithm retrieves the value of the Algorithm field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) GetOrCreateAlgorithm() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm {
	if t.Algorithm != nil {
		return t.Algorithm
	}
	t.Algorithm = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm{}
	return t.Algorithm
}

// GetOrCreateInterfaceStandbySignalingOnNonDf retrieves the value of the InterfaceStandbySignalingOnNonDf field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) GetOrCreateInterfaceStandbySignalingOnNonDf() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf {
	if t.InterfaceStandbySignalingOnNonDf != nil {
		return t.InterfaceStandbySignalingOnNonDf
	}
	t.InterfaceStandbySignalingOnNonDf = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf{}
	return t.InterfaceStandbySignalingOnNonDf
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) GetOrCreateTimers() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers{}
	return t.Timers
}

// GetAlgorithm returns the value of the Algorithm struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection. If the receiver or the field Algorithm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) GetAlgorithm() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm {
	if t != nil && t.Algorithm != nil {
		return t.Algorithm
	}
	return nil
}

// GetInterfaceStandbySignalingOnNonDf returns the value of the InterfaceStandbySignalingOnNonDf struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection. If the receiver or the field InterfaceStandbySignalingOnNonDf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) GetInterfaceStandbySignalingOnNonDf() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf {
	if t != nil && t.InterfaceStandbySignalingOnNonDf != nil {
		return t.InterfaceStandbySignalingOnNonDf
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) GetTimers() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Algorithm.PopulateDefaults()
	t.InterfaceStandbySignalingOnNonDf.PopulateDefaults()
	t.Timers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/algorithm YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm struct {
	ManualAlg     *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg     `path:"manual-alg" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments" yangPresence:"true"`
	PreferenceAlg *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg `path:"preference-alg" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments" yangPresence:"true"`
	Type          E_SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_DfAlgorithmType                                                                `path:"type" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) IsYANGGoStruct() {
}

// GetOrCreateManualAlg retrieves the value of the ManualAlg field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) GetOrCreateManualAlg() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg {
	if t.ManualAlg != nil {
		return t.ManualAlg
	}
	t.ManualAlg = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg{}
	return t.ManualAlg
}

// GetOrCreatePreferenceAlg retrieves the value of the PreferenceAlg field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) GetOrCreatePreferenceAlg() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg {
	if t.PreferenceAlg != nil {
		return t.PreferenceAlg
	}
	t.PreferenceAlg = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg{}
	return t.PreferenceAlg
}

// GetManualAlg returns the value of the ManualAlg struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm. If the receiver or the field ManualAlg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) GetManualAlg() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg {
	if t != nil && t.ManualAlg != nil {
		return t.ManualAlg
	}
	return nil
}

// GetPreferenceAlg returns the value of the PreferenceAlg struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm. If the receiver or the field PreferenceAlg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) GetPreferenceAlg() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg {
	if t != nil && t.PreferenceAlg != nil {
		return t.PreferenceAlg
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) GetType() E_SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_DfAlgorithmType {
	if t == nil || t.Type == 0 {
		return SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_DfAlgorithmType_default
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = SrlNokiaSystemNetworkInstanceBgpEvpnEthernetSegments_DfAlgorithmType_default
	}
	t.ManualAlg.PopulateDefaults()
	t.PreferenceAlg.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/algorithm/manual-alg YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg struct {
	PrimaryEviRange map[uint32]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange `path:"primary-evi-range" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) IsYANGGoStruct() {
}

// NewPrimaryEviRange creates a new entry in the PrimaryEviRange list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) NewPrimaryEviRange(
	StartEvi uint32,
) (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrimaryEviRange == nil {
		t.PrimaryEviRange = make(map[uint32]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange)
	}

	key := StartEvi

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrimaryEviRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrimaryEviRange", key)
	}

	t.PrimaryEviRange[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange{
		StartEvi: &StartEvi,
	}

	return t.PrimaryEviRange[key], nil
}

// RenamePrimaryEviRange renames an entry in the list PrimaryEviRange within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) RenamePrimaryEviRange(oldK, newK uint32) error {
	if _, ok := t.PrimaryEviRange[newK]; ok {
		return fmt.Errorf("key %v already exists in PrimaryEviRange", newK)
	}

	e, ok := t.PrimaryEviRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrimaryEviRange", oldK)
	}
	e.StartEvi = &newK

	t.PrimaryEviRange[newK] = e
	delete(t.PrimaryEviRange, oldK)
	return nil
}

// GetOrCreatePrimaryEviRange retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) GetOrCreatePrimaryEviRange(
	StartEvi uint32,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange {
	key := StartEvi

	if v, ok := t.PrimaryEviRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrimaryEviRange(StartEvi)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrimaryEviRange got unexpected error: %v", err))
	}
	return v
}

// GetPrimaryEviRange retrieves the value with the specified key from
// the PrimaryEviRange map field of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) GetPrimaryEviRange(
	StartEvi uint32,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange {
	if t == nil {
		return nil
	}

	key := StartEvi

	if lm, ok := t.PrimaryEviRange[key]; ok {
		return lm
	}
	return nil
}

// DeletePrimaryEviRange deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) DeletePrimaryEviRange(StartEvi uint32) {
	key := StartEvi

	delete(t.PrimaryEviRange, key)
}

// AppendPrimaryEviRange appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange struct to the
// list PrimaryEviRange of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) AppendPrimaryEviRange(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange,
) error {
	if v.StartEvi == nil {
		return fmt.Errorf("invalid nil key received for StartEvi")
	}

	key := *v.StartEvi

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrimaryEviRange == nil {
		t.PrimaryEviRange = make(map[uint32]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange)
	}

	if _, ok := t.PrimaryEviRange[key]; ok {
		return fmt.Errorf("duplicate key for list PrimaryEviRange %v", key)
	}

	t.PrimaryEviRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PrimaryEviRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/algorithm/manual-alg/primary-evi-range YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange struct {
	EndEvi   *uint32 `path:"end-evi" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	StartEvi *uint32 `path:"start-evi" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) IsYANGGoStruct() {
}

// GetEndEvi retrieves the value of the leaf EndEvi from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndEvi is set, it can
// safely use t.GetEndEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndEvi == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) GetEndEvi() uint32 {
	if t == nil || t.EndEvi == nil {
		return 0
	}
	return *t.EndEvi
}

// GetStartEvi retrieves the value of the leaf StartEvi from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartEvi is set, it can
// safely use t.GetStartEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartEvi == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) GetStartEvi() uint32 {
	if t == nil || t.StartEvi == nil {
		return 0
	}
	return *t.StartEvi
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StartEvi == nil {
		return nil, fmt.Errorf("nil value for key StartEvi")
	}

	return map[string]interface{}{
		"start-evi": *t.StartEvi,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_ManualAlg_PrimaryEviRange) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/algorithm/preference-alg YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg struct {
	Capabilities    *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities `path:"capabilities" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	PreferenceValue *uint32                                                                                                                                            `path:"preference-value" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) IsYANGGoStruct() {
}

// GetOrCreateCapabilities retrieves the value of the Capabilities field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) GetOrCreateCapabilities() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities {
	if t.Capabilities != nil {
		return t.Capabilities
	}
	t.Capabilities = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities{}
	return t.Capabilities
}

// GetCapabilities returns the value of the Capabilities struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg. If the receiver or the field Capabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) GetCapabilities() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities {
	if t != nil && t.Capabilities != nil {
		return t.Capabilities
	}
	return nil
}

// GetPreferenceValue retrieves the value of the leaf PreferenceValue from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferenceValue is set, it can
// safely use t.GetPreferenceValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferenceValue == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) GetPreferenceValue() uint32 {
	if t == nil || t.PreferenceValue == nil {
		return 32767
	}
	return *t.PreferenceValue
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferenceValue == nil {
		var v uint32 = 32767
		t.PreferenceValue = &v
	}
	t.Capabilities.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/algorithm/preference-alg/capabilities YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities struct {
	AcDf         E_SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities_AcDf `path:"ac-df" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	NonRevertive *bool                                                                                                                                                    `path:"non-revertive" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) IsYANGGoStruct() {
}

// GetAcDf retrieves the value of the leaf AcDf from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcDf is set, it can
// safely use t.GetAcDf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcDf == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) GetAcDf() E_SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities_AcDf {
	if t == nil || t.AcDf == 0 {
		return SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities_AcDf_include
	}
	return t.AcDf
}

// GetNonRevertive retrieves the value of the leaf NonRevertive from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonRevertive is set, it can
// safely use t.GetNonRevertive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonRevertive == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) GetNonRevertive() bool {
	if t == nil || t.NonRevertive == nil {
		return false
	}
	return *t.NonRevertive
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcDf == 0 {
		t.AcDf = SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities_AcDf_include
	}
	if t.NonRevertive == nil {
		var v bool = false
		t.NonRevertive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Algorithm_PreferenceAlg_Capabilities) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/interface-standby-signaling-on-non-df YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_InterfaceStandbySignalingOnNonDf) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/df-election/timers YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers struct {
	ActivationTimer *uint32 `path:"activation-timer" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) IsYANGGoStruct() {
}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) GetActivationTimer() uint32 {
	if t == nil || t.ActivationTimer == nil {
		return 0
	}
	return *t.ActivationTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_DfElection_Timers) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/interface YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface struct {
	EthernetInterface *string `path:"ethernet-interface" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) IsYANGGoStruct() {
}

// GetEthernetInterface retrieves the value of the leaf EthernetInterface from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetInterface is set, it can
// safely use t.GetEthernetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetInterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) GetEthernetInterface() string {
	if t == nil || t.EthernetInterface == nil {
		return ""
	}
	return *t.EthernetInterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EthernetInterface == nil {
		return nil, fmt.Errorf("nil value for key EthernetInterface")
	}

	return map[string]interface{}{
		"ethernet-interface": *t.EthernetInterface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Interface) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/next-hop YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop struct {
	Evi       map[uint32]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi `path:"evi" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	L3NextHop *string                                                                                                                   `path:"l3-next-hop" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) IsYANGGoStruct() {
}

// NewEvi creates a new entry in the Evi list of the
// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) NewEvi(
	Start uint32,
) (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evi == nil {
		t.Evi = make(map[uint32]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Evi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Evi", key)
	}

	t.Evi[key] = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi{
		Start: &Start,
	}

	return t.Evi[key], nil
}

// RenameEvi renames an entry in the list Evi within
// the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) RenameEvi(oldK, newK uint32) error {
	if _, ok := t.Evi[newK]; ok {
		return fmt.Errorf("key %v already exists in Evi", newK)
	}

	e, ok := t.Evi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Evi", oldK)
	}
	e.Start = &newK

	t.Evi[newK] = e
	delete(t.Evi, oldK)
	return nil
}

// GetOrCreateEvi retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) GetOrCreateEvi(
	Start uint32,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi {
	key := Start

	if v, ok := t.Evi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvi(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvi got unexpected error: %v", err))
	}
	return v
}

// GetEvi retrieves the value with the specified key from
// the Evi map field of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) GetEvi(
	Start uint32,
) *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi {
	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Evi[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvi deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) DeleteEvi(Start uint32) {
	key := Start

	delete(t.Evi, key)
}

// AppendEvi appends the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi struct to the
// list Evi of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) AppendEvi(
	v *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key received for Start")
	}

	key := *v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evi == nil {
		t.Evi = make(map[uint32]*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi)
	}

	if _, ok := t.Evi[key]; ok {
		return fmt.Errorf("duplicate key for list Evi %v", key)
	}

	t.Evi[key] = v
	return nil
}

// GetL3NextHop retrieves the value of the leaf L3NextHop from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L3NextHop is set, it can
// safely use t.GetL3NextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L3NextHop == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) GetL3NextHop() string {
	if t == nil || t.L3NextHop == nil {
		return ""
	}
	return *t.L3NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Evi {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.L3NextHop == nil {
		return nil, fmt.Errorf("nil value for key L3NextHop")
	}

	return map[string]interface{}{
		"l3-next-hop": *t.L3NextHop,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/next-hop/evi YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi struct {
	Start *uint32 `path:"start" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) IsYANGGoStruct() {
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_NextHop_Evi) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/routes YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes struct {
	EthernetSegment *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment `path:"ethernet-segment" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	NextHop         E_SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_NextHop        `path:"next-hop" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) IsYANGGoStruct() {
}

// GetOrCreateEthernetSegment retrieves the value of the EthernetSegment field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) GetOrCreateEthernetSegment() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment {
	if t.EthernetSegment != nil {
		return t.EthernetSegment
	}
	t.EthernetSegment = &SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment{}
	return t.EthernetSegment
}

// GetEthernetSegment returns the value of the EthernetSegment struct pointer
// from SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes. If the receiver or the field EthernetSegment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) GetEthernetSegment() *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment {
	if t != nil && t.EthernetSegment != nil {
		return t.EthernetSegment
	}
	return nil
}

// GetNextHop retrieves the value of the leaf NextHop from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) GetNextHop() E_SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_NextHop {
	if t == nil || t.NextHop == 0 {
		return SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_NextHop_use_system_ipv4_address
	}
	return t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHop == 0 {
		t.NextHop = SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_NextHop_use_system_ipv4_address
	}
	t.EthernetSegment.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/bgp-instance/ethernet-segment/routes/ethernet-segment YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment struct {
	OriginatingIp E_SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment_OriginatingIp `path:"originating-ip" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) IsYANGGoStruct() {
}

// GetOriginatingIp retrieves the value of the leaf OriginatingIp from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatingIp is set, it can
// safely use t.GetOriginatingIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatingIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) GetOriginatingIp() E_SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment_OriginatingIp {
	if t == nil || t.OriginatingIp == 0 {
		return SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment_OriginatingIp_use_system_ipv4_address
	}
	return t.OriginatingIp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OriginatingIp == 0 {
		t.OriginatingIp = SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment_OriginatingIp_use_system_ipv4_address
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_BgpInstance_EthernetSegment_Routes_EthernetSegment) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers represents the /srl_nokia-system/system/network-instance/protocols/evpn/ethernet-segments/timers YANG schema element.
type SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers struct {
	ActivationTimer *uint32 `path:"activation-timer" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
	BootTimer       *uint32 `path:"boot-timer" module:"srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) IsYANGGoStruct() {
}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) GetActivationTimer() uint32 {
	if t == nil || t.ActivationTimer == nil {
		return 3
	}
	return *t.ActivationTimer
}

// GetBootTimer retrieves the value of the leaf BootTimer from the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) GetBootTimer() uint32 {
	if t == nil || t.BootTimer == nil {
		return 10
	}
	return *t.BootTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActivationTimer == nil {
		var v uint32 = 3
		t.ActivationTimer = &v
	}
	if t.BootTimer == nil {
		var v uint32 = 10
		t.BootTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers.
func (*SrlNokiaSystem_System_NetworkInstance_Protocols_Evpn_EthernetSegments_Timers) ΛBelongingModule() string {
	return "srl_nokia-system-network-instance-bgp-evpn-ethernet-segments"
}

// SrlNokiaSystem_System_Ntp represents the /srl_nokia-system/system/ntp YANG schema element.
type SrlNokiaSystem_System_Ntp struct {
	AdminState      E_SrlNokiaCommon_AdminState                  `path:"admin-state" module:"srl_nokia-ntp"`
	NetworkInstance *string                                      `path:"network-instance" module:"srl_nokia-ntp"`
	Server          map[string]*SrlNokiaSystem_System_Ntp_Server `path:"server" module:"srl_nokia-ntp"`
	SourceAddress   *string                                      `path:"source-address" module:"srl_nokia-ntp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Ntp) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// SrlNokiaSystem_System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Ntp) NewServer(Address string) (*SrlNokiaSystem_System_Ntp_Server, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*SrlNokiaSystem_System_Ntp_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &SrlNokiaSystem_System_Ntp_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the SrlNokiaSystem_System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Ntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Ntp) GetOrCreateServer(Address string) *SrlNokiaSystem_System_Ntp_Server {
	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of SrlNokiaSystem_System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Ntp) GetServer(Address string) *SrlNokiaSystem_System_Ntp_Server {
	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Ntp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Ntp) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied SrlNokiaSystem_System_Ntp_Server struct to the
// list Server of SrlNokiaSystem_System_Ntp. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Ntp_Server already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Ntp) AppendServer(v *SrlNokiaSystem_System_Ntp_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*SrlNokiaSystem_System_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Ntp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaSystem_System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Ntp) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaSystem_System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Ntp) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Ntp.
func (*SrlNokiaSystem_System_Ntp) ΛBelongingModule() string {
	return "srl_nokia-ntp"
}

// SrlNokiaSystem_System_Ntp_Server represents the /srl_nokia-system/system/ntp/server YANG schema element.
type SrlNokiaSystem_System_Ntp_Server struct {
	Address *string `path:"address" module:"srl_nokia-ntp"`
	Iburst  *bool   `path:"iburst" module:"srl_nokia-ntp"`
	Prefer  *bool   `path:"prefer" module:"srl_nokia-ntp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Ntp_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaSystem_System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Ntp_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIburst retrieves the value of the leaf Iburst from the SrlNokiaSystem_System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iburst is set, it can
// safely use t.GetIburst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iburst == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Ntp_Server) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetPrefer retrieves the value of the leaf Prefer from the SrlNokiaSystem_System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Iburst == nil {
		var v bool = false
		t.Iburst = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Ntp_Server struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Ntp_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Ntp_Server.
func (*SrlNokiaSystem_System_Ntp_Server) ΛBelongingModule() string {
	return "srl_nokia-ntp"
}

// SrlNokiaSystem_System_P4RtServer represents the /srl_nokia-system/system/p4rt-server YANG schema element.
type SrlNokiaSystem_System_P4RtServer struct {
	AdminState      E_SrlNokiaCommon_AdminState                                  `path:"admin-state" module:"srl_nokia-p4rt-server"`
	NetworkInstance map[string]*SrlNokiaSystem_System_P4RtServer_NetworkInstance `path:"network-instance" module:"srl_nokia-p4rt-server"`
	RateLimit       *uint16                                                      `path:"rate-limit" module:"srl_nokia-p4rt-server"`
	SessionLimit    *uint16                                                      `path:"session-limit" module:"srl_nokia-p4rt-server"`
	Timeout         *uint16                                                      `path:"timeout" module:"srl_nokia-p4rt-server"`
	TraceOptions    []E_SrlNokiaSystem_System_P4RtServer_TraceOptions            `path:"trace-options" module:"srl_nokia-p4rt-server"`
	UnixSocket      *SrlNokiaSystem_System_P4RtServer_UnixSocket                 `path:"unix-socket" module:"srl_nokia-p4rt-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_P4RtServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_P4RtServer) IsYANGGoStruct() {}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// SrlNokiaSystem_System_P4RtServer struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_P4RtServer) NewNetworkInstance(Name string) (*SrlNokiaSystem_System_P4RtServer_NetworkInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*SrlNokiaSystem_System_P4RtServer_NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &SrlNokiaSystem_System_P4RtServer_NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// RenameNetworkInstance renames an entry in the list NetworkInstance within
// the SrlNokiaSystem_System_P4RtServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_P4RtServer) RenameNetworkInstance(oldK, newK string) error {
	if _, ok := t.NetworkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInstance", newK)
	}

	e, ok := t.NetworkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInstance", oldK)
	}
	e.Name = &newK

	t.NetworkInstance[newK] = e
	delete(t.NetworkInstance, oldK)
	return nil
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_P4RtServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_P4RtServer) GetOrCreateNetworkInstance(Name string) *SrlNokiaSystem_System_P4RtServer_NetworkInstance {
	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of SrlNokiaSystem_System_P4RtServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_P4RtServer) GetNetworkInstance(Name string) *SrlNokiaSystem_System_P4RtServer_NetworkInstance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_P4RtServer. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_P4RtServer) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied SrlNokiaSystem_System_P4RtServer_NetworkInstance struct to the
// list NetworkInstance of SrlNokiaSystem_System_P4RtServer. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_P4RtServer_NetworkInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_P4RtServer) AppendNetworkInstance(
	v *SrlNokiaSystem_System_P4RtServer_NetworkInstance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*SrlNokiaSystem_System_P4RtServer_NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// GetOrCreateUnixSocket retrieves the value of the UnixSocket field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_P4RtServer) GetOrCreateUnixSocket() *SrlNokiaSystem_System_P4RtServer_UnixSocket {
	if t.UnixSocket != nil {
		return t.UnixSocket
	}
	t.UnixSocket = &SrlNokiaSystem_System_P4RtServer_UnixSocket{}
	return t.UnixSocket
}

// GetUnixSocket returns the value of the UnixSocket struct pointer
// from SrlNokiaSystem_System_P4RtServer. If the receiver or the field UnixSocket is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_P4RtServer) GetUnixSocket() *SrlNokiaSystem_System_P4RtServer_UnixSocket {
	if t != nil && t.UnixSocket != nil {
		return t.UnixSocket
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_P4RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetRateLimit retrieves the value of the leaf RateLimit from the SrlNokiaSystem_System_P4RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 60
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the SrlNokiaSystem_System_P4RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 20
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaSystem_System_P4RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 7200
	}
	return *t.Timeout
}

// GetTraceOptions retrieves the value of the leaf TraceOptions from the SrlNokiaSystem_System_P4RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TraceOptions is set, it can
// safely use t.GetTraceOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TraceOptions == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer) GetTraceOptions() []E_SrlNokiaSystem_System_P4RtServer_TraceOptions {
	if t == nil || t.TraceOptions == nil {
		return nil
	}
	return t.TraceOptions
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_P4RtServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_P4RtServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.RateLimit == nil {
		var v uint16 = 60
		t.RateLimit = &v
	}
	if t.SessionLimit == nil {
		var v uint16 = 20
		t.SessionLimit = &v
	}
	if t.Timeout == nil {
		var v uint16 = 7200
		t.Timeout = &v
	}
	t.UnixSocket.PopulateDefaults()
	for _, e := range t.NetworkInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_P4RtServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_P4RtServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_P4RtServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_P4RtServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_P4RtServer.
func (*SrlNokiaSystem_System_P4RtServer) ΛBelongingModule() string {
	return "srl_nokia-p4rt-server"
}

// SrlNokiaSystem_System_P4RtServer_NetworkInstance represents the /srl_nokia-system/system/p4rt-server/network-instance YANG schema element.
type SrlNokiaSystem_System_P4RtServer_NetworkInstance struct {
	AdminState        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-p4rt-server"`
	Name              *string                     `path:"name" module:"srl_nokia-p4rt-server"`
	Port              *uint16                     `path:"port" module:"srl_nokia-p4rt-server"`
	SourceAddress     []string                    `path:"source-address" module:"srl_nokia-p4rt-server"`
	TlsProfile        *string                     `path:"tls-profile" module:"srl_nokia-p4rt-server"`
	UseAuthentication *bool                       `path:"use-authentication" module:"srl_nokia-p4rt-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_P4RtServer_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_P4RtServer_NetworkInstance) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPort retrieves the value of the leaf Port from the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 9559
	}
	return *t.Port
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) GetSourceAddress() []string {
	if t == nil || t.SourceAddress == nil {
		return nil
	}
	return t.SourceAddress
}

// GetTlsProfile retrieves the value of the leaf TlsProfile from the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsProfile is set, it can
// safely use t.GetTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) GetTlsProfile() string {
	if t == nil || t.TlsProfile == nil {
		return ""
	}
	return *t.TlsProfile
}

// GetUseAuthentication retrieves the value of the leaf UseAuthentication from the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseAuthentication is set, it can
// safely use t.GetUseAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseAuthentication == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) GetUseAuthentication() bool {
	if t == nil || t.UseAuthentication == nil {
		return true
	}
	return *t.UseAuthentication
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_P4RtServer_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.Port == nil {
		var v uint16 = 9559
		t.Port = &v
	}
	if t.UseAuthentication == nil {
		var v bool = true
		t.UseAuthentication = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_P4RtServer_NetworkInstance struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_P4RtServer_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_P4RtServer_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_P4RtServer_NetworkInstance.
func (*SrlNokiaSystem_System_P4RtServer_NetworkInstance) ΛBelongingModule() string {
	return "srl_nokia-p4rt-server"
}

// SrlNokiaSystem_System_P4RtServer_UnixSocket represents the /srl_nokia-system/system/p4rt-server/unix-socket YANG schema element.
type SrlNokiaSystem_System_P4RtServer_UnixSocket struct {
	AdminState        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-p4rt-server"`
	TlsProfile        *string                     `path:"tls-profile" module:"srl_nokia-p4rt-server"`
	UseAuthentication *bool                       `path:"use-authentication" module:"srl_nokia-p4rt-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_P4RtServer_UnixSocket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_P4RtServer_UnixSocket) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_P4RtServer_UnixSocket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetTlsProfile retrieves the value of the leaf TlsProfile from the SrlNokiaSystem_System_P4RtServer_UnixSocket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsProfile is set, it can
// safely use t.GetTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) GetTlsProfile() string {
	if t == nil || t.TlsProfile == nil {
		return ""
	}
	return *t.TlsProfile
}

// GetUseAuthentication retrieves the value of the leaf UseAuthentication from the SrlNokiaSystem_System_P4RtServer_UnixSocket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseAuthentication is set, it can
// safely use t.GetUseAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseAuthentication == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) GetUseAuthentication() bool {
	if t == nil || t.UseAuthentication == nil {
		return true
	}
	return *t.UseAuthentication
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_P4RtServer_UnixSocket
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.UseAuthentication == nil {
		var v bool = true
		t.UseAuthentication = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_P4RtServer_UnixSocket"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_P4RtServer_UnixSocket) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_P4RtServer_UnixSocket.
func (*SrlNokiaSystem_System_P4RtServer_UnixSocket) ΛBelongingModule() string {
	return "srl_nokia-p4rt-server"
}

// SrlNokiaSystem_System_PacketLinkQualification represents the /srl_nokia-system/system/packet-link-qualification YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification struct {
	Profile map[string]*SrlNokiaSystem_System_PacketLinkQualification_Profile `path:"profile" module:"srl_nokia-packet-link-qual"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification) IsYANGGoStruct() {}

// NewProfile creates a new entry in the Profile list of the
// SrlNokiaSystem_System_PacketLinkQualification struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_PacketLinkQualification) NewProfile(Name string) (*SrlNokiaSystem_System_PacketLinkQualification_Profile, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*SrlNokiaSystem_System_PacketLinkQualification_Profile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &SrlNokiaSystem_System_PacketLinkQualification_Profile{
		Name: &Name,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the SrlNokiaSystem_System_PacketLinkQualification struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_PacketLinkQualification) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.Name = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_PacketLinkQualification. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_PacketLinkQualification) GetOrCreateProfile(Name string) *SrlNokiaSystem_System_PacketLinkQualification_Profile {
	key := Name

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of SrlNokiaSystem_System_PacketLinkQualification. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_PacketLinkQualification) GetProfile(Name string) *SrlNokiaSystem_System_PacketLinkQualification_Profile {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_PacketLinkQualification. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_PacketLinkQualification) DeleteProfile(Name string) {
	key := Name

	delete(t.Profile, key)
}

// AppendProfile appends the supplied SrlNokiaSystem_System_PacketLinkQualification_Profile struct to the
// list Profile of SrlNokiaSystem_System_PacketLinkQualification. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_PacketLinkQualification_Profile already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_PacketLinkQualification) AppendProfile(
	v *SrlNokiaSystem_System_PacketLinkQualification_Profile,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*SrlNokiaSystem_System_PacketLinkQualification_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification.
func (*SrlNokiaSystem_System_PacketLinkQualification) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_PacketLinkQualification_Profile represents the /srl_nokia-system/system/packet-link-qualification/profile YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification_Profile struct {
	AsicLoopback    *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback    `path:"asic-loopback" module:"srl_nokia-packet-link-qual" yangPresence:"true"`
	Name            *string                                                                `path:"name" module:"srl_nokia-packet-link-qual"`
	Ntp             *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp             `path:"ntp" module:"srl_nokia-packet-link-qual"`
	PacketGenerator *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator `path:"packet-generator" module:"srl_nokia-packet-link-qual"`
	PmdLoopback     *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback     `path:"pmd-loopback" module:"srl_nokia-packet-link-qual" yangPresence:"true"`
	Rpc             *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc             `path:"rpc" module:"srl_nokia-packet-link-qual"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile) IsYANGGoStruct() {}

// GetOrCreateAsicLoopback retrieves the value of the AsicLoopback field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetOrCreateAsicLoopback() *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback {
	if t.AsicLoopback != nil {
		return t.AsicLoopback
	}
	t.AsicLoopback = &SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback{}
	return t.AsicLoopback
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetOrCreateNtp() *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp{}
	return t.Ntp
}

// GetOrCreatePacketGenerator retrieves the value of the PacketGenerator field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetOrCreatePacketGenerator() *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator {
	if t.PacketGenerator != nil {
		return t.PacketGenerator
	}
	t.PacketGenerator = &SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator{}
	return t.PacketGenerator
}

// GetOrCreatePmdLoopback retrieves the value of the PmdLoopback field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetOrCreatePmdLoopback() *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback {
	if t.PmdLoopback != nil {
		return t.PmdLoopback
	}
	t.PmdLoopback = &SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback{}
	return t.PmdLoopback
}

// GetOrCreateRpc retrieves the value of the Rpc field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetOrCreateRpc() *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc {
	if t.Rpc != nil {
		return t.Rpc
	}
	t.Rpc = &SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc{}
	return t.Rpc
}

// GetAsicLoopback returns the value of the AsicLoopback struct pointer
// from SrlNokiaSystem_System_PacketLinkQualification_Profile. If the receiver or the field AsicLoopback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetAsicLoopback() *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback {
	if t != nil && t.AsicLoopback != nil {
		return t.AsicLoopback
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from SrlNokiaSystem_System_PacketLinkQualification_Profile. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetNtp() *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetPacketGenerator returns the value of the PacketGenerator struct pointer
// from SrlNokiaSystem_System_PacketLinkQualification_Profile. If the receiver or the field PacketGenerator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetPacketGenerator() *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator {
	if t != nil && t.PacketGenerator != nil {
		return t.PacketGenerator
	}
	return nil
}

// GetPmdLoopback returns the value of the PmdLoopback struct pointer
// from SrlNokiaSystem_System_PacketLinkQualification_Profile. If the receiver or the field PmdLoopback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetPmdLoopback() *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback {
	if t != nil && t.PmdLoopback != nil {
		return t.PmdLoopback
	}
	return nil
}

// GetRpc returns the value of the Rpc struct pointer
// from SrlNokiaSystem_System_PacketLinkQualification_Profile. If the receiver or the field Rpc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetRpc() *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc {
	if t != nil && t.Rpc != nil {
		return t.Rpc
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_PacketLinkQualification_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsicLoopback.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.PacketGenerator.PopulateDefaults()
	t.PmdLoopback.PopulateDefaults()
	t.Rpc.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_PacketLinkQualification_Profile struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification_Profile.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback represents the /srl_nokia-system/system/packet-link-qualification/profile/asic-loopback YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_AsicLoopback) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp represents the /srl_nokia-system/system/packet-link-qualification/profile/ntp YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp struct {
	EndTime      *string `path:"end-time" module:"srl_nokia-packet-link-qual"`
	StartTime    *string `path:"start-time" module:"srl_nokia-packet-link-qual"`
	TeardownTime *string `path:"teardown-time" module:"srl_nokia-packet-link-qual"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) IsYANGGoStruct() {}

// GetEndTime retrieves the value of the leaf EndTime from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTime is set, it can
// safely use t.GetEndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) GetEndTime() string {
	if t == nil || t.EndTime == nil {
		return ""
	}
	return *t.EndTime
}

// GetStartTime retrieves the value of the leaf StartTime from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) GetStartTime() string {
	if t == nil || t.StartTime == nil {
		return ""
	}
	return *t.StartTime
}

// GetTeardownTime retrieves the value of the leaf TeardownTime from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeardownTime is set, it can
// safely use t.GetTeardownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeardownTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) GetTeardownTime() string {
	if t == nil || t.TeardownTime == nil {
		return ""
	}
	return *t.TeardownTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_Ntp) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator represents the /srl_nokia-system/system/packet-link-qualification/profile/packet-generator YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator struct {
	PacketRate *uint32 `path:"packet-rate" module:"srl_nokia-packet-link-qual"`
	PacketSize *uint32 `path:"packet-size" module:"srl_nokia-packet-link-qual"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) IsYANGGoStruct() {}

// GetPacketRate retrieves the value of the leaf PacketRate from the SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketRate is set, it can
// safely use t.GetPacketRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) GetPacketRate() uint32 {
	if t == nil || t.PacketRate == nil {
		return 0
	}
	return *t.PacketRate
}

// GetPacketSize retrieves the value of the leaf PacketSize from the SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketSize is set, it can
// safely use t.GetPacketSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) GetPacketSize() uint32 {
	if t == nil || t.PacketSize == nil {
		return 0
	}
	return *t.PacketSize
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_PacketGenerator) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback represents the /srl_nokia-system/system/packet-link-qualification/profile/pmd-loopback YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_PmdLoopback) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc represents the /srl_nokia-system/system/packet-link-qualification/profile/rpc YANG schema element.
type SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc struct {
	Duration         *uint32 `path:"duration" module:"srl_nokia-packet-link-qual"`
	PostSyncDuration *uint32 `path:"post-sync-duration" module:"srl_nokia-packet-link-qual"`
	PreSyncDuration  *uint32 `path:"pre-sync-duration" module:"srl_nokia-packet-link-qual"`
	SetupDuration    *uint32 `path:"setup-duration" module:"srl_nokia-packet-link-qual"`
	TeardownDuration *uint32 `path:"teardown-duration" module:"srl_nokia-packet-link-qual"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) IsYANGGoStruct() {}

// GetDuration retrieves the value of the leaf Duration from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetPostSyncDuration retrieves the value of the leaf PostSyncDuration from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostSyncDuration is set, it can
// safely use t.GetPostSyncDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostSyncDuration == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) GetPostSyncDuration() uint32 {
	if t == nil || t.PostSyncDuration == nil {
		return 0
	}
	return *t.PostSyncDuration
}

// GetPreSyncDuration retrieves the value of the leaf PreSyncDuration from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSyncDuration is set, it can
// safely use t.GetPreSyncDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSyncDuration == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) GetPreSyncDuration() uint32 {
	if t == nil || t.PreSyncDuration == nil {
		return 0
	}
	return *t.PreSyncDuration
}

// GetSetupDuration retrieves the value of the leaf SetupDuration from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetupDuration is set, it can
// safely use t.GetSetupDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetupDuration == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) GetSetupDuration() uint32 {
	if t == nil || t.SetupDuration == nil {
		return 0
	}
	return *t.SetupDuration
}

// GetTeardownDuration retrieves the value of the leaf TeardownDuration from the SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeardownDuration is set, it can
// safely use t.GetTeardownDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeardownDuration == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) GetTeardownDuration() uint32 {
	if t == nil || t.TeardownDuration == nil {
		return 0
	}
	return *t.TeardownDuration
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc.
func (*SrlNokiaSystem_System_PacketLinkQualification_Profile_Rpc) ΛBelongingModule() string {
	return "srl_nokia-packet-link-qual"
}

// SrlNokiaSystem_System_Protocols represents the /srl_nokia-system/system/protocols YANG schema element.
type SrlNokiaSystem_System_Protocols struct {
	Bgp *SrlNokiaSystem_System_Protocols_Bgp `path:"bgp" module:"srl_nokia-bgp" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Protocols) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Protocols) GetOrCreateBgp() *SrlNokiaSystem_System_Protocols_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaSystem_System_Protocols_Bgp{}
	return t.Bgp
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaSystem_System_Protocols. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Protocols) GetBgp() *SrlNokiaSystem_System_Protocols_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Protocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Protocols.
func (*SrlNokiaSystem_System_Protocols) ΛBelongingModule() string {
	return "srl_nokia-system-protocols"
}

// SrlNokiaSystem_System_Protocols_Bgp represents the /srl_nokia-system/system/protocols/bgp YANG schema element.
type SrlNokiaSystem_System_Protocols_Bgp struct {
	RestartMaxWait *uint16 `path:"restart-max-wait" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Protocols_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Protocols_Bgp) IsYANGGoStruct() {}

// GetRestartMaxWait retrieves the value of the leaf RestartMaxWait from the SrlNokiaSystem_System_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartMaxWait is set, it can
// safely use t.GetRestartMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartMaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Protocols_Bgp) GetRestartMaxWait() uint16 {
	if t == nil || t.RestartMaxWait == nil {
		return 600
	}
	return *t.RestartMaxWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Protocols_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Protocols_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RestartMaxWait == nil {
		var v uint16 = 600
		t.RestartMaxWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Protocols_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Protocols_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Protocols_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Protocols_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Protocols_Bgp.
func (*SrlNokiaSystem_System_Protocols_Bgp) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}
