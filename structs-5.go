/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp represents the /srl_nokia-network-instance/network-instance/protocols/bgp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct {
	AdminState                        E_SrlNokiaCommon_AdminState                                                                          `path:"admin-state" module:"srl_nokia-bgp"`
	AfiSafi                           map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi `path:"afi-safi" module:"srl_nokia-bgp"`
	AsPathOptions                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions                                 `path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication                    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication                                `path:"authentication" module:"srl_nokia-bgp"`
	AutonomousSystem                  *uint32                                                                                              `path:"autonomous-system" module:"srl_nokia-bgp"`
	BestPathSelection                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection                             `path:"best-path-selection" module:"srl_nokia-bgp"`
	BgpLabel                          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel                                      `path:"bgp-label" module:"srl_nokia-bgp"`
	Convergence                       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence                                   `path:"convergence" module:"srl_nokia-bgp"`
	DynamicNeighbors                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors                              `path:"dynamic-neighbors" module:"srl_nokia-bgp"`
	EbgpDefaultPolicy                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy                             `path:"ebgp-default-policy" module:"srl_nokia-bgp"`
	ExportPolicy                      *string                                                                                              `path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection                              `path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart                               `path:"graceful-restart" module:"srl_nokia-bgp"`
	Group                             map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group                              `path:"group" module:"srl_nokia-bgp"`
	ImportPolicy                      *string                                                                                              `path:"import-policy" module:"srl_nokia-bgp"`
	LocalPreference                   *uint32                                                                                              `path:"local-preference" module:"srl_nokia-bgp"`
	MaxEcmpHashBucketsPerNextHopGroup *uint8                                                                                               `path:"max-ecmp-hash-buckets-per-next-hop-group" module:"srl_nokia-bgp"`
	Neighbor                          map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor                           `path:"neighbor" module:"srl_nokia-bgp"`
	Preference                        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference                                    `path:"preference" module:"srl_nokia-bgp"`
	RibManagement                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement                                 `path:"rib-management" module:"srl_nokia-bgp"`
	RouteAdvertisement                *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement                            `path:"route-advertisement" module:"srl_nokia-bgp"`
	RouteReflector                    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector                                `path:"route-reflector" module:"srl_nokia-bgp"`
	RouterId                          *string                                                                                              `path:"router-id" module:"srl_nokia-bgp"`
	SendCommunity                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity                                 `path:"send-community" module:"srl_nokia-bgp"`
	SendCommunityType                 []E_SrlNokiaBgp_CommunityType                                                                        `path:"send-community-type" module:"srl_nokia-bgp"`
	TraceOptions                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions                                  `path:"trace-options" module:"srl_nokia-bgp"`
	Transport                         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport                                     `path:"transport" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// RenameAfiSafi renames an entry in the list AfiSafi within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) RenameAfiSafi(oldK, newK E_SrlNokiaCommon_BgpAddressFamily) error {
	if _, ok := t.AfiSafi[newK]; ok {
		return fmt.Errorf("key %v already exists in AfiSafi", newK)
	}

	e, ok := t.AfiSafi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AfiSafi", oldK)
	}
	e.AfiSafiName = newK

	t.AfiSafi[newK] = e
	delete(t.AfiSafi, oldK)
	return nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi {
	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi {
	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) DeleteAfiSafi(AfiSafiName E_SrlNokiaCommon_BgpAddressFamily) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi struct to the
// list AfiSafi of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) AppendAfiSafi(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi,
) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewGroup(GroupName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateGroup(GroupName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group {
	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetGroup(GroupName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group {
	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group,
) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewNeighbor(PeerAddress string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor)
	}

	key := PeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor{
		PeerAddress: &PeerAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.PeerAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateNeighbor(
	PeerAddress string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor {
	key := PeerAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(PeerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetNeighbor(PeerAddress string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor {
	if t == nil {
		return nil
	}

	key := PeerAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) DeleteNeighbor(PeerAddress string) {
	key := PeerAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct to the
// list Neighbor of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) AppendNeighbor(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor,
) error {
	if v.PeerAddress == nil {
		return fmt.Errorf("invalid nil key received for PeerAddress")
	}

	key := *v.PeerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication{}
	return t.Authentication
}

// GetOrCreateBestPathSelection retrieves the value of the BestPathSelection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateBestPathSelection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection {
	if t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	t.BestPathSelection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection{}
	return t.BestPathSelection
}

// GetOrCreateBgpLabel retrieves the value of the BgpLabel field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateBgpLabel() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel {
	if t.BgpLabel != nil {
		return t.BgpLabel
	}
	t.BgpLabel = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel{}
	return t.BgpLabel
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence{}
	return t.Convergence
}

// GetOrCreateDynamicNeighbors retrieves the value of the DynamicNeighbors field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateDynamicNeighbors() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors {
	if t.DynamicNeighbors != nil {
		return t.DynamicNeighbors
	}
	t.DynamicNeighbors = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors{}
	return t.DynamicNeighbors
}

// GetOrCreateEbgpDefaultPolicy retrieves the value of the EbgpDefaultPolicy field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateEbgpDefaultPolicy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy {
	if t.EbgpDefaultPolicy != nil {
		return t.EbgpDefaultPolicy
	}
	t.EbgpDefaultPolicy = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy{}
	return t.EbgpDefaultPolicy
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreatePreference retrieves the value of the Preference field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreatePreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference {
	if t.Preference != nil {
		return t.Preference
	}
	t.Preference = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference{}
	return t.Preference
}

// GetOrCreateRibManagement retrieves the value of the RibManagement field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateRibManagement() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement {
	if t.RibManagement != nil {
		return t.RibManagement
	}
	t.RibManagement = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement{}
	return t.RibManagement
}

// GetOrCreateRouteAdvertisement retrieves the value of the RouteAdvertisement field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateRouteAdvertisement() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement {
	if t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	t.RouteAdvertisement = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement{}
	return t.RouteAdvertisement
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateSendCommunity retrieves the value of the SendCommunity field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity {
	if t.SendCommunity != nil {
		return t.SendCommunity
	}
	t.SendCommunity = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity{}
	return t.SendCommunity
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport{}
	return t.Transport
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBestPathSelection returns the value of the BestPathSelection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field BestPathSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetBestPathSelection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection {
	if t != nil && t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	return nil
}

// GetBgpLabel returns the value of the BgpLabel struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field BgpLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetBgpLabel() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel {
	if t != nil && t.BgpLabel != nil {
		return t.BgpLabel
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetDynamicNeighbors returns the value of the DynamicNeighbors struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field DynamicNeighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetDynamicNeighbors() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors {
	if t != nil && t.DynamicNeighbors != nil {
		return t.DynamicNeighbors
	}
	return nil
}

// GetEbgpDefaultPolicy returns the value of the EbgpDefaultPolicy struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field EbgpDefaultPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetEbgpDefaultPolicy() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy {
	if t != nil && t.EbgpDefaultPolicy != nil {
		return t.EbgpDefaultPolicy
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetPreference returns the value of the Preference struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Preference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetPreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference {
	if t != nil && t.Preference != nil {
		return t.Preference
	}
	return nil
}

// GetRibManagement returns the value of the RibManagement struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field RibManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRibManagement() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RibManagement {
	if t != nil && t.RibManagement != nil {
		return t.RibManagement
	}
	return nil
}

// GetRouteAdvertisement returns the value of the RouteAdvertisement struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field RouteAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRouteAdvertisement() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement {
	if t != nil && t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetSendCommunity returns the value of the SendCommunity struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field SendCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity {
	if t != nil && t.SendCommunity != nil {
		return t.SendCommunity
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAutonomousSystem retrieves the value of the leaf AutonomousSystem from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystem is set, it can
// safely use t.GetAutonomousSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystem == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetAutonomousSystem() uint32 {
	if t == nil || t.AutonomousSystem == nil {
		return 0
	}
	return *t.AutonomousSystem
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 100
	}
	return *t.LocalPreference
}

// GetMaxEcmpHashBucketsPerNextHopGroup retrieves the value of the leaf MaxEcmpHashBucketsPerNextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpHashBucketsPerNextHopGroup is set, it can
// safely use t.GetMaxEcmpHashBucketsPerNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpHashBucketsPerNextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetMaxEcmpHashBucketsPerNextHopGroup() uint8 {
	if t == nil || t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		return 128
	}
	return *t.MaxEcmpHashBucketsPerNextHopGroup
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetSendCommunityType retrieves the value of the leaf SendCommunityType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendCommunityType is set, it can
// safely use t.GetSendCommunityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendCommunityType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) GetSendCommunityType() []E_SrlNokiaBgp_CommunityType {
	if t == nil || t.SendCommunityType == nil {
		return nil
	}
	return t.SendCommunityType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.LocalPreference == nil {
		var v uint32 = 100
		t.LocalPreference = &v
	}
	if t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		var v uint8 = 128
		t.MaxEcmpHashBucketsPerNextHopGroup = &v
	}
	t.AsPathOptions.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.BestPathSelection.PopulateDefaults()
	t.BgpLabel.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.DynamicNeighbors.PopulateDefaults()
	t.EbgpDefaultPolicy.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Preference.PopulateDefaults()
	t.RibManagement.PopulateDefaults()
	t.RouteAdvertisement.PopulateDefaults()
	t.RouteReflector.PopulateDefaults()
	t.SendCommunity.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.AfiSafi {
		e.PopulateDefaults()
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct {
	BgpInstance map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance `path:"bgp-instance" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) NewBgpInstance(Id uint8) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) GetOrCreateBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) GetBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance struct to the
// list BgpInstance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) AppendBgpInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance struct {
	AdminState             E_SrlNokiaCommon_AdminState                                                                   `path:"admin-state" module:"srl_nokia-bgp-evpn"`
	Ecmp                   *uint8                                                                                        `path:"ecmp" module:"srl_nokia-bgp-evpn"`
	EncapsulationType      E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType     `path:"encapsulation-type" module:"srl_nokia-bgp-evpn"`
	Evi                    *uint32                                                                                       `path:"evi" module:"srl_nokia-bgp-evpn"`
	Id                     *uint8                                                                                        `path:"id" module:"srl_nokia-bgp-evpn"`
	InternalTags           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags           `path:"internal-tags" module:"srl_nokia-bgp-evpn"`
	Mpls                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls                   `path:"mpls" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	Routes                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes                 `path:"routes" module:"srl_nokia-bgp-evpn"`
	VpwsAttachmentCircuits *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits `path:"vpws-attachment-circuits" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	VxlanInterface         *string                                                                                       `path:"vxlan-interface" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateInternalTags retrieves the value of the InternalTags field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetOrCreateInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags {
	if t.InternalTags != nil {
		return t.InternalTags
	}
	t.InternalTags = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags{}
	return t.InternalTags
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls{}
	return t.Mpls
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetOrCreateRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes{}
	return t.Routes
}

// GetOrCreateVpwsAttachmentCircuits retrieves the value of the VpwsAttachmentCircuits field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetOrCreateVpwsAttachmentCircuits() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits {
	if t.VpwsAttachmentCircuits != nil {
		return t.VpwsAttachmentCircuits
	}
	t.VpwsAttachmentCircuits = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits{}
	return t.VpwsAttachmentCircuits
}

// GetInternalTags returns the value of the InternalTags struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance. If the receiver or the field InternalTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags {
	if t != nil && t.InternalTags != nil {
		return t.InternalTags
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetVpwsAttachmentCircuits returns the value of the VpwsAttachmentCircuits struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance. If the receiver or the field VpwsAttachmentCircuits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetVpwsAttachmentCircuits() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits {
	if t != nil && t.VpwsAttachmentCircuits != nil {
		return t.VpwsAttachmentCircuits
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEcmp retrieves the value of the leaf Ecmp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetEcmp() uint8 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEncapsulationType retrieves the value of the leaf EncapsulationType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulationType is set, it can
// safely use t.GetEncapsulationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulationType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetEncapsulationType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType {
	if t == nil || t.EncapsulationType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType_vxlan
	}
	return t.EncapsulationType
}

// GetEvi retrieves the value of the leaf Evi from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evi is set, it can
// safely use t.GetEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evi == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetEvi() uint32 {
	if t == nil || t.Evi == nil {
		return 0
	}
	return *t.Evi
}

// GetId retrieves the value of the leaf Id from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetVxlanInterface retrieves the value of the leaf VxlanInterface from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInterface is set, it can
// safely use t.GetVxlanInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) GetVxlanInterface() string {
	if t == nil || t.VxlanInterface == nil {
		return ""
	}
	return *t.VxlanInterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Ecmp == nil {
		var v uint8 = 1
		t.Ecmp = &v
	}
	if t.EncapsulationType == 0 {
		t.EncapsulationType = SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_EncapsulationType_vxlan
	}
	t.InternalTags.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Routes.PopulateDefaults()
	t.VpwsAttachmentCircuits.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/internal-tags YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) IsYANGGoStruct() {
}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls struct {
	BridgeTable       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable       `path:"bridge-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	ControlWord       *bool                                                                                         `path:"control-word" module:"srl_nokia-bgp-evpn"`
	NextHopResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp-evpn"`
	RouteTable        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable        `path:"route-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) IsYANGGoStruct() {}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetOrCreateBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution{}
	return t.NextHopResolution
}

// GetOrCreateRouteTable retrieves the value of the RouteTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetOrCreateRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable {
	if t.RouteTable != nil {
		return t.RouteTable
	}
	t.RouteTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable{}
	return t.RouteTable
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetRouteTable returns the value of the RouteTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls. If the receiver or the field RouteTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable {
	if t != nil && t.RouteTable != nil {
		return t.RouteTable
	}
	return nil
}

// GetControlWord retrieves the value of the leaf ControlWord from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	t.BridgeTable.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
	t.RouteTable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable struct {
	SplitHorizonGroup *string `path:"split-horizon-group" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) IsYANGGoStruct() {
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/mpls/route-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Mpls_RouteTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes struct {
	BridgeTable *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable `path:"bridge-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	RouteTable  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable  `path:"route-table" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) IsYANGGoStruct() {
}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetOrCreateBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateRouteTable retrieves the value of the RouteTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetOrCreateRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable {
	if t.RouteTable != nil {
		return t.RouteTable
	}
	t.RouteTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable{}
	return t.RouteTable
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetRouteTable returns the value of the RouteTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes. If the receiver or the field RouteTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) GetRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable {
	if t != nil && t.RouteTable != nil {
		return t.RouteTable
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BridgeTable.PopulateDefaults()
	t.RouteTable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable struct {
	InclusiveMcast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast `path:"inclusive-mcast" module:"srl_nokia-bgp-evpn"`
	MacIp                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp          `path:"mac-ip" module:"srl_nokia-bgp-evpn"`
	NextHop               SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union   `path:"next-hop" module:"srl_nokia-bgp-evpn"`
	VlanAwareBundleEthTag *uint32                                                                                                  `path:"vlan-aware-bundle-eth-tag" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) IsYANGGoStruct() {
}

// GetOrCreateInclusiveMcast retrieves the value of the InclusiveMcast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetOrCreateInclusiveMcast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast {
	if t.InclusiveMcast != nil {
		return t.InclusiveMcast
	}
	t.InclusiveMcast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast{}
	return t.InclusiveMcast
}

// GetOrCreateMacIp retrieves the value of the MacIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetOrCreateMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp {
	if t.MacIp != nil {
		return t.MacIp
	}
	t.MacIp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp{}
	return t.MacIp
}

// GetInclusiveMcast returns the value of the InclusiveMcast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable. If the receiver or the field InclusiveMcast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetInclusiveMcast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast {
	if t != nil && t.InclusiveMcast != nil {
		return t.InclusiveMcast
	}
	return nil
}

// GetMacIp returns the value of the MacIp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable. If the receiver or the field MacIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp {
	if t != nil && t.MacIp != nil {
		return t.MacIp
	}
	return nil
}

// GetNextHop retrieves the value of the leaf NextHop from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetNextHop() SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return SrlNokiaCommon_NextHopType_Enum_use_system_ipv4_address
	}
	return t.NextHop
}

// GetVlanAwareBundleEthTag retrieves the value of the leaf VlanAwareBundleEthTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAwareBundleEthTag is set, it can
// safely use t.GetVlanAwareBundleEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAwareBundleEthTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) GetVlanAwareBundleEthTag() uint32 {
	if t == nil || t.VlanAwareBundleEthTag == nil {
		return 0
	}
	return *t.VlanAwareBundleEthTag
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHop == nil {
		t.NextHop = SrlNokiaCommon_NextHopType_Enum_use_system_ipv4_address
	}
	if t.VlanAwareBundleEthTag == nil {
		var v uint32 = 0
		t.VlanAwareBundleEthTag = &v
	}
	t.InclusiveMcast.PopulateDefaults()
	t.MacIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/inclusive-mcast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast struct {
	Advertise     *bool   `path:"advertise" module:"srl_nokia-bgp-evpn"`
	OriginatingIp *string `path:"originating-ip" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetOriginatingIp retrieves the value of the leaf OriginatingIp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatingIp is set, it can
// safely use t.GetOriginatingIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatingIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) GetOriginatingIp() string {
	if t == nil || t.OriginatingIp == nil {
		return ""
	}
	return *t.OriginatingIp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_InclusiveMcast) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/mac-ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp struct {
	Advertise                           *bool `path:"advertise" module:"srl_nokia-bgp-evpn"`
	AdvertiseArpNdExtendedCommunity     *bool `path:"advertise-arp-nd-extended-community" module:"srl_nokia-bgp-evpn"`
	AdvertiseArpNdOnlyWithMacTableEntry *bool `path:"advertise-arp-nd-only-with-mac-table-entry" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetAdvertiseArpNdExtendedCommunity retrieves the value of the leaf AdvertiseArpNdExtendedCommunity from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseArpNdExtendedCommunity is set, it can
// safely use t.GetAdvertiseArpNdExtendedCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseArpNdExtendedCommunity == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) GetAdvertiseArpNdExtendedCommunity() bool {
	if t == nil || t.AdvertiseArpNdExtendedCommunity == nil {
		return false
	}
	return *t.AdvertiseArpNdExtendedCommunity
}

// GetAdvertiseArpNdOnlyWithMacTableEntry retrieves the value of the leaf AdvertiseArpNdOnlyWithMacTableEntry from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseArpNdOnlyWithMacTableEntry is set, it can
// safely use t.GetAdvertiseArpNdOnlyWithMacTableEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseArpNdOnlyWithMacTableEntry == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) GetAdvertiseArpNdOnlyWithMacTableEntry() bool {
	if t == nil || t.AdvertiseArpNdOnlyWithMacTableEntry == nil {
		return false
	}
	return *t.AdvertiseArpNdOnlyWithMacTableEntry
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.AdvertiseArpNdExtendedCommunity == nil {
		var v bool = false
		t.AdvertiseArpNdExtendedCommunity = &v
	}
	if t.AdvertiseArpNdOnlyWithMacTableEntry == nil {
		var v bool = false
		t.AdvertiseArpNdOnlyWithMacTableEntry = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_MacIp) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable struct {
	IpPrefix *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix `path:"ip-prefix" module:"srl_nokia-bgp-evpn"`
	MacIp    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp    `path:"mac-ip" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) IsYANGGoStruct() {
}

// GetOrCreateIpPrefix retrieves the value of the IpPrefix field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) GetOrCreateIpPrefix() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix {
	if t.IpPrefix != nil {
		return t.IpPrefix
	}
	t.IpPrefix = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix{}
	return t.IpPrefix
}

// GetOrCreateMacIp retrieves the value of the MacIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) GetOrCreateMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp {
	if t.MacIp != nil {
		return t.MacIp
	}
	t.MacIp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp{}
	return t.MacIp
}

// GetIpPrefix returns the value of the IpPrefix struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable. If the receiver or the field IpPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) GetIpPrefix() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix {
	if t != nil && t.IpPrefix != nil {
		return t.IpPrefix
	}
	return nil
}

// GetMacIp returns the value of the MacIp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable. If the receiver or the field MacIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) GetMacIp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp {
	if t != nil && t.MacIp != nil {
		return t.MacIp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpPrefix.PopulateDefaults()
	t.MacIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix struct {
	EvpnLinkBandwidth *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth `path:"evpn-link-bandwidth" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) IsYANGGoStruct() {
}

// GetOrCreateEvpnLinkBandwidth retrieves the value of the EvpnLinkBandwidth field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) GetOrCreateEvpnLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth {
	if t.EvpnLinkBandwidth != nil {
		return t.EvpnLinkBandwidth
	}
	t.EvpnLinkBandwidth = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth{}
	return t.EvpnLinkBandwidth
}

// GetEvpnLinkBandwidth returns the value of the EvpnLinkBandwidth struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix. If the receiver or the field EvpnLinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) GetEvpnLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth {
	if t != nil && t.EvpnLinkBandwidth != nil {
		return t.EvpnLinkBandwidth
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EvpnLinkBandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth struct {
	Advertise    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise    `path:"advertise" module:"srl_nokia-bgp-evpn" yangPresence:"true"`
	WeightedEcmp *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp `path:"weighted-ecmp" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) IsYANGGoStruct() {
}

// GetOrCreateAdvertise retrieves the value of the Advertise field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) GetOrCreateAdvertise() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise {
	if t.Advertise != nil {
		return t.Advertise
	}
	t.Advertise = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise{}
	return t.Advertise
}

// GetOrCreateWeightedEcmp retrieves the value of the WeightedEcmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) GetOrCreateWeightedEcmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp {
	if t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	t.WeightedEcmp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp{}
	return t.WeightedEcmp
}

// GetAdvertise returns the value of the Advertise struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth. If the receiver or the field Advertise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) GetAdvertise() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise {
	if t != nil && t.Advertise != nil {
		return t.Advertise
	}
	return nil
}

// GetWeightedEcmp returns the value of the WeightedEcmp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth. If the receiver or the field WeightedEcmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) GetWeightedEcmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp {
	if t != nil && t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Advertise.PopulateDefaults()
	t.WeightedEcmp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/advertise YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise struct {
	MaximumDynamicWeight *uint32                                                                                                                                   `path:"maximum-dynamic-weight" module:"srl_nokia-bgp-evpn"`
	Weight               SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union `path:"weight" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) IsYANGGoStruct() {
}

// GetMaximumDynamicWeight retrieves the value of the leaf MaximumDynamicWeight from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDynamicWeight is set, it can
// safely use t.GetMaximumDynamicWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDynamicWeight == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) GetMaximumDynamicWeight() uint32 {
	if t == nil || t.MaximumDynamicWeight == nil {
		return 128
	}
	return *t.MaximumDynamicWeight
}

// GetWeight retrieves the value of the leaf Weight from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) GetWeight() SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union {
	if t == nil || t.Weight == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum_dynamic
	}
	return t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaximumDynamicWeight == nil {
		var v uint32 = 128
		t.MaximumDynamicWeight = &v
	}
	if t.Weight == nil {
		t.Weight = SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum_dynamic
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/weighted-ecmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp struct {
	AdminState                        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp-evpn"`
	MaxEcmpHashBucketsPerNextHopGroup *uint8                      `path:"max-ecmp-hash-buckets-per-next-hop-group" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetMaxEcmpHashBucketsPerNextHopGroup retrieves the value of the leaf MaxEcmpHashBucketsPerNextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpHashBucketsPerNextHopGroup is set, it can
// safely use t.GetMaxEcmpHashBucketsPerNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpHashBucketsPerNextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) GetMaxEcmpHashBucketsPerNextHopGroup() uint8 {
	if t == nil || t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		return 128
	}
	return *t.MaxEcmpHashBucketsPerNextHopGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		var v uint8 = 128
		t.MaxEcmpHashBucketsPerNextHopGroup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_WeightedEcmp) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/mac-ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp struct {
	AdvertiseGatewayMac *bool `path:"advertise-gateway-mac" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) IsYANGGoStruct() {
}

// GetAdvertiseGatewayMac retrieves the value of the leaf AdvertiseGatewayMac from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseGatewayMac is set, it can
// safely use t.GetAdvertiseGatewayMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseGatewayMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) GetAdvertiseGatewayMac() bool {
	if t == nil || t.AdvertiseGatewayMac == nil {
		return false
	}
	return *t.AdvertiseGatewayMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseGatewayMac == nil {
		var v bool = false
		t.AdvertiseGatewayMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_MacIp) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits struct {
	Local  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local  `path:"local" module:"srl_nokia-bgp-evpn"`
	Remote *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote `path:"remote" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) IsYANGGoStruct() {
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) GetOrCreateLocal() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local{}
	return t.Local
}

// GetOrCreateRemote retrieves the value of the Remote field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) GetOrCreateRemote() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote {
	if t.Remote != nil {
		return t.Remote
	}
	t.Remote = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote{}
	return t.Remote
}

// GetLocal returns the value of the Local struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) GetLocal() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetRemote returns the value of the Remote struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits. If the receiver or the field Remote is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) GetRemote() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote {
	if t != nil && t.Remote != nil {
		return t.Remote
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Local.PopulateDefaults()
	t.Remote.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local struct {
	LocalAttachmentCircuit map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit `path:"local-attachment-circuit" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) IsYANGGoStruct() {
}

// NewLocalAttachmentCircuit creates a new entry in the LocalAttachmentCircuit list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) NewLocalAttachmentCircuit(
	Name string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAttachmentCircuit == nil {
		t.LocalAttachmentCircuit = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAttachmentCircuit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAttachmentCircuit", key)
	}

	t.LocalAttachmentCircuit[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit{
		Name: &Name,
	}

	return t.LocalAttachmentCircuit[key], nil
}

// RenameLocalAttachmentCircuit renames an entry in the list LocalAttachmentCircuit within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) RenameLocalAttachmentCircuit(oldK, newK string) error {
	if _, ok := t.LocalAttachmentCircuit[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalAttachmentCircuit", newK)
	}

	e, ok := t.LocalAttachmentCircuit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalAttachmentCircuit", oldK)
	}
	e.Name = &newK

	t.LocalAttachmentCircuit[newK] = e
	delete(t.LocalAttachmentCircuit, oldK)
	return nil
}

// GetOrCreateLocalAttachmentCircuit retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) GetOrCreateLocalAttachmentCircuit(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit {
	key := Name

	if v, ok := t.LocalAttachmentCircuit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalAttachmentCircuit(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalAttachmentCircuit got unexpected error: %v", err))
	}
	return v
}

// GetLocalAttachmentCircuit retrieves the value with the specified key from
// the LocalAttachmentCircuit map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) GetLocalAttachmentCircuit(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LocalAttachmentCircuit[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalAttachmentCircuit deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) DeleteLocalAttachmentCircuit(Name string) {
	key := Name

	delete(t.LocalAttachmentCircuit, key)
}

// AppendLocalAttachmentCircuit appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit struct to the
// list LocalAttachmentCircuit of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) AppendLocalAttachmentCircuit(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAttachmentCircuit == nil {
		t.LocalAttachmentCircuit = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit)
	}

	if _, ok := t.LocalAttachmentCircuit[key]; ok {
		return fmt.Errorf("duplicate key for list LocalAttachmentCircuit %v", key)
	}

	t.LocalAttachmentCircuit[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LocalAttachmentCircuit {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local/local-attachment-circuit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit struct {
	ConnectionPoint *string `path:"connection-point" module:"srl_nokia-bgp-evpn"`
	EthernetTag     *uint32 `path:"ethernet-tag" module:"srl_nokia-bgp-evpn"`
	Name            *string `path:"name" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) IsYANGGoStruct() {
}

// GetConnectionPoint retrieves the value of the leaf ConnectionPoint from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionPoint is set, it can
// safely use t.GetConnectionPoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionPoint == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) GetConnectionPoint() string {
	if t == nil || t.ConnectionPoint == nil {
		return ""
	}
	return *t.ConnectionPoint
}

// GetEthernetTag retrieves the value of the leaf EthernetTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetTag is set, it can
// safely use t.GetEthernetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) GetEthernetTag() uint32 {
	if t == nil || t.EthernetTag == nil {
		return 0
	}
	return *t.EthernetTag
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Local_LocalAttachmentCircuit) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote struct {
	RemoteAttachmentCircuit map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit `path:"remote-attachment-circuit" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) IsYANGGoStruct() {
}

// NewRemoteAttachmentCircuit creates a new entry in the RemoteAttachmentCircuit list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) NewRemoteAttachmentCircuit(
	Name string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteAttachmentCircuit == nil {
		t.RemoteAttachmentCircuit = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteAttachmentCircuit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteAttachmentCircuit", key)
	}

	t.RemoteAttachmentCircuit[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit{
		Name: &Name,
	}

	return t.RemoteAttachmentCircuit[key], nil
}

// RenameRemoteAttachmentCircuit renames an entry in the list RemoteAttachmentCircuit within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) RenameRemoteAttachmentCircuit(oldK, newK string) error {
	if _, ok := t.RemoteAttachmentCircuit[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteAttachmentCircuit", newK)
	}

	e, ok := t.RemoteAttachmentCircuit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteAttachmentCircuit", oldK)
	}
	e.Name = &newK

	t.RemoteAttachmentCircuit[newK] = e
	delete(t.RemoteAttachmentCircuit, oldK)
	return nil
}

// GetOrCreateRemoteAttachmentCircuit retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) GetOrCreateRemoteAttachmentCircuit(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit {
	key := Name

	if v, ok := t.RemoteAttachmentCircuit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteAttachmentCircuit(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteAttachmentCircuit got unexpected error: %v", err))
	}
	return v
}

// GetRemoteAttachmentCircuit retrieves the value with the specified key from
// the RemoteAttachmentCircuit map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) GetRemoteAttachmentCircuit(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RemoteAttachmentCircuit[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteAttachmentCircuit deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) DeleteRemoteAttachmentCircuit(Name string) {
	key := Name

	delete(t.RemoteAttachmentCircuit, key)
}

// AppendRemoteAttachmentCircuit appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit struct to the
// list RemoteAttachmentCircuit of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) AppendRemoteAttachmentCircuit(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteAttachmentCircuit == nil {
		t.RemoteAttachmentCircuit = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit)
	}

	if _, ok := t.RemoteAttachmentCircuit[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteAttachmentCircuit %v", key)
	}

	t.RemoteAttachmentCircuit[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RemoteAttachmentCircuit {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote/remote-attachment-circuit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit struct {
	ConnectionPoint *string `path:"connection-point" module:"srl_nokia-bgp-evpn"`
	EthernetTag     *uint32 `path:"ethernet-tag" module:"srl_nokia-bgp-evpn"`
	Name            *string `path:"name" module:"srl_nokia-bgp-evpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) IsYANGGoStruct() {
}

// GetConnectionPoint retrieves the value of the leaf ConnectionPoint from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionPoint is set, it can
// safely use t.GetConnectionPoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionPoint == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) GetConnectionPoint() string {
	if t == nil || t.ConnectionPoint == nil {
		return ""
	}
	return *t.ConnectionPoint
}

// GetEthernetTag retrieves the value of the leaf EthernetTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetTag is set, it can
// safely use t.GetEthernetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) GetEthernetTag() uint32 {
	if t == nil || t.EthernetTag == nil {
		return 0
	}
	return *t.EthernetTag
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_VpwsAttachmentCircuits_Remote_RemoteAttachmentCircuit) ΛBelongingModule() string {
	return "srl_nokia-bgp-evpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp-ipvpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn struct {
	BgpInstance map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance `path:"bgp-instance" module:"srl_nokia-bgp-ipvpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) NewBgpInstance(Id uint8) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) GetOrCreateBgpInstance(
	Id uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) GetBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance struct to the
// list BgpInstance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) AppendBgpInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance represents the /srl_nokia-network-instance/network-instance/protocols/bgp-ipvpn/bgp-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance struct {
	AdminState        E_SrlNokiaCommon_AdminState                                                                `path:"admin-state" module:"srl_nokia-bgp-ipvpn"`
	Ecmp              *uint8                                                                                     `path:"ecmp" module:"srl_nokia-bgp-ipvpn"`
	EncapsulationType E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_EncapsulationType `path:"encapsulation-type" module:"srl_nokia-bgp-ipvpn"`
	Id                *uint8                                                                                     `path:"id" module:"srl_nokia-bgp-ipvpn"`
	InternalTags      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags       `path:"internal-tags" module:"srl_nokia-bgp-ipvpn"`
	Mpls              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls               `path:"mpls" module:"srl_nokia-bgp-ipvpn" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateInternalTags retrieves the value of the InternalTags field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetOrCreateInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags {
	if t.InternalTags != nil {
		return t.InternalTags
	}
	t.InternalTags = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags{}
	return t.InternalTags
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls{}
	return t.Mpls
}

// GetInternalTags returns the value of the InternalTags struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance. If the receiver or the field InternalTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags {
	if t != nil && t.InternalTags != nil {
		return t.InternalTags
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEcmp retrieves the value of the leaf Ecmp from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetEcmp() uint8 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEncapsulationType retrieves the value of the leaf EncapsulationType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulationType is set, it can
// safely use t.GetEncapsulationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulationType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetEncapsulationType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_EncapsulationType {
	if t == nil || t.EncapsulationType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_EncapsulationType_mpls
	}
	return t.EncapsulationType
}

// GetId retrieves the value of the leaf Id from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Ecmp == nil {
		var v uint8 = 1
		t.Ecmp = &v
	}
	if t.EncapsulationType == 0 {
		t.EncapsulationType = SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_EncapsulationType_mpls
	}
	t.InternalTags.PopulateDefaults()
	t.Mpls.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-bgp-ipvpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags represents the /srl_nokia-network-instance/network-instance/protocols/bgp-ipvpn/bgp-instance/internal-tags YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-bgp-ipvpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) IsYANGGoStruct() {
}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-bgp-ipvpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/bgp-ipvpn/bgp-instance/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls struct {
	NextHopResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp-ipvpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) IsYANGGoStruct() {
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution{}
	return t.NextHopResolution
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls) ΛBelongingModule() string {
	return "srl_nokia-bgp-ipvpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp-ipvpn/bgp-instance/mpls/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp-ipvpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn_BgpInstance_Mpls_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp-ipvpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn struct {
	BgpInstance map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance `path:"bgp-instance" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) NewBgpInstance(Id uint8) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) GetOrCreateBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) GetBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance struct to the
// list BgpInstance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) AppendBgpInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn/bgp-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance struct {
	ExportPolicy       *string                                                                                  `path:"export-policy" module:"srl_nokia-bgp-vpn"`
	Id                 *uint8                                                                                   `path:"id" module:"srl_nokia-bgp-vpn"`
	ImportPolicy       *string                                                                                  `path:"import-policy" module:"srl_nokia-bgp-vpn"`
	RouteDistinguisher *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher `path:"route-distinguisher" module:"srl_nokia-bgp-vpn"`
	RouteTarget        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget        `path:"route-target" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateRouteDistinguisher retrieves the value of the RouteDistinguisher field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetOrCreateRouteDistinguisher() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher {
	if t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	t.RouteDistinguisher = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher{}
	return t.RouteDistinguisher
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetOrCreateRouteTarget() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget{}
	return t.RouteTarget
}

// GetRouteDistinguisher returns the value of the RouteDistinguisher struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance. If the receiver or the field RouteDistinguisher is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetRouteDistinguisher() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher {
	if t != nil && t.RouteDistinguisher != nil {
		return t.RouteDistinguisher
	}
	return nil
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetRouteTarget() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetId retrieves the value of the leaf Id from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteDistinguisher.PopulateDefaults()
	t.RouteTarget.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher struct {
	Rd *string `path:"rd" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) IsYANGGoStruct() {
}

// GetRd retrieves the value of the leaf Rd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rd is set, it can
// safely use t.GetRd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) GetRd() string {
	if t == nil || t.Rd == nil {
		return ""
	}
	return *t.Rd
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteDistinguisher) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget represents the /srl_nokia-network-instance/network-instance/protocols/bgp-vpn/bgp-instance/route-target YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget struct {
	ExportRt *string `path:"export-rt" module:"srl_nokia-bgp-vpn"`
	ImportRt *string `path:"import-rt" module:"srl_nokia-bgp-vpn"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) IsYANGGoStruct() {
}

// GetExportRt retrieves the value of the leaf ExportRt from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRt is set, it can
// safely use t.GetExportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRt == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) GetExportRt() string {
	if t == nil || t.ExportRt == nil {
		return ""
	}
	return *t.ExportRt
}

// GetImportRt retrieves the value of the leaf ImportRt from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRt is set, it can
// safely use t.GetImportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRt == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) GetImportRt() string {
	if t == nil || t.ImportRt == nil {
		return ""
	}
	return *t.ImportRt
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn_BgpInstance_RouteTarget) ΛBelongingModule() string {
	return "srl_nokia-bgp-vpn"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi struct {
	AddPaths           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths           `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState         E_SrlNokiaCommon_AdminState                                                       `path:"admin-state" module:"srl_nokia-bgp"`
	AfiSafiName        E_SrlNokiaCommon_BgpAddressFamily                                                 `path:"afi-safi-name" module:"srl_nokia-bgp"`
	Evpn               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn               `path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy       *string                                                                           `path:"export-policy" module:"srl_nokia-bgp"`
	ImportPolicy       *string                                                                           `path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast `path:"ipv4-labeled-unicast" module:"srl_nokia-bgp"`
	Ipv4Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast `path:"ipv6-labeled-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-bgp"`
	L3VpnIpv4Unicast   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast   `path:"l3vpn-ipv4-unicast" module:"srl_nokia-bgp"`
	L3VpnIpv6Unicast   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast   `path:"l3vpn-ipv6-unicast" module:"srl_nokia-bgp"`
	Multipath          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath          `path:"multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths{}
	return t.AddPaths
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4LabeledUnicast retrieves the value of the Ipv4LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateIpv4LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast {
	if t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	t.Ipv4LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast{}
	return t.Ipv4LabeledUnicast
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6LabeledUnicast retrieves the value of the Ipv6LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateIpv6LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast {
	if t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	t.Ipv6LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast{}
	return t.Ipv6LabeledUnicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateL3VpnIpv4Unicast retrieves the value of the L3VpnIpv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateL3VpnIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast {
	if t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	t.L3VpnIpv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast{}
	return t.L3VpnIpv4Unicast
}

// GetOrCreateL3VpnIpv6Unicast retrieves the value of the L3VpnIpv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateL3VpnIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast {
	if t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	t.L3VpnIpv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast{}
	return t.L3VpnIpv6Unicast
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetOrCreateMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath{}
	return t.Multipath
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4LabeledUnicast returns the value of the Ipv4LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field Ipv4LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetIpv4LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast {
	if t != nil && t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6LabeledUnicast returns the value of the Ipv6LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field Ipv6LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetIpv6LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast {
	if t != nil && t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetL3VpnIpv4Unicast returns the value of the L3VpnIpv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field L3VpnIpv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetL3VpnIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast {
	if t != nil && t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	return nil
}

// GetL3VpnIpv6Unicast returns the value of the L3VpnIpv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field L3VpnIpv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetL3VpnIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast {
	if t != nil && t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiName is set, it can
// safely use t.GetAfiSafiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetAfiSafiName() E_SrlNokiaCommon_BgpAddressFamily {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	t.AddPaths.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.Ipv4LabeledUnicast.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6LabeledUnicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.L3VpnIpv4Unicast.PopulateDefaults()
	t.L3VpnIpv6Unicast.PopulateDefaults()
	t.Multipath.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn struct {
	AdvertiseIpv6NextHops *bool `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	InterAsVpn            *bool `path:"inter-as-vpn" module:"srl_nokia-bgp"`
	KeepAllRoutes         *bool `path:"keep-all-routes" module:"srl_nokia-bgp"`
	RapidUpdate           *bool `path:"rapid-update" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) IsYANGGoStruct() {}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetInterAsVpn retrieves the value of the leaf InterAsVpn from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterAsVpn is set, it can
// safely use t.GetInterAsVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterAsVpn == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) GetInterAsVpn() bool {
	if t == nil || t.InterAsVpn == nil {
		return false
	}
	return *t.InterAsVpn
}

// GetKeepAllRoutes retrieves the value of the leaf KeepAllRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAllRoutes is set, it can
// safely use t.GetKeepAllRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAllRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) GetKeepAllRoutes() bool {
	if t == nil || t.KeepAllRoutes == nil {
		return false
	}
	return *t.KeepAllRoutes
}

// GetRapidUpdate retrieves the value of the leaf RapidUpdate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidUpdate is set, it can
// safely use t.GetRapidUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidUpdate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) GetRapidUpdate() bool {
	if t == nil || t.RapidUpdate == nil {
		return false
	}
	return *t.RapidUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseIpv6NextHops == nil {
		var v bool = false
		t.AdvertiseIpv6NextHops = &v
	}
	if t.InterAsVpn == nil {
		var v bool = false
		t.InterAsVpn = &v
	}
	if t.KeepAllRoutes == nil {
		var v bool = false
		t.KeepAllRoutes = &v
	}
	if t.RapidUpdate == nil {
		var v bool = false
		t.RapidUpdate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast struct {
	AdvertiseIpv6NextHops *bool                                                                                               `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	BackupPaths           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths       `path:"backup-paths" module:"srl_nokia-bgp"`
	Convergence           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	NextHopResolution     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
	RapidUpdate           *bool                                                                                               `path:"rapid-update" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                               `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) IsYANGGoStruct() {
}

// GetOrCreateBackupPaths retrieves the value of the BackupPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetOrCreateBackupPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths {
	if t.BackupPaths != nil {
		return t.BackupPaths
	}
	t.BackupPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths{}
	return t.BackupPaths
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence{}
	return t.Convergence
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetBackupPaths returns the value of the BackupPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field BackupPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetBackupPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths {
	if t != nil && t.BackupPaths != nil {
		return t.BackupPaths
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetRapidUpdate retrieves the value of the leaf RapidUpdate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidUpdate is set, it can
// safely use t.GetRapidUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidUpdate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetRapidUpdate() bool {
	if t == nil || t.RapidUpdate == nil {
		return false
	}
	return *t.RapidUpdate
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseIpv6NextHops == nil {
		var v bool = false
		t.AdvertiseIpv6NextHops = &v
	}
	if t.RapidUpdate == nil {
		var v bool = false
		t.RapidUpdate = &v
	}
	if t.ReceiveIpv6NextHops == nil {
		var v bool = false
		t.ReceiveIpv6NextHops = &v
	}
	t.BackupPaths.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/backup-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths struct {
	Install *bool `path:"install" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) IsYANGGoStruct() {
}

// GetInstall retrieves the value of the leaf Install from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Install is set, it can
// safely use t.GetInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Install == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) GetInstall() bool {
	if t == nil || t.Install == nil {
		return false
	}
	return *t.Install
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Install == nil {
		var v bool = false
		t.Install = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_BackupPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast struct {
	AdvertiseIpv6NextHops *bool                                                                                        `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	Convergence           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	NextHopResolution     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                        `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence{}
	return t.Convergence
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseIpv6NextHops == nil {
		var v bool = false
		t.AdvertiseIpv6NextHops = &v
	}
	if t.ReceiveIpv6NextHops == nil {
		var v bool = false
		t.ReceiveIpv6NextHops = &v
	}
	t.Convergence.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                                    `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                                    `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast struct {
	BackupPaths       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths       `path:"backup-paths" module:"srl_nokia-bgp"`
	Convergence       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	NextHopResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
	RapidUpdate       *bool                                                                                               `path:"rapid-update" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) IsYANGGoStruct() {
}

// GetOrCreateBackupPaths retrieves the value of the BackupPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetOrCreateBackupPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths {
	if t.BackupPaths != nil {
		return t.BackupPaths
	}
	t.BackupPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths{}
	return t.BackupPaths
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence{}
	return t.Convergence
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetBackupPaths returns the value of the BackupPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field BackupPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetBackupPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths {
	if t != nil && t.BackupPaths != nil {
		return t.BackupPaths
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetRapidUpdate retrieves the value of the leaf RapidUpdate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidUpdate is set, it can
// safely use t.GetRapidUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidUpdate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) GetRapidUpdate() bool {
	if t == nil || t.RapidUpdate == nil {
		return false
	}
	return *t.RapidUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RapidUpdate == nil {
		var v bool = false
		t.RapidUpdate = &v
	}
	t.BackupPaths.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/backup-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths struct {
	Install *bool `path:"install" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) IsYANGGoStruct() {
}

// GetInstall retrieves the value of the leaf Install from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Install is set, it can
// safely use t.GetInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Install == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) GetInstall() bool {
	if t == nil || t.Install == nil {
		return false
	}
	return *t.Install
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Install == nil {
		var v bool = false
		t.Install = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_BackupPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6LabeledUnicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast struct {
	Convergence       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	NextHopResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence{}
	return t.Convergence
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Convergence.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                                    `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops struct {
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}
