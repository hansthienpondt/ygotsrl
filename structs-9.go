/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/te-database-install/bgp-ls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs struct {
	BgpLsIdentifier *uint32 `path:"bgp-ls-identifier" module:"srl_nokia-isis"`
	IgpIdentifier   *uint64 `path:"igp-identifier" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) IsYANGGoStruct() {
}

// GetBgpLsIdentifier retrieves the value of the leaf BgpLsIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsIdentifier is set, it can
// safely use t.GetBgpLsIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) GetBgpLsIdentifier() uint32 {
	if t == nil || t.BgpLsIdentifier == nil {
		return 0
	}
	return *t.BgpLsIdentifier
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers struct {
	LspGeneration *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration `path:"lsp-generation" module:"srl_nokia-isis"`
	LspLifetime   *uint16                                                                               `path:"lsp-lifetime" module:"srl_nokia-isis"`
	LspRefresh    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh    `path:"lsp-refresh" module:"srl_nokia-isis"`
	Spf           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf           `path:"spf" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) IsYANGGoStruct() {}

// GetOrCreateLspGeneration retrieves the value of the LspGeneration field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetOrCreateLspGeneration() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration {
	if t.LspGeneration != nil {
		return t.LspGeneration
	}
	t.LspGeneration = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration{}
	return t.LspGeneration
}

// GetOrCreateLspRefresh retrieves the value of the LspRefresh field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetOrCreateLspRefresh() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh {
	if t.LspRefresh != nil {
		return t.LspRefresh
	}
	t.LspRefresh = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh{}
	return t.LspRefresh
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetOrCreateSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf{}
	return t.Spf
}

// GetLspGeneration returns the value of the LspGeneration struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers. If the receiver or the field LspGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetLspGeneration() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration {
	if t != nil && t.LspGeneration != nil {
		return t.LspGeneration
	}
	return nil
}

// GetLspRefresh returns the value of the LspRefresh struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers. If the receiver or the field LspRefresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetLspRefresh() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh {
	if t != nil && t.LspRefresh != nil {
		return t.LspRefresh
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// GetLspLifetime retrieves the value of the leaf LspLifetime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetime is set, it can
// safely use t.GetLspLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) GetLspLifetime() uint16 {
	if t == nil || t.LspLifetime == nil {
		return 1200
	}
	return *t.LspLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspLifetime == nil {
		var v uint16 = 1200
		t.LspLifetime = &v
	}
	t.LspGeneration.PopulateDefaults()
	t.LspRefresh.PopulateDefaults()
	t.Spf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers/lsp-generation YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration struct {
	InitialWait *uint64 `path:"initial-wait" module:"srl_nokia-isis"`
	MaxWait     *uint64 `path:"max-wait" module:"srl_nokia-isis"`
	SecondWait  *uint64 `path:"second-wait" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) GetInitialWait() uint64 {
	if t == nil || t.InitialWait == nil {
		return 10
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) GetMaxWait() uint64 {
	if t == nil || t.MaxWait == nil {
		return 5000
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) GetSecondWait() uint64 {
	if t == nil || t.SecondWait == nil {
		return 1000
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint64 = 10
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint64 = 5000
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint64 = 1000
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspGeneration) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers/lsp-refresh YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh struct {
	HalfLifetime *bool   `path:"half-lifetime" module:"srl_nokia-isis"`
	Interval     *uint16 `path:"interval" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) IsYANGGoStruct() {
}

// GetHalfLifetime retrieves the value of the leaf HalfLifetime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLifetime is set, it can
// safely use t.GetHalfLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLifetime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) GetHalfLifetime() bool {
	if t == nil || t.HalfLifetime == nil {
		return true
	}
	return *t.HalfLifetime
}

// GetInterval retrieves the value of the leaf Interval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) GetInterval() uint16 {
	if t == nil || t.Interval == nil {
		return 600
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HalfLifetime == nil {
		var v bool = true
		t.HalfLifetime = &v
	}
	if t.Interval == nil {
		var v uint16 = 600
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_LspRefresh) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/timers/spf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf struct {
	InitialWait *uint64 `path:"initial-wait" module:"srl_nokia-isis"`
	MaxWait     *uint64 `path:"max-wait" module:"srl_nokia-isis"`
	SecondWait  *uint64 `path:"second-wait" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) GetInitialWait() uint64 {
	if t == nil || t.InitialWait == nil {
		return 1000
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) GetMaxWait() uint64 {
	if t == nil || t.MaxWait == nil {
		return 10000
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) GetSecondWait() uint64 {
	if t == nil || t.SecondWait == nil {
		return 1000
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint64 = 1000
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint64 = 10000
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint64 = 1000
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers_Spf) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions struct {
	Trace []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions_Trace `path:"trace" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) GetTrace() []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/traffic-engineering YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering struct {
	Advertisement                    *bool `path:"advertisement" module:"srl_nokia-isis"`
	LegacyLinkAttributeAdvertisement *bool `path:"legacy-link-attribute-advertisement" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) IsYANGGoStruct() {
}

// GetAdvertisement retrieves the value of the leaf Advertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertisement is set, it can
// safely use t.GetAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) GetAdvertisement() bool {
	if t == nil || t.Advertisement == nil {
		return false
	}
	return *t.Advertisement
}

// GetLegacyLinkAttributeAdvertisement retrieves the value of the leaf LegacyLinkAttributeAdvertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LegacyLinkAttributeAdvertisement is set, it can
// safely use t.GetLegacyLinkAttributeAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LegacyLinkAttributeAdvertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) GetLegacyLinkAttributeAdvertisement() bool {
	if t == nil || t.LegacyLinkAttributeAdvertisement == nil {
		return true
	}
	return *t.LegacyLinkAttributeAdvertisement
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertisement == nil {
		var v bool = false
		t.Advertisement = &v
	}
	if t.LegacyLinkAttributeAdvertisement == nil {
		var v bool = true
		t.LegacyLinkAttributeAdvertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport struct {
	LspMtuSize *uint16 `path:"lsp-mtu-size" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) IsYANGGoStruct() {}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) GetLspMtuSize() uint16 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspMtuSize == nil {
		var v uint16 = 1492
		t.LspMtuSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/weighted-ecmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp struct {
	AdminState                        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	MaxEcmpHashBucketsPerNextHopGroup *uint8                      `path:"max-ecmp-hash-buckets-per-next-hop-group" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetMaxEcmpHashBucketsPerNextHopGroup retrieves the value of the leaf MaxEcmpHashBucketsPerNextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpHashBucketsPerNextHopGroup is set, it can
// safely use t.GetMaxEcmpHashBucketsPerNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpHashBucketsPerNextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) GetMaxEcmpHashBucketsPerNextHopGroup() uint8 {
	if t == nil || t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		return 128
	}
	return *t.MaxEcmpHashBucketsPerNextHopGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.MaxEcmpHashBucketsPerNextHopGroup == nil {
		var v uint8 = 128
		t.MaxEcmpHashBucketsPerNextHopGroup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding represents the /srl_nokia-network-instance/network-instance/protocols/isis/non-stop-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp represents the /srl_nokia-network-instance/network-instance/protocols/ldp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp struct {
	AdminState         E_SrlNokiaCommon_AdminState                                                 `path:"admin-state" module:"srl_nokia-ldp"`
	Discovery          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery            `path:"discovery" module:"srl_nokia-ldp"`
	DynamicLabelBlock  *string                                                                     `path:"dynamic-label-block" module:"srl_nokia-ldp"`
	EntropyLabel       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel         `path:"entropy-label" module:"srl_nokia-ldp"`
	ExportPrefixPolicy *string                                                                     `path:"export-prefix-policy" module:"srl_nokia-ldp"`
	GracefulRestart    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart      `path:"graceful-restart" module:"srl_nokia-ldp"`
	ImportPrefixPolicy *string                                                                     `path:"import-prefix-policy" module:"srl_nokia-ldp"`
	Ipv4               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4                 `path:"ipv4" module:"srl_nokia-ldp"`
	LoopfreeAlternate  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate    `path:"loopfree-alternate" module:"srl_nokia-ldp"`
	Multipath          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath            `path:"multipath" module:"srl_nokia-ldp"`
	Peers              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers                `path:"peers" module:"srl_nokia-ldp"`
	StaticFec          map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec `path:"static-fec" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) IsYANGGoStruct() {}

// NewStaticFec creates a new entry in the StaticFec list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) NewStaticFec(FecPrefix string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticFec == nil {
		t.StaticFec = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec)
	}

	key := FecPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticFec[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticFec", key)
	}

	t.StaticFec[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec{
		FecPrefix: &FecPrefix,
	}

	return t.StaticFec[key], nil
}

// RenameStaticFec renames an entry in the list StaticFec within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) RenameStaticFec(oldK, newK string) error {
	if _, ok := t.StaticFec[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticFec", newK)
	}

	e, ok := t.StaticFec[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticFec", oldK)
	}
	e.FecPrefix = &newK

	t.StaticFec[newK] = e
	delete(t.StaticFec, oldK)
	return nil
}

// GetOrCreateStaticFec retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateStaticFec(
	FecPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec {
	key := FecPrefix

	if v, ok := t.StaticFec[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticFec(FecPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticFec got unexpected error: %v", err))
	}
	return v
}

// GetStaticFec retrieves the value with the specified key from
// the StaticFec map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetStaticFec(FecPrefix string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec {
	if t == nil {
		return nil
	}

	key := FecPrefix

	if lm, ok := t.StaticFec[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticFec deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) DeleteStaticFec(FecPrefix string) {
	key := FecPrefix

	delete(t.StaticFec, key)
}

// AppendStaticFec appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec struct to the
// list StaticFec of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) AppendStaticFec(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec,
) error {
	if v.FecPrefix == nil {
		return fmt.Errorf("invalid nil key received for FecPrefix")
	}

	key := *v.FecPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticFec == nil {
		t.StaticFec = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec)
	}

	if _, ok := t.StaticFec[key]; ok {
		return fmt.Errorf("duplicate key for list StaticFec %v", key)
	}

	t.StaticFec[key] = v
	return nil
}

// GetOrCreateDiscovery retrieves the value of the Discovery field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateDiscovery() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery {
	if t.Discovery != nil {
		return t.Discovery
	}
	t.Discovery = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery{}
	return t.Discovery
}

// GetOrCreateEntropyLabel retrieves the value of the EntropyLabel field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateEntropyLabel() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel {
	if t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	t.EntropyLabel = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel{}
	return t.EntropyLabel
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4{}
	return t.Ipv4
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateLoopfreeAlternate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreateMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath{}
	return t.Multipath
}

// GetOrCreatePeers retrieves the value of the Peers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetOrCreatePeers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers {
	if t.Peers != nil {
		return t.Peers
	}
	t.Peers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers{}
	return t.Peers
}

// GetDiscovery returns the value of the Discovery struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Discovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetDiscovery() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery {
	if t != nil && t.Discovery != nil {
		return t.Discovery
	}
	return nil
}

// GetEntropyLabel returns the value of the EntropyLabel struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field EntropyLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetEntropyLabel() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel {
	if t != nil && t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetLoopfreeAlternate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetMultipath() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetPeers returns the value of the Peers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp. If the receiver or the field Peers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetPeers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers {
	if t != nil && t.Peers != nil {
		return t.Peers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// GetExportPrefixPolicy retrieves the value of the leaf ExportPrefixPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPrefixPolicy is set, it can
// safely use t.GetExportPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPrefixPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetExportPrefixPolicy() string {
	if t == nil || t.ExportPrefixPolicy == nil {
		return ""
	}
	return *t.ExportPrefixPolicy
}

// GetImportPrefixPolicy retrieves the value of the leaf ImportPrefixPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPrefixPolicy is set, it can
// safely use t.GetImportPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPrefixPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) GetImportPrefixPolicy() string {
	if t == nil || t.ImportPrefixPolicy == nil {
		return ""
	}
	return *t.ImportPrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	t.Discovery.PopulateDefaults()
	t.EntropyLabel.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.Peers.PopulateDefaults()
	for _, e := range t.StaticFec {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery struct {
	Interfaces *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces `path:"interfaces" module:"srl_nokia-ldp"`
	Targeted   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted   `path:"targeted" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) IsYANGGoStruct() {}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) GetOrCreateInterfaces() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces{}
	return t.Interfaces
}

// GetOrCreateTargeted retrieves the value of the Targeted field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) GetOrCreateTargeted() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted {
	if t.Targeted != nil {
		return t.Targeted
	}
	t.Targeted = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted{}
	return t.Targeted
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) GetInterfaces() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetTargeted returns the value of the Targeted struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery. If the receiver or the field Targeted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) GetTargeted() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted {
	if t != nil && t.Targeted != nil {
		return t.Targeted
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interfaces.PopulateDefaults()
	t.Targeted.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces struct {
	HelloHoldtime *uint16                                                                                          `path:"hello-holdtime" module:"srl_nokia-ldp"`
	HelloInterval *uint16                                                                                          `path:"hello-interval" module:"srl_nokia-ldp"`
	Interface     map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface `path:"interface" module:"srl_nokia-ldp"`
	TraceOptions  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions         `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) NewInterface(
	Name string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetOrCreateInterface(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface {
	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetInterface(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface struct {
	HelloHoldtime *uint16                                                                                    `path:"hello-holdtime" module:"srl_nokia-ldp"`
	HelloInterval *uint16                                                                                    `path:"hello-interval" module:"srl_nokia-ldp"`
	Ipv4          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 `path:"ipv4" module:"srl_nokia-ldp"`
	Name          *string                                                                                    `path:"name" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/interface/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 struct {
	AdminState          E_SrlNokiaCommon_AdminState                                                                             `path:"admin-state" module:"srl_nokia-ldp"`
	EnableBfd           *bool                                                                                                   `path:"enable-bfd" module:"srl_nokia-ldp"`
	LocalInterfaceLsrId *bool                                                                                                   `path:"local-interface-lsr-id" module:"srl_nokia-ldp"`
	TraceOptions        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetLocalInterfaceLsrId retrieves the value of the leaf LocalInterfaceLsrId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalInterfaceLsrId is set, it can
// safely use t.GetLocalInterfaceLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalInterfaceLsrId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) GetLocalInterfaceLsrId() bool {
	if t == nil || t.LocalInterfaceLsrId == nil {
		return false
	}
	return *t.LocalInterfaceLsrId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.LocalInterfaceLsrId == nil {
		var v bool = false
		t.LocalInterfaceLsrId = &v
	}
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/interface/ipv4/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions struct {
	Trace []E_SrlNokiaLdp_InterfaceTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) GetTrace() []E_SrlNokiaLdp_InterfaceTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_Interface_Ipv4_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/interfaces/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions struct {
	Trace []E_SrlNokiaLdp_InterfaceTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) GetTrace() []E_SrlNokiaLdp_InterfaceTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Interfaces_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/targeted YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted struct {
	HelloHoldtime *uint16                                                                        `path:"hello-holdtime" module:"srl_nokia-ldp"`
	HelloInterval *uint16                                                                        `path:"hello-interval" module:"srl_nokia-ldp"`
	Ipv4          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 `path:"ipv4" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/targeted/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 struct {
	Target map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target `path:"target" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) IsYANGGoStruct() {
}

// NewTarget creates a new entry in the Target list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) NewTarget(
	RemoteAddress string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Target[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Target", key)
	}

	t.Target[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target{
		RemoteAddress: &RemoteAddress,
	}

	return t.Target[key], nil
}

// RenameTarget renames an entry in the list Target within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) RenameTarget(oldK, newK string) error {
	if _, ok := t.Target[newK]; ok {
		return fmt.Errorf("key %v already exists in Target", newK)
	}

	e, ok := t.Target[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Target", oldK)
	}
	e.RemoteAddress = &newK

	t.Target[newK] = e
	delete(t.Target, oldK)
	return nil
}

// GetOrCreateTarget retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) GetOrCreateTarget(
	RemoteAddress string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target {
	key := RemoteAddress

	if v, ok := t.Target[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTarget(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTarget got unexpected error: %v", err))
	}
	return v
}

// GetTarget retrieves the value with the specified key from
// the Target map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) GetTarget(
	RemoteAddress string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target {
	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Target[key]; ok {
		return lm
	}
	return nil
}

// DeleteTarget deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) DeleteTarget(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Target, key)
}

// AppendTarget appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target struct to the
// list Target of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) AppendTarget(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target,
) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Target == nil {
		t.Target = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target)
	}

	if _, ok := t.Target[key]; ok {
		return fmt.Errorf("duplicate key for list Target %v", key)
	}

	t.Target[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Target {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target represents the /srl_nokia-network-instance/network-instance/protocols/ldp/discovery/targeted/ipv4/target YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target struct {
	AdminState             E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-ldp"`
	EnableBfd              *bool                       `path:"enable-bfd" module:"srl_nokia-ldp"`
	HelloHoldtime          *uint16                     `path:"hello-holdtime" module:"srl_nokia-ldp"`
	HelloInterval          *uint16                     `path:"hello-interval" module:"srl_nokia-ldp"`
	OverrideInterfaceLsrId *string                     `path:"override-interface-lsr-id" module:"srl_nokia-ldp"`
	RemoteAddress          *string                     `path:"remote-address" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetHelloHoldtime retrieves the value of the leaf HelloHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloHoldtime is set, it can
// safely use t.GetHelloHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) GetHelloHoldtime() uint16 {
	if t == nil || t.HelloHoldtime == nil {
		return 0
	}
	return *t.HelloHoldtime
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) GetHelloInterval() uint16 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// GetOverrideInterfaceLsrId retrieves the value of the leaf OverrideInterfaceLsrId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideInterfaceLsrId is set, it can
// safely use t.GetOverrideInterfaceLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideInterfaceLsrId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) GetOverrideInterfaceLsrId() string {
	if t == nil || t.OverrideInterfaceLsrId == nil {
		return ""
	}
	return *t.OverrideInterfaceLsrId
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Discovery_Targeted_Ipv4_Target) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel represents the /srl_nokia-network-instance/network-instance/protocols/ldp/entropy-label YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel struct {
	AdvertiseCapability *bool `path:"advertise-capability" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) IsYANGGoStruct() {}

// GetAdvertiseCapability retrieves the value of the leaf AdvertiseCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseCapability is set, it can
// safely use t.GetAdvertiseCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) GetAdvertiseCapability() bool {
	if t == nil || t.AdvertiseCapability == nil {
		return false
	}
	return *t.AdvertiseCapability
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseCapability == nil {
		var v bool = false
		t.AdvertiseCapability = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_EntropyLabel) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/ldp/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart struct {
	HelperEnable     *bool   `path:"helper-enable" module:"srl_nokia-ldp"`
	MaxReconnectTime *uint16 `path:"max-reconnect-time" module:"srl_nokia-ldp"`
	MaxRecoveryTime  *uint16 `path:"max-recovery-time" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) IsYANGGoStruct() {}

// GetHelperEnable retrieves the value of the leaf HelperEnable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperEnable is set, it can
// safely use t.GetHelperEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperEnable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) GetHelperEnable() bool {
	if t == nil || t.HelperEnable == nil {
		return false
	}
	return *t.HelperEnable
}

// GetMaxReconnectTime retrieves the value of the leaf MaxReconnectTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReconnectTime is set, it can
// safely use t.GetMaxReconnectTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReconnectTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) GetMaxReconnectTime() uint16 {
	if t == nil || t.MaxReconnectTime == nil {
		return 120
	}
	return *t.MaxReconnectTime
}

// GetMaxRecoveryTime retrieves the value of the leaf MaxRecoveryTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRecoveryTime is set, it can
// safely use t.GetMaxRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRecoveryTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) GetMaxRecoveryTime() uint16 {
	if t == nil || t.MaxRecoveryTime == nil {
		return 120
	}
	return *t.MaxRecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperEnable == nil {
		var v bool = false
		t.HelperEnable = &v
	}
	if t.MaxReconnectTime == nil {
		var v uint16 = 120
		t.MaxReconnectTime = &v
	}
	if t.MaxRecoveryTime == nil {
		var v uint16 = 120
		t.MaxRecoveryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/ldp/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 struct {
	FecResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution `path:"fec-resolution" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) IsYANGGoStruct() {}

// GetOrCreateFecResolution retrieves the value of the FecResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) GetOrCreateFecResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution {
	if t.FecResolution != nil {
		return t.FecResolution
	}
	t.FecResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution{}
	return t.FecResolution
}

// GetFecResolution returns the value of the FecResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4. If the receiver or the field FecResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) GetFecResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution {
	if t != nil && t.FecResolution != nil {
		return t.FecResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FecResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution represents the /srl_nokia-network-instance/network-instance/protocols/ldp/ipv4/fec-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution struct {
	LongestPrefix *bool `path:"longest-prefix" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) IsYANGGoStruct() {}

// GetLongestPrefix retrieves the value of the leaf LongestPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LongestPrefix is set, it can
// safely use t.GetLongestPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LongestPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) GetLongestPrefix() bool {
	if t == nil || t.LongestPrefix == nil {
		return false
	}
	return *t.LongestPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LongestPrefix == nil {
		var v bool = false
		t.LongestPrefix = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Ipv4_FecResolution) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate represents the /srl_nokia-network-instance/network-instance/protocols/ldp/loopfree-alternate YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_LoopfreeAlternate) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/ldp/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath struct {
	MaxPaths *uint8 `path:"max-paths" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) IsYANGGoStruct() {}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) GetMaxPaths() uint8 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPaths == nil {
		var v uint8 = 1
		t.MaxPaths = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Multipath) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers struct {
	Peer                     map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer `path:"peer" module:"srl_nokia-ldp"`
	SessionKeepaliveHoldtime *uint16                                                                                                                                    `path:"session-keepalive-holdtime" module:"srl_nokia-ldp"`
	SessionKeepaliveInterval *uint16                                                                                                                                    `path:"session-keepalive-interval" module:"srl_nokia-ldp"`
	TraceOptions             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions                                                                  `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key represents the key for list Peer of element /srl_nokia-network-instance/network-instance/protocols/ldp/peers.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key struct {
	LsrId        string `path:"lsr-id"`
	LabelSpaceId uint16 `path:"label-space-id"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"lsr-id":         t.LsrId,
		"label-space-id": t.LabelSpaceId,
	}, nil
}

// NewPeer creates a new entry in the Peer list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) NewPeer(LsrId string,
	LabelSpaceId uint16,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer{
		LsrId:        &LsrId,
		LabelSpaceId: &LabelSpaceId,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) RenamePeer(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key,
) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.LsrId = &newK.LsrId
	e.LabelSpaceId = &newK.LabelSpaceId

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetOrCreatePeer(LsrId string,
	LabelSpaceId uint16,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(LsrId, LabelSpaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetPeer(LsrId string,
	LabelSpaceId uint16,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) DeletePeer(LsrId string, LabelSpaceId uint16) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        LsrId,
		LabelSpaceId: LabelSpaceId,
	}

	delete(t.Peer, key)
}

// AppendPeer appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer struct to the
// list Peer of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) AppendPeer(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer,
) error {
	if v.LsrId == nil {
		return fmt.Errorf("invalid nil key for LsrId")
	}

	if v.LabelSpaceId == nil {
		return fmt.Errorf("invalid nil key for LabelSpaceId")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key{
		LsrId:        *v.LsrId,
		LabelSpaceId: *v.LabelSpaceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetSessionKeepaliveHoldtime retrieves the value of the leaf SessionKeepaliveHoldtime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionKeepaliveHoldtime is set, it can
// safely use t.GetSessionKeepaliveHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionKeepaliveHoldtime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetSessionKeepaliveHoldtime() uint16 {
	if t == nil || t.SessionKeepaliveHoldtime == nil {
		return 180
	}
	return *t.SessionKeepaliveHoldtime
}

// GetSessionKeepaliveInterval retrieves the value of the leaf SessionKeepaliveInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionKeepaliveInterval is set, it can
// safely use t.GetSessionKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionKeepaliveInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) GetSessionKeepaliveInterval() uint16 {
	if t == nil || t.SessionKeepaliveInterval == nil {
		return 60
	}
	return *t.SessionKeepaliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SessionKeepaliveHoldtime == nil {
		var v uint16 = 180
		t.SessionKeepaliveHoldtime = &v
	}
	if t.SessionKeepaliveInterval == nil {
		var v uint16 = 60
		t.SessionKeepaliveInterval = &v
	}
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/peer YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer struct {
	ExportPrefixPolicy *string                                                                        `path:"export-prefix-policy" module:"srl_nokia-ldp"`
	FecLimit           *uint32                                                                        `path:"fec-limit" module:"srl_nokia-ldp"`
	ImportPrefixPolicy *string                                                                        `path:"import-prefix-policy" module:"srl_nokia-ldp"`
	LabelSpaceId       *uint16                                                                        `path:"label-space-id" module:"srl_nokia-ldp"`
	LsrId              *string                                                                        `path:"lsr-id" module:"srl_nokia-ldp"`
	TcpTransport       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport `path:"tcp-transport" module:"srl_nokia-ldp"`
	TraceOptions       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions `path:"trace-options" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) IsYANGGoStruct() {}

// GetOrCreateTcpTransport retrieves the value of the TcpTransport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetOrCreateTcpTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport {
	if t.TcpTransport != nil {
		return t.TcpTransport
	}
	t.TcpTransport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport{}
	return t.TcpTransport
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions{}
	return t.TraceOptions
}

// GetTcpTransport returns the value of the TcpTransport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer. If the receiver or the field TcpTransport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetTcpTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport {
	if t != nil && t.TcpTransport != nil {
		return t.TcpTransport
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetExportPrefixPolicy retrieves the value of the leaf ExportPrefixPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPrefixPolicy is set, it can
// safely use t.GetExportPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPrefixPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetExportPrefixPolicy() string {
	if t == nil || t.ExportPrefixPolicy == nil {
		return ""
	}
	return *t.ExportPrefixPolicy
}

// GetFecLimit retrieves the value of the leaf FecLimit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecLimit is set, it can
// safely use t.GetFecLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetFecLimit() uint32 {
	if t == nil || t.FecLimit == nil {
		return 0
	}
	return *t.FecLimit
}

// GetImportPrefixPolicy retrieves the value of the leaf ImportPrefixPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPrefixPolicy is set, it can
// safely use t.GetImportPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPrefixPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetImportPrefixPolicy() string {
	if t == nil || t.ImportPrefixPolicy == nil {
		return ""
	}
	return *t.ImportPrefixPolicy
}

// GetLabelSpaceId retrieves the value of the leaf LabelSpaceId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelSpaceId is set, it can
// safely use t.GetLabelSpaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelSpaceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetLabelSpaceId() uint16 {
	if t == nil || t.LabelSpaceId == nil {
		return 0
	}
	return *t.LabelSpaceId
}

// GetLsrId retrieves the value of the leaf LsrId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrId is set, it can
// safely use t.GetLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) GetLsrId() string {
	if t == nil || t.LsrId == nil {
		return ""
	}
	return *t.LsrId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FecLimit == nil {
		var v uint32 = 0
		t.FecLimit = &v
	}
	t.TcpTransport.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LabelSpaceId == nil {
		return nil, fmt.Errorf("nil value for key LabelSpaceId")
	}

	if t.LsrId == nil {
		return nil, fmt.Errorf("nil value for key LsrId")
	}

	return map[string]interface{}{
		"label-space-id": *t.LabelSpaceId,
		"lsr-id":         *t.LsrId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/peer/tcp-transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TcpTransport) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/peer/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions struct {
	Trace []E_SrlNokiaLdp_SessionTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) GetTrace() []E_SrlNokiaLdp_SessionTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_Peer_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ldp/peers/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions struct {
	Trace []E_SrlNokiaLdp_SessionTraceOptionFlags `path:"trace" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) IsYANGGoStruct() {}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) GetTrace() []E_SrlNokiaLdp_SessionTraceOptionFlags {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_Peers_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec represents the /srl_nokia-network-instance/network-instance/protocols/ldp/static-fec YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec struct {
	FecPrefix *string `path:"fec-prefix" module:"srl_nokia-ldp"`
	Swap      *bool   `path:"swap" module:"srl_nokia-ldp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) IsYANGGoStruct() {}

// GetFecPrefix retrieves the value of the leaf FecPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecPrefix is set, it can
// safely use t.GetFecPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) GetFecPrefix() string {
	if t == nil || t.FecPrefix == nil {
		return ""
	}
	return *t.FecPrefix
}

// GetSwap retrieves the value of the leaf Swap from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Swap is set, it can
// safely use t.GetSwap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Swap == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) GetSwap() bool {
	if t == nil || t.Swap == nil {
		return false
	}
	return *t.Swap
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FecPrefix == nil {
		return nil, fmt.Errorf("nil value for key FecPrefix")
	}

	return map[string]interface{}{
		"fec-prefix": *t.FecPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp_StaticFec) ΛBelongingModule() string {
	return "srl_nokia-ldp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux represents the /srl_nokia-network-instance/network-instance/protocols/linux YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux struct {
	ExportNeighbors *bool `path:"export-neighbors" module:"srl_nokia-linux"`
	ExportRoutes    *bool `path:"export-routes" module:"srl_nokia-linux"`
	ImportRoutes    *bool `path:"import-routes" module:"srl_nokia-linux"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) IsYANGGoStruct() {}

// GetExportNeighbors retrieves the value of the leaf ExportNeighbors from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportNeighbors is set, it can
// safely use t.GetExportNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportNeighbors == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) GetExportNeighbors() bool {
	if t == nil || t.ExportNeighbors == nil {
		return true
	}
	return *t.ExportNeighbors
}

// GetExportRoutes retrieves the value of the leaf ExportRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRoutes is set, it can
// safely use t.GetExportRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) GetExportRoutes() bool {
	if t == nil || t.ExportRoutes == nil {
		return false
	}
	return *t.ExportRoutes
}

// GetImportRoutes retrieves the value of the leaf ImportRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRoutes is set, it can
// safely use t.GetImportRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) GetImportRoutes() bool {
	if t == nil || t.ImportRoutes == nil {
		return false
	}
	return *t.ImportRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExportNeighbors == nil {
		var v bool = true
		t.ExportNeighbors = &v
	}
	if t.ExportRoutes == nil {
		var v bool = false
		t.ExportRoutes = &v
	}
	if t.ImportRoutes == nil {
		var v bool = false
		t.ImportRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) ΛBelongingModule() string {
	return "srl_nokia-linux"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld represents the /srl_nokia-network-instance/network-instance/protocols/mld YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                 `path:"admin-state" module:"srl_nokia-mld"`
	Interface               map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface `path:"interface" module:"srl_nokia-mld"`
	QueryInterval           *uint32                                                                     `path:"query-interval" module:"srl_nokia-mld"`
	QueryLastMemberInterval *uint32                                                                     `path:"query-last-member-interval" module:"srl_nokia-mld"`
	QueryResponseInterval   *uint32                                                                     `path:"query-response-interval" module:"srl_nokia-mld"`
	RobustCount             *uint32                                                                     `path:"robust-count" module:"srl_nokia-mld"`
	Ssm                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm                  `path:"ssm" module:"srl_nokia-mld"`
	TraceOptions            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions         `path:"trace-options" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) NewInterface(InterfaceName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetInterface(InterfaceName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm{}
	return t.Ssm
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions{}
	return t.TraceOptions
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.Ssm.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping struct {
	AdminState          E_SrlNokiaCommon_AdminState                                                         `path:"admin-state" module:"srl_nokia-mld-snooping"`
	Interface           map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface `path:"interface" module:"srl_nokia-mld-snooping"`
	QueryInterval       *uint32                                                                             `path:"query-interval" module:"srl_nokia-mld-snooping"`
	QuerySourceAddress  *string                                                                             `path:"query-source-address" module:"srl_nokia-mld-snooping"`
	ReportSourceAddress *string                                                                             `path:"report-source-address" module:"srl_nokia-mld-snooping"`
	RobustCount         *uint32                                                                             `path:"robust-count" module:"srl_nokia-mld-snooping"`
	TraceOptions        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions         `path:"trace-options" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions{}
	return t.TraceOptions
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface struct {
	FastLeave                 *bool                                                                                           `path:"fast-leave" module:"srl_nokia-mld-snooping"`
	ImportPolicy              *string                                                                                         `path:"import-policy" module:"srl_nokia-mld-snooping"`
	InterfaceName             *string                                                                                         `path:"interface-name" module:"srl_nokia-mld-snooping"`
	MaximumNumberGroupSources *uint32                                                                                         `path:"maximum-number-group-sources" module:"srl_nokia-mld-snooping"`
	MaximumNumberGroups       *uint32                                                                                         `path:"maximum-number-groups" module:"srl_nokia-mld-snooping"`
	MaximumNumberSources      *uint32                                                                                         `path:"maximum-number-sources" module:"srl_nokia-mld-snooping"`
	MrouterPort               *bool                                                                                           `path:"mrouter-port" module:"srl_nokia-mld-snooping"`
	QueryInterval             *uint32                                                                                         `path:"query-interval" module:"srl_nokia-mld-snooping"`
	QueryLastMemberInterval   *uint32                                                                                         `path:"query-last-member-interval" module:"srl_nokia-mld-snooping"`
	QueryResponseInterval     *uint32                                                                                         `path:"query-response-interval" module:"srl_nokia-mld-snooping"`
	RobustCount               *uint32                                                                                         `path:"robust-count" module:"srl_nokia-mld-snooping"`
	RouterAlertCheck          *bool                                                                                           `path:"router-alert-check" module:"srl_nokia-mld-snooping"`
	SendQueries               *bool                                                                                           `path:"send-queries" module:"srl_nokia-mld-snooping"`
	StaticMembershipGroups    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-mld-snooping"`
	Version                   *uint8                                                                                          `path:"version" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) IsYANGGoStruct() {}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 0
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 2
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == nil {
		var v uint8 = 2
		t.Version = &v
	}
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group `path:"group" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) NewGroup(
	Group string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group)
	}

	key := Group

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group{
		Group: &Group,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Group = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) GetOrCreateGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group {
	key := Group

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Group)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) GetGroup(
	Group string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group {
	if t == nil {
		return nil
	}

	key := Group

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) DeleteGroup(Group string) {
	key := Group

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group,
) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key received for Group")
	}

	key := *v.Group

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface/static-membership-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct {
	Group  *string                                                                                                                 `path:"group" module:"srl_nokia-mld-snooping"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source `path:"source" module:"srl_nokia-mld-snooping"`
	Starg  YANGEmpty                                                                                                               `path:"starg" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroup retrieves the value of the leaf Group from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"group": *t.Group,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/interface/static-membership-groups/group/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_Interface_StaticMembershipGroups_Group_Source) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace `path:"trace" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace struct {
	Packet *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-mld-snooping" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct {
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-mld-snooping"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Modifier            `path:"modifier" module:"srl_nokia-mld-snooping"`
	SourceMac map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac `path:"source-mac" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSourceMac creates a new entry in the SourceMac list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) NewSourceMac(
	SourceMac string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	key := SourceMac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceMac", key)
	}

	t.SourceMac[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac{
		SourceMac: &SourceMac,
	}

	return t.SourceMac[key], nil
}

// RenameSourceMac renames an entry in the list SourceMac within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) RenameSourceMac(oldK, newK string) error {
	if _, ok := t.SourceMac[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceMac", newK)
	}

	e, ok := t.SourceMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceMac", oldK)
	}
	e.SourceMac = &newK

	t.SourceMac[newK] = e
	delete(t.SourceMac, oldK)
	return nil
}

// GetOrCreateSourceMac retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetOrCreateSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac {
	key := SourceMac

	if v, ok := t.SourceMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceMac(SourceMac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceMac got unexpected error: %v", err))
	}
	return v
}

// GetSourceMac retrieves the value with the specified key from
// the SourceMac map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetSourceMac(
	SourceMac string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac {
	if t == nil {
		return nil
	}

	key := SourceMac

	if lm, ok := t.SourceMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceMac deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) DeleteSourceMac(SourceMac string) {
	key := SourceMac

	delete(t.SourceMac, key)
}

// AppendSourceMac appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac struct to the
// list SourceMac of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) AppendSourceMac(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac,
) error {
	if v.SourceMac == nil {
		return fmt.Errorf("invalid nil key received for SourceMac")
	}

	key := *v.SourceMac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceMac == nil {
		t.SourceMac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac)
	}

	if _, ok := t.SourceMac[key]; ok {
		return fmt.Errorf("duplicate key for list SourceMac %v", key)
	}

	t.SourceMac[key] = v
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceMac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface struct {
	InterfaceName *string `path:"interface-name" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac represents the /srl_nokia-network-instance/network-instance/protocols/mld-snooping/trace-options/trace/packet/source-mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac struct {
	SourceMac *string `path:"source-mac" module:"srl_nokia-mld-snooping"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) IsYANGGoStruct() {
}

// GetSourceMac retrieves the value of the leaf SourceMac from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceMac == nil {
		return nil, fmt.Errorf("nil value for key SourceMac")
	}

	return map[string]interface{}{
		"source-mac": *t.SourceMac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping_TraceOptions_Trace_Packet_SourceMac) ΛBelongingModule() string {
	return "srl_nokia-mld-snooping"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface struct {
	AdminState                E_SrlNokiaCommon_AdminState                                                             `path:"admin-state" module:"srl_nokia-mld"`
	ImportPolicy              *string                                                                                 `path:"import-policy" module:"srl_nokia-mld"`
	InterfaceName             *string                                                                                 `path:"interface-name" module:"srl_nokia-mld"`
	MaximumNumberGroupSources *uint32                                                                                 `path:"maximum-number-group-sources" module:"srl_nokia-mld"`
	MaximumNumberGroups       *uint32                                                                                 `path:"maximum-number-groups" module:"srl_nokia-mld"`
	MaximumNumberSources      *uint32                                                                                 `path:"maximum-number-sources" module:"srl_nokia-mld"`
	QueryInterval             *uint32                                                                                 `path:"query-interval" module:"srl_nokia-mld"`
	QueryLastMemberInterval   *uint32                                                                                 `path:"query-last-member-interval" module:"srl_nokia-mld"`
	QueryResponseInterval     *uint32                                                                                 `path:"query-response-interval" module:"srl_nokia-mld"`
	RouterAlertCheck          *bool                                                                                   `path:"router-alert-check" module:"srl_nokia-mld"`
	Ssm                       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm                    `path:"ssm" module:"srl_nokia-mld"`
	StaticMembershipGroups    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups `path:"static-membership-groups" module:"srl_nokia-mld"`
	Version                   *uint8                                                                                  `path:"version" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) IsYANGGoStruct() {}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm{}
	return t.Ssm
}

// GetOrCreateStaticMembershipGroups retrieves the value of the StaticMembershipGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetOrCreateStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups {
	if t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	t.StaticMembershipGroups = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups{}
	return t.StaticMembershipGroups
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetStaticMembershipGroups returns the value of the StaticMembershipGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface. If the receiver or the field StaticMembershipGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetStaticMembershipGroups() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups {
	if t != nil && t.StaticMembershipGroups != nil {
		return t.StaticMembershipGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 2
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.Version == nil {
		var v uint8 = 2
		t.Version = &v
	}
	t.Ssm.PopulateDefaults()
	t.StaticMembershipGroups.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings `path:"mappings" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"start": t.Start,
		"end":   t.End,
	}, nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                                    `path:"end" module:"srl_nokia-mld"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-mld"`
	Start  *string                                                                                                    `path:"start" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange `path:"group-range" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) IsYANGGoStruct() {
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"start": t.Start,
		"end":   t.End,
	}, nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct {
	End    *string                                                                                                              `path:"end" module:"srl_nokia-mld"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source `path:"source" module:"srl_nokia-mld"`
	Starg  YANGEmpty                                                                                                            `path:"starg" module:"srl_nokia-mld"`
	Start  *string                                                                                                              `path:"start" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld/interface/static-membership-groups/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Interface_StaticMembershipGroups_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm struct {
	Mappings *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings `path:"mappings" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) IsYANGGoStruct() {}

// GetOrCreateMappings retrieves the value of the Mappings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) GetOrCreateMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings {
	if t.Mappings != nil {
		return t.Mappings
	}
	t.Mappings = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings{}
	return t.Mappings
}

// GetMappings returns the value of the Mappings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm. If the receiver or the field Mappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) GetMappings() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings {
	if t != nil && t.Mappings != nil {
		return t.Mappings
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mappings.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings struct {
	GroupRange map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange `path:"group-range" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key represents the key for list GroupRange of element /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"start": t.Start,
		"end":   t.End,
	}, nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) NewGroupRange(
	Start string, End string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) RenameGroupRange(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key,
) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) GetOrCreateGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) GetGroupRange(
	Start string, End string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) DeleteGroupRange(Start string, End string) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange,
) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct {
	End    *string                                                                                          `path:"end" module:"srl_nokia-mld"`
	Source map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source `path:"source" module:"srl_nokia-mld"`
	Start  *string                                                                                          `path:"start" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) NewSource(
	Source string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source{
		Source: &Source,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Source = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetOrCreateSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source {
	key := Source

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetSource(
	Source string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source {
	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) DeleteSource(Source string) {
	key := Source

	delete(t.Source, key)
}

// AppendSource appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source struct to the
// list Source of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) AppendSource(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source,
) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source represents the /srl_nokia-network-instance/network-instance/protocols/mld/ssm/mappings/group-range/source YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source struct {
	Source *string `path:"source" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) IsYANGGoStruct() {
}

// GetSource retrieves the value of the leaf Source from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_Ssm_Mappings_GroupRange_Source) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace `path:"trace" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface `path:"interface" module:"srl_nokia-mld" yangPresence:"true"`
	Packet    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet    `path:"packet" module:"srl_nokia-mld" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) IsYANGGoStruct() {}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface{}
	return t.Interface
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interface.PopulateDefaults()
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-mld"`
	Name *string   `path:"name" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-mld" yangPresence:"true"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-mld"`
	Type      E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface{}
	return t.Interface
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Modifier == 0 {
		t.Modifier = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	t.Interface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/mld/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-mld"`
	Name *string   `path:"name" module:"srl_nokia-mld"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-mld"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf represents the /srl_nokia-network-instance/network-instance/protocols/ospf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf struct {
	Instance map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance `path:"instance" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) NewInstance(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance{
		Name: &Name,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) RenameInstance(oldK, newK string) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.Name = &newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) GetOrCreateInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance {
	key := Name

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) GetInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) DeleteInstance(Name string) {
	key := Name

	delete(t.Instance, key)
}

// AppendInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct to the
// list Instance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) AppendInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct {
	AddressFamily             E_SrlNokiaOspfTypes_Ospfv3AddressFamily                                                     `path:"address-family" module:"srl_nokia-ospf"`
	AdminState                E_SrlNokiaCommon_AdminState                                                                 `path:"admin-state" module:"srl_nokia-ospf"`
	AdvertiseRouterCapability E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_AdvertiseRouterCapability `path:"advertise-router-capability" module:"srl_nokia-ospf"`
	Area                      map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area            `path:"area" module:"srl_nokia-ospf"`
	Asbr                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr                       `path:"asbr" module:"srl_nokia-ospf" yangPresence:"true"`
	ExportLimit               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit                `path:"export-limit" module:"srl_nokia-ospf" yangPresence:"true"`
	ExportPolicy              *string                                                                                     `path:"export-policy" module:"srl_nokia-ospf"`
	ExternalDbOverflow        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow         `path:"external-db-overflow" module:"srl_nokia-ospf" yangPresence:"true"`
	ExternalPreference        *uint8                                                                                      `path:"external-preference" module:"srl_nokia-ospf"`
	GracefulRestart           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart            `path:"graceful-restart" module:"srl_nokia-ospf"`
	InstanceId                *uint32                                                                                     `path:"instance-id" module:"srl_nokia-ospf"`
	LdpSynchronization        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization         `path:"ldp-synchronization" module:"srl_nokia-ospf" yangPresence:"true"`
	MaxEcmpPaths              *uint8                                                                                      `path:"max-ecmp-paths" module:"srl_nokia-ospf"`
	Name                      *string                                                                                     `path:"name" module:"srl_nokia-ospf"`
	Overload                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload                   `path:"overload" module:"srl_nokia-ospf"`
	Preference                *uint8                                                                                      `path:"preference" module:"srl_nokia-ospf"`
	ReferenceBandwidth        *uint64                                                                                     `path:"reference-bandwidth" module:"srl_nokia-ospf"`
	RouterId                  *string                                                                                     `path:"router-id" module:"srl_nokia-ospf"`
	TeDatabaseInstall         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall          `path:"te-database-install" module:"srl_nokia-ospf" yangPresence:"true"`
	Timers                    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers                     `path:"timers" module:"srl_nokia-ospf"`
	TraceOptions              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions               `path:"trace-options" module:"srl_nokia-ospf"`
	TrafficEngineering        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering         `path:"traffic-engineering" module:"srl_nokia-ospf"`
	Version                   E_SrlNokiaOspfTypes_OspfVersion                                                             `path:"version" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) IsYANGGoStruct() {}

// NewArea creates a new entry in the Area list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) NewArea(AreaId string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area)
	}

	key := AreaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area{
		AreaId: &AreaId,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) RenameArea(oldK, newK string) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.AreaId = &newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateArea(
	AreaId string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area {
	key := AreaId

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(AreaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetArea(AreaId string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area {
	if t == nil {
		return nil
	}

	key := AreaId

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) DeleteArea(AreaId string) {
	key := AreaId

	delete(t.Area, key)
}

// AppendArea appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct to the
// list Area of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) AppendArea(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area,
) error {
	if v.AreaId == nil {
		return fmt.Errorf("invalid nil key received for AreaId")
	}

	key := *v.AreaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// GetOrCreateAsbr retrieves the value of the Asbr field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateAsbr() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr {
	if t.Asbr != nil {
		return t.Asbr
	}
	t.Asbr = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr{}
	return t.Asbr
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateExportLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateExternalDbOverflow retrieves the value of the ExternalDbOverflow field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateExternalDbOverflow() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow {
	if t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	t.ExternalDbOverflow = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow{}
	return t.ExternalDbOverflow
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload{}
	return t.Overload
}

// GetOrCreateTeDatabaseInstall retrieves the value of the TeDatabaseInstall field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall {
	if t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	t.TeDatabaseInstall = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall{}
	return t.TeDatabaseInstall
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTrafficEngineering retrieves the value of the TrafficEngineering field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOrCreateTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering {
	if t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	t.TrafficEngineering = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering{}
	return t.TrafficEngineering
}

// GetAsbr returns the value of the Asbr struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field Asbr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAsbr() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr {
	if t != nil && t.Asbr != nil {
		return t.Asbr
	}
	return nil
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExportLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetExternalDbOverflow returns the value of the ExternalDbOverflow struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field ExternalDbOverflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExternalDbOverflow() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow {
	if t != nil && t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetTeDatabaseInstall returns the value of the TeDatabaseInstall struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field TeDatabaseInstall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall {
	if t != nil && t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTrafficEngineering returns the value of the TrafficEngineering struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance. If the receiver or the field TrafficEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering {
	if t != nil && t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	return nil
}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAddressFamily() E_SrlNokiaOspfTypes_Ospfv3AddressFamily {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetAdvertiseRouterCapability() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_AdvertiseRouterCapability {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return 0
	}
	return t.AdvertiseRouterCapability
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetExternalPreference() uint8 {
	if t == nil || t.ExternalPreference == nil {
		return 150
	}
	return *t.ExternalPreference
}

// GetInstanceId retrieves the value of the leaf InstanceId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetMaxEcmpPaths retrieves the value of the leaf MaxEcmpPaths from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpPaths is set, it can
// safely use t.GetMaxEcmpPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetMaxEcmpPaths() uint8 {
	if t == nil || t.MaxEcmpPaths == nil {
		return 1
	}
	return *t.MaxEcmpPaths
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetPreference() uint8 {
	if t == nil || t.Preference == nil {
		return 10
	}
	return *t.Preference
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 400000000
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetVersion retrieves the value of the leaf Version from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) GetVersion() E_SrlNokiaOspfTypes_OspfVersion {
	if t == nil || t.Version == 0 {
		return 0
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.ExternalPreference == nil {
		var v uint8 = 150
		t.ExternalPreference = &v
	}
	if t.MaxEcmpPaths == nil {
		var v uint8 = 1
		t.MaxEcmpPaths = &v
	}
	if t.Preference == nil {
		var v uint8 = 10
		t.Preference = &v
	}
	if t.ReferenceBandwidth == nil {
		var v uint64 = 400000000
		t.ReferenceBandwidth = &v
	}
	t.Asbr.PopulateDefaults()
	t.ExportLimit.PopulateDefaults()
	t.ExternalDbOverflow.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.TeDatabaseInstall.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.TrafficEngineering.PopulateDefaults()
	for _, e := range t.Area {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct {
	AdvertiseRouterCapability *bool                                                                                      `path:"advertise-router-capability" module:"srl_nokia-ospf"`
	AreaId                    *string                                                                                    `path:"area-id" module:"srl_nokia-ospf"`
	AreaRange                 map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange `path:"area-range" module:"srl_nokia-ospf"`
	BgpLsExclude              *bool                                                                                      `path:"bgp-ls-exclude" module:"srl_nokia-ospf"`
	BlackholeAggregate        *bool                                                                                      `path:"blackhole-aggregate" module:"srl_nokia-ospf"`
	ExportPolicy              *string                                                                                    `path:"export-policy" module:"srl_nokia-ospf"`
	Interface                 map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface `path:"interface" module:"srl_nokia-ospf"`
	Nssa                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa                 `path:"nssa" module:"srl_nokia-ospf" yangPresence:"true"`
	Stub                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub                 `path:"stub" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) NewAreaRange(
	IpPrefixMask string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange {
	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange {
	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange struct to the
// list AreaRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) AppendAreaRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange,
) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateNssa retrieves the value of the Nssa field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateNssa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa {
	if t.Nssa != nil {
		return t.Nssa
	}
	t.Nssa = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa{}
	return t.Nssa
}

// GetOrCreateStub retrieves the value of the Stub field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetOrCreateStub() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub {
	if t.Stub != nil {
		return t.Stub
	}
	t.Stub = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub{}
	return t.Stub
}

// GetNssa returns the value of the Nssa struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver or the field Nssa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetNssa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa {
	if t != nil && t.Nssa != nil {
		return t.Nssa
	}
	return nil
}

// GetStub returns the value of the Stub struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area. If the receiver or the field Stub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetStub() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub {
	if t != nil && t.Stub != nil {
		return t.Stub
	}
	return nil
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAreaId retrieves the value of the leaf AreaId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetBgpLsExclude retrieves the value of the leaf BgpLsExclude from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsExclude is set, it can
// safely use t.GetBgpLsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsExclude == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetBgpLsExclude() bool {
	if t == nil || t.BgpLsExclude == nil {
		return false
	}
	return *t.BgpLsExclude
}

// GetBlackholeAggregate retrieves the value of the leaf BlackholeAggregate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackholeAggregate is set, it can
// safely use t.GetBlackholeAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackholeAggregate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetBlackholeAggregate() bool {
	if t == nil || t.BlackholeAggregate == nil {
		return true
	}
	return *t.BlackholeAggregate
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.BgpLsExclude == nil {
		var v bool = false
		t.BgpLsExclude = &v
	}
	if t.BlackholeAggregate == nil {
		var v bool = true
		t.BlackholeAggregate = &v
	}
	t.Nssa.PopulateDefaults()
	t.Stub.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AreaId == nil {
		return nil, fmt.Errorf("nil value for key AreaId")
	}

	return map[string]interface{}{
		"area-id": *t.AreaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/area-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"srl_nokia-ospf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_AreaRange) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface struct {
	AdminState                E_SrlNokiaCommon_AdminState                                                                        `path:"admin-state" module:"srl_nokia-ospf"`
	AdvertiseRouterCapability *bool                                                                                              `path:"advertise-router-capability" module:"srl_nokia-ospf"`
	AdvertiseSubnet           *bool                                                                                              `path:"advertise-subnet" module:"srl_nokia-ospf"`
	Authentication            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication     `path:"authentication" module:"srl_nokia-ospf"`
	DeadInterval              *uint32                                                                                            `path:"dead-interval" module:"srl_nokia-ospf"`
	FailureDetection          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection   `path:"failure-detection" module:"srl_nokia-ospf"`
	HelloInterval             *uint32                                                                                            `path:"hello-interval" module:"srl_nokia-ospf"`
	InterfaceName             *string                                                                                            `path:"interface-name" module:"srl_nokia-ospf"`
	InterfaceType             E_SrlNokiaOspfTypes_InterfaceType                                                                  `path:"interface-type" module:"srl_nokia-ospf"`
	LdpSynchronization        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization `path:"ldp-synchronization" module:"srl_nokia-ospf"`
	LsaFilterOut              E_SrlNokiaOspfTypes_LsaFilterOut                                                                   `path:"lsa-filter-out" module:"srl_nokia-ospf"`
	Metric                    *uint16                                                                                            `path:"metric" module:"srl_nokia-ospf"`
	Mtu                       *uint32                                                                                            `path:"mtu" module:"srl_nokia-ospf"`
	Passive                   *bool                                                                                              `path:"passive" module:"srl_nokia-ospf"`
	Priority                  *uint16                                                                                            `path:"priority" module:"srl_nokia-ospf"`
	RetransmitInterval        *uint32                                                                                            `path:"retransmit-interval" module:"srl_nokia-ospf"`
	TraceOptions              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions       `path:"trace-options" module:"srl_nokia-ospf"`
	TransitDelay              *uint32                                                                                            `path:"transit-delay" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions{}
	return t.TraceOptions
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAdvertiseSubnet retrieves the value of the leaf AdvertiseSubnet from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseSubnet is set, it can
// safely use t.GetAdvertiseSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseSubnet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetAdvertiseSubnet() bool {
	if t == nil || t.AdvertiseSubnet == nil {
		return true
	}
	return *t.AdvertiseSubnet
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 40
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetInterfaceType() E_SrlNokiaOspfTypes_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetLsaFilterOut() E_SrlNokiaOspfTypes_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return SrlNokiaOspfTypes_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPriority retrieves the value of the leaf Priority from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.AdvertiseSubnet == nil {
		var v bool = true
		t.AdvertiseSubnet = &v
	}
	if t.DeadInterval == nil {
		var v uint32 = 40
		t.DeadInterval = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = SrlNokiaOspfTypes_LsaFilterOut_none
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.Authentication.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) IsYANGGoStruct() {
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_Authentication) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection struct {
	EnableBfd *bool `path:"enable-bfd" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) IsYANGGoStruct() {
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}
