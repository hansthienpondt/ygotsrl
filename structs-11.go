/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route represents the /srl_nokia-network-instance/network-instance/static-routes/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route struct {
	AdminState   E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-static-routes"`
	Metric       *uint32                     `path:"metric" module:"srl_nokia-static-routes"`
	NextHopGroup *string                     `path:"next-hop-group" module:"srl_nokia-static-routes"`
	Preference   *uint8                      `path:"preference" module:"srl_nokia-static-routes"`
	Prefix       *string                     `path:"prefix" module:"srl_nokia-static-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetMetric retrieves the value of the leaf Metric from the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) GetNextHopGroup() string {
	if t == nil || t.NextHopGroup == nil {
		return ""
	}
	return *t.NextHopGroup
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) GetPreference() uint8 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint8 = 5
		t.Preference = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route.
func (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) ΛBelongingModule() string {
	return "srl_nokia-static-routes"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering represents the /srl_nokia-network-instance/network-instance/traffic-engineering YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering struct {
	AdminGroups          *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups          `path:"admin-groups" module:"srl_nokia-traffic-engineering"`
	AutonomousSystem     *uint32                                                                          `path:"autonomous-system" module:"srl_nokia-traffic-engineering"`
	Interface            map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface `path:"interface" module:"srl_nokia-traffic-engineering"`
	Ipv4TeRouterId       *string                                                                          `path:"ipv4-te-router-id" module:"srl_nokia-traffic-engineering"`
	Ipv6TeRouterId       *string                                                                          `path:"ipv6-te-router-id" module:"srl_nokia-traffic-engineering"`
	Pcep                 *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep                 `path:"pcep" module:"srl_nokia-pcep" yangPresence:"true"`
	SharedRiskLinkGroups *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups `path:"shared-risk-link-groups" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAdminGroups retrieves the value of the AdminGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetOrCreateAdminGroups() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups {
	if t.AdminGroups != nil {
		return t.AdminGroups
	}
	t.AdminGroups = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups{}
	return t.AdminGroups
}

// GetOrCreatePcep retrieves the value of the Pcep field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetOrCreatePcep() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep {
	if t.Pcep != nil {
		return t.Pcep
	}
	t.Pcep = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep{}
	return t.Pcep
}

// GetOrCreateSharedRiskLinkGroups retrieves the value of the SharedRiskLinkGroups field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetOrCreateSharedRiskLinkGroups() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups {
	if t.SharedRiskLinkGroups != nil {
		return t.SharedRiskLinkGroups
	}
	t.SharedRiskLinkGroups = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups{}
	return t.SharedRiskLinkGroups
}

// GetAdminGroups returns the value of the AdminGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If the receiver or the field AdminGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetAdminGroups() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups {
	if t != nil && t.AdminGroups != nil {
		return t.AdminGroups
	}
	return nil
}

// GetPcep returns the value of the Pcep struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If the receiver or the field Pcep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetPcep() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep {
	if t != nil && t.Pcep != nil {
		return t.Pcep
	}
	return nil
}

// GetSharedRiskLinkGroups returns the value of the SharedRiskLinkGroups struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering. If the receiver or the field SharedRiskLinkGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetSharedRiskLinkGroups() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups {
	if t != nil && t.SharedRiskLinkGroups != nil {
		return t.SharedRiskLinkGroups
	}
	return nil
}

// GetAutonomousSystem retrieves the value of the leaf AutonomousSystem from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystem is set, it can
// safely use t.GetAutonomousSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystem == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetAutonomousSystem() uint32 {
	if t == nil || t.AutonomousSystem == nil {
		return 0
	}
	return *t.AutonomousSystem
}

// GetIpv4TeRouterId retrieves the value of the leaf Ipv4TeRouterId from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4TeRouterId is set, it can
// safely use t.GetIpv4TeRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4TeRouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetIpv4TeRouterId() string {
	if t == nil || t.Ipv4TeRouterId == nil {
		return ""
	}
	return *t.Ipv4TeRouterId
}

// GetIpv6TeRouterId retrieves the value of the leaf Ipv6TeRouterId from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6TeRouterId is set, it can
// safely use t.GetIpv6TeRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6TeRouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) GetIpv6TeRouterId() string {
	if t == nil || t.Ipv6TeRouterId == nil {
		return ""
	}
	return *t.Ipv6TeRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdminGroups.PopulateDefaults()
	t.Pcep.PopulateDefaults()
	t.SharedRiskLinkGroups.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies struct {
	BindingSid    *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid        `path:"binding-sid" module:"srl_nokia-te-policies"`
	ExplicitPaths *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths     `path:"explicit-paths" module:"srl_nokia-te-policies"`
	Policy        map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy `path:"policy" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) NewPolicy(
	PolicyName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy{
		PolicyName: &PolicyName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) GetOrCreatePolicy(
	PolicyName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy {
	key := PolicyName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) GetPolicy(
	PolicyName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy {
	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) DeletePolicy(PolicyName string) {
	key := PolicyName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy struct to the
// list Policy of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) AppendPolicy(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy,
) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// GetOrCreateBindingSid retrieves the value of the BindingSid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) GetOrCreateBindingSid() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid {
	if t.BindingSid != nil {
		return t.BindingSid
	}
	t.BindingSid = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid{}
	return t.BindingSid
}

// GetOrCreateExplicitPaths retrieves the value of the ExplicitPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) GetOrCreateExplicitPaths() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths {
	if t.ExplicitPaths != nil {
		return t.ExplicitPaths
	}
	t.ExplicitPaths = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths{}
	return t.ExplicitPaths
}

// GetBindingSid returns the value of the BindingSid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies. If the receiver or the field BindingSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) GetBindingSid() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid {
	if t != nil && t.BindingSid != nil {
		return t.BindingSid
	}
	return nil
}

// GetExplicitPaths returns the value of the ExplicitPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies. If the receiver or the field ExplicitPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) GetExplicitPaths() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths {
	if t != nil && t.ExplicitPaths != nil {
		return t.ExplicitPaths
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BindingSid.PopulateDefaults()
	t.ExplicitPaths.PopulateDefaults()
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/binding-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid struct {
	StaticLabelBlock *string `path:"static-label-block" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) IsYANGGoStruct() {
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_BindingSid) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/explicit-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths struct {
	Path map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path `path:"path" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) IsYANGGoStruct() {
}

// NewPath creates a new entry in the Path list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) NewPath(
	ExplicitPathName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path)
	}

	key := ExplicitPathName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path{
		ExplicitPathName: &ExplicitPathName,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.ExplicitPathName = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) GetOrCreatePath(
	ExplicitPathName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path {
	key := ExplicitPathName

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(ExplicitPathName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) GetPath(
	ExplicitPathName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path {
	if t == nil {
		return nil
	}

	key := ExplicitPathName

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) DeletePath(ExplicitPathName string) {
	key := ExplicitPathName

	delete(t.Path, key)
}

// AppendPath appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path struct to the
// list Path of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) AppendPath(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path,
) error {
	if v.ExplicitPathName == nil {
		return fmt.Errorf("invalid nil key received for ExplicitPathName")
	}

	key := *v.ExplicitPathName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/explicit-paths/path YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path struct {
	ExplicitPathName *string                                                                                              `path:"explicit-path-name" module:"srl_nokia-te-policies"`
	Hop              map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop `path:"hop" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) IsYANGGoStruct() {
}

// NewHop creates a new entry in the Hop list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) NewHop(
	Index uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hop == nil {
		t.Hop = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Hop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Hop", key)
	}

	t.Hop[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop{
		Index: &Index,
	}

	return t.Hop[key], nil
}

// RenameHop renames an entry in the list Hop within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) RenameHop(oldK, newK uint8) error {
	if _, ok := t.Hop[newK]; ok {
		return fmt.Errorf("key %v already exists in Hop", newK)
	}

	e, ok := t.Hop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Hop", oldK)
	}
	e.Index = &newK

	t.Hop[newK] = e
	delete(t.Hop, oldK)
	return nil
}

// GetOrCreateHop retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) GetOrCreateHop(
	Index uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop {
	key := Index

	if v, ok := t.Hop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHop got unexpected error: %v", err))
	}
	return v
}

// GetHop retrieves the value with the specified key from
// the Hop map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) GetHop(
	Index uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Hop[key]; ok {
		return lm
	}
	return nil
}

// DeleteHop deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) DeleteHop(Index uint8) {
	key := Index

	delete(t.Hop, key)
}

// AppendHop appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop struct to the
// list Hop of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) AppendHop(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hop == nil {
		t.Hop = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop)
	}

	if _, ok := t.Hop[key]; ok {
		return fmt.Errorf("duplicate key for list Hop %v", key)
	}

	t.Hop[key] = v
	return nil
}

// GetExplicitPathName retrieves the value of the leaf ExplicitPathName from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPathName is set, it can
// safely use t.GetExplicitPathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPathName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) GetExplicitPathName() string {
	if t == nil || t.ExplicitPathName == nil {
		return ""
	}
	return *t.ExplicitPathName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Hop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExplicitPathName == nil {
		return nil, fmt.Errorf("nil value for key ExplicitPathName")
	}

	return map[string]interface{}{
		"explicit-path-name": *t.ExplicitPathName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/explicit-paths/path/hop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop struct {
	Index     *uint8                                                                                        `path:"index" module:"srl_nokia-te-policies"`
	Ip        *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip `path:"ip" module:"srl_nokia-te-policies" yangPresence:"true"`
	MplsLabel *uint32                                                                                       `path:"mpls-label" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) IsYANGGoStruct() {
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) GetOrCreateIp() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip{}
	return t.Ip
}

// GetIp returns the value of the Ip struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) GetIp() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) GetMplsLabel() uint32 {
	if t == nil || t.MplsLabel == nil {
		return 0
	}
	return *t.MplsLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ip.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/explicit-paths/path/hop/ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip struct {
	HopType   E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip_HopType `path:"hop-type" module:"srl_nokia-te-policies"`
	IpAddress *string                                                                                                `path:"ip-address" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) IsYANGGoStruct() {
}

// GetHopType retrieves the value of the leaf HopType from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopType is set, it can
// safely use t.GetHopType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) GetHopType() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip_HopType {
	if t == nil || t.HopType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip_HopType_loose
	}
	return t.HopType
}

// GetIpAddress retrieves the value of the leaf IpAddress from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HopType == 0 {
		t.HopType = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip_HopType_loose
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_ExplicitPaths_Path_Hop_Ip) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy struct {
	AdminState              E_SrlNokiaCommon_AdminState                                                                      `path:"admin-state" module:"srl_nokia-te-policies"`
	ApplicationBindings     *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings   `path:"application-bindings" module:"srl_nokia-te-policies"`
	BindingSid              *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid            `path:"binding-sid" module:"srl_nokia-te-policies"`
	CandidatePathPreference *uint32                                                                                          `path:"candidate-path-preference" module:"srl_nokia-te-policies"`
	Color                   *uint32                                                                                          `path:"color" module:"srl_nokia-te-policies"`
	Distinguisher           *uint32                                                                                          `path:"distinguisher" module:"srl_nokia-te-policies"`
	EgressStatistics        *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics      `path:"egress-statistics" module:"srl_nokia-te-policies"`
	Endpoint                *string                                                                                          `path:"endpoint" module:"srl_nokia-te-policies"`
	EntropyLabel            *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel          `path:"entropy-label" module:"srl_nokia-te-policies"`
	HeadEnd                 SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union          `path:"head-end" module:"srl_nokia-te-policies"`
	IngressStatistics       *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics     `path:"ingress-statistics" module:"srl_nokia-te-policies"`
	MaintenancePolicy       *string                                                                                          `path:"maintenance-policy" module:"srl_nokia-te-policies"`
	Metric                  *uint32                                                                                          `path:"metric" module:"srl_nokia-te-policies"`
	PolicyName              *string                                                                                          `path:"policy-name" module:"srl_nokia-te-policies"`
	PolicyType              E_SrlNokiaTePolicies_TePolicyType                                                                `path:"policy-type" module:"srl_nokia-te-policies"`
	ReOptimizationTimer     *uint32                                                                                          `path:"re-optimization-timer" module:"srl_nokia-te-policies"`
	RetryTimer              *uint32                                                                                          `path:"retry-timer" module:"srl_nokia-te-policies"`
	SegmentList             map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList `path:"segment-list" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) IsYANGGoStruct() {}

// NewSegmentList creates a new entry in the SegmentList list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) NewSegmentList(
	SegmentListIndex uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList)
	}

	key := SegmentListIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList{
		SegmentListIndex: &SegmentListIndex,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) RenameSegmentList(oldK, newK uint8) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.SegmentListIndex = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetOrCreateSegmentList(
	SegmentListIndex uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList {
	key := SegmentListIndex

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(SegmentListIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetSegmentList(
	SegmentListIndex uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList {
	if t == nil {
		return nil
	}

	key := SegmentListIndex

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) DeleteSegmentList(SegmentListIndex uint8) {
	key := SegmentListIndex

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList struct to the
// list SegmentList of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) AppendSegmentList(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList,
) error {
	if v.SegmentListIndex == nil {
		return fmt.Errorf("invalid nil key received for SegmentListIndex")
	}

	key := *v.SegmentListIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetOrCreateApplicationBindings retrieves the value of the ApplicationBindings field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetOrCreateApplicationBindings() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings {
	if t.ApplicationBindings != nil {
		return t.ApplicationBindings
	}
	t.ApplicationBindings = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings{}
	return t.ApplicationBindings
}

// GetOrCreateBindingSid retrieves the value of the BindingSid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetOrCreateBindingSid() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid {
	if t.BindingSid != nil {
		return t.BindingSid
	}
	t.BindingSid = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid{}
	return t.BindingSid
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetOrCreateEgressStatistics() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateEntropyLabel retrieves the value of the EntropyLabel field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetOrCreateEntropyLabel() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel {
	if t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	t.EntropyLabel = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel{}
	return t.EntropyLabel
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetOrCreateIngressStatistics() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics{}
	return t.IngressStatistics
}

// GetApplicationBindings returns the value of the ApplicationBindings struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the receiver or the field ApplicationBindings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetApplicationBindings() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings {
	if t != nil && t.ApplicationBindings != nil {
		return t.ApplicationBindings
	}
	return nil
}

// GetBindingSid returns the value of the BindingSid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the receiver or the field BindingSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetBindingSid() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid {
	if t != nil && t.BindingSid != nil {
		return t.BindingSid
	}
	return nil
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetEgressStatistics() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetEntropyLabel returns the value of the EntropyLabel struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the receiver or the field EntropyLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetEntropyLabel() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel {
	if t != nil && t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetIngressStatistics() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetCandidatePathPreference retrieves the value of the leaf CandidatePathPreference from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CandidatePathPreference is set, it can
// safely use t.GetCandidatePathPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CandidatePathPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetCandidatePathPreference() uint32 {
	if t == nil || t.CandidatePathPreference == nil {
		return 0
	}
	return *t.CandidatePathPreference
}

// GetColor retrieves the value of the leaf Color from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetDistinguisher() uint32 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetHeadEnd retrieves the value of the leaf HeadEnd from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HeadEnd is set, it can
// safely use t.GetHeadEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HeadEnd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetHeadEnd() SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union {
	if t == nil || t.HeadEnd == nil {
		return nil
	}
	return t.HeadEnd
}

// GetMaintenancePolicy retrieves the value of the leaf MaintenancePolicy from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaintenancePolicy is set, it can
// safely use t.GetMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaintenancePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetMaintenancePolicy() string {
	if t == nil || t.MaintenancePolicy == nil {
		return ""
	}
	return *t.MaintenancePolicy
}

// GetMetric retrieves the value of the leaf Metric from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPolicyName retrieves the value of the leaf PolicyName from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPolicyType retrieves the value of the leaf PolicyType from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyType is set, it can
// safely use t.GetPolicyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetPolicyType() E_SrlNokiaTePolicies_TePolicyType {
	if t == nil || t.PolicyType == 0 {
		return SrlNokiaTePolicies_TePolicyType_sr_mpls_uncolored
	}
	return t.PolicyType
}

// GetReOptimizationTimer retrieves the value of the leaf ReOptimizationTimer from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReOptimizationTimer is set, it can
// safely use t.GetReOptimizationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReOptimizationTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetReOptimizationTimer() uint32 {
	if t == nil || t.ReOptimizationTimer == nil {
		return 30
	}
	return *t.ReOptimizationTimer
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 30
	}
	return *t.RetryTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.PolicyType == 0 {
		t.PolicyType = SrlNokiaTePolicies_TePolicyType_sr_mpls_uncolored
	}
	if t.ReOptimizationTimer == nil {
		var v uint32 = 30
		t.ReOptimizationTimer = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 30
		t.RetryTimer = &v
	}
	t.ApplicationBindings.PopulateDefaults()
	t.BindingSid.PopulateDefaults()
	t.EgressStatistics.PopulateDefaults()
	t.EntropyLabel.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	for _, e := range t.SegmentList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/application-bindings YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings struct {
	BgpLabeledUnicast *bool `path:"bgp-labeled-unicast" module:"srl_nokia-te-policies"`
	BgpUnicast        *bool `path:"bgp-unicast" module:"srl_nokia-te-policies"`
	IpVrf             *bool `path:"ip-vrf" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) IsYANGGoStruct() {
}

// GetBgpLabeledUnicast retrieves the value of the leaf BgpLabeledUnicast from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLabeledUnicast is set, it can
// safely use t.GetBgpLabeledUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLabeledUnicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) GetBgpLabeledUnicast() bool {
	if t == nil || t.BgpLabeledUnicast == nil {
		return true
	}
	return *t.BgpLabeledUnicast
}

// GetBgpUnicast retrieves the value of the leaf BgpUnicast from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpUnicast is set, it can
// safely use t.GetBgpUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpUnicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) GetBgpUnicast() bool {
	if t == nil || t.BgpUnicast == nil {
		return true
	}
	return *t.BgpUnicast
}

// GetIpVrf retrieves the value of the leaf IpVrf from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpVrf is set, it can
// safely use t.GetIpVrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpVrf == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) GetIpVrf() bool {
	if t == nil || t.IpVrf == nil {
		return true
	}
	return *t.IpVrf
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLabeledUnicast == nil {
		var v bool = true
		t.BgpLabeledUnicast = &v
	}
	if t.BgpUnicast == nil {
		var v bool = true
		t.BgpUnicast = &v
	}
	if t.IpVrf == nil {
		var v bool = true
		t.IpVrf = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_ApplicationBindings) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/binding-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid struct {
	MplsLabel *uint32 `path:"mpls-label" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) IsYANGGoStruct() {
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) GetMplsLabel() uint32 {
	if t == nil || t.MplsLabel == nil {
		return 0
	}
	return *t.MplsLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_BindingSid) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/egress-statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EgressStatistics) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/entropy-label YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel struct {
	Transmit E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel_Transmit `path:"transmit" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) IsYANGGoStruct() {
}

// GetTransmit retrieves the value of the leaf Transmit from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) GetTransmit() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel_Transmit {
	if t == nil || t.Transmit == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel_Transmit_disable
	}
	return t.Transmit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Transmit == 0 {
		t.Transmit = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel_Transmit_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_EntropyLabel) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/ingress-statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_IngressStatistics) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/segment-list YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList struct {
	AdminState            E_SrlNokiaCommon_AdminState                                                                             `path:"admin-state" module:"srl_nokia-te-policies"`
	Dynamic               *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic          `path:"dynamic" module:"srl_nokia-te-policies" yangPresence:"true"`
	ExplicitPath          *string                                                                                                 `path:"explicit-path" module:"srl_nokia-te-policies"`
	PceControl            *bool                                                                                                   `path:"pce-control" module:"srl_nokia-te-policies"`
	PceReport             *bool                                                                                                   `path:"pce-report" module:"srl_nokia-te-policies"`
	Priority              *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority         `path:"priority" module:"srl_nokia-te-policies"`
	SegmentListIndex      *uint8                                                                                                  `path:"segment-list-index" module:"srl_nokia-te-policies"`
	SegmentListPreference *uint32                                                                                                 `path:"segment-list-preference" module:"srl_nokia-te-policies"`
	SegmentListType       E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_SegmentListType `path:"segment-list-type" module:"srl_nokia-te-policies"`
	Weight                *uint32                                                                                                 `path:"weight" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) IsYANGGoStruct() {
}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetOrCreateDynamic() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic{}
	return t.Dynamic
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetOrCreatePriority() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority{}
	return t.Priority
}

// GetDynamic returns the value of the Dynamic struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetDynamic() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetPriority() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetExplicitPath retrieves the value of the leaf ExplicitPath from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPath is set, it can
// safely use t.GetExplicitPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetExplicitPath() string {
	if t == nil || t.ExplicitPath == nil {
		return ""
	}
	return *t.ExplicitPath
}

// GetPceControl retrieves the value of the leaf PceControl from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceControl is set, it can
// safely use t.GetPceControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceControl == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetPceControl() bool {
	if t == nil || t.PceControl == nil {
		return false
	}
	return *t.PceControl
}

// GetPceReport retrieves the value of the leaf PceReport from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceReport is set, it can
// safely use t.GetPceReport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceReport == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetPceReport() bool {
	if t == nil || t.PceReport == nil {
		return false
	}
	return *t.PceReport
}

// GetSegmentListIndex retrieves the value of the leaf SegmentListIndex from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentListIndex is set, it can
// safely use t.GetSegmentListIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentListIndex == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetSegmentListIndex() uint8 {
	if t == nil || t.SegmentListIndex == nil {
		return 0
	}
	return *t.SegmentListIndex
}

// GetSegmentListPreference retrieves the value of the leaf SegmentListPreference from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentListPreference is set, it can
// safely use t.GetSegmentListPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentListPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetSegmentListPreference() uint32 {
	if t == nil || t.SegmentListPreference == nil {
		return 0
	}
	return *t.SegmentListPreference
}

// GetSegmentListType retrieves the value of the leaf SegmentListType from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentListType is set, it can
// safely use t.GetSegmentListType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentListType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetSegmentListType() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_SegmentListType {
	if t == nil || t.SegmentListType == 0 {
		return 0
	}
	return t.SegmentListType
}

// GetWeight retrieves the value of the leaf Weight from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PceReport == nil {
		var v bool = false
		t.PceReport = &v
	}
	t.Dynamic.PopulateDefaults()
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SegmentListIndex == nil {
		return nil, fmt.Errorf("nil value for key SegmentListIndex")
	}

	return map[string]interface{}{
		"segment-list-index": *t.SegmentListIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/segment-list/dynamic YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic struct {
	PathAlgorithm E_SrlNokiaTePolicies_DynamicSegmentPathComputationType                                                       `path:"path-algorithm" module:"srl_nokia-te-policies"`
	TeConstraints *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints `path:"te-constraints" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) IsYANGGoStruct() {
}

// GetOrCreateTeConstraints retrieves the value of the TeConstraints field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) GetOrCreateTeConstraints() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints {
	if t.TeConstraints != nil {
		return t.TeConstraints
	}
	t.TeConstraints = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints{}
	return t.TeConstraints
}

// GetTeConstraints returns the value of the TeConstraints struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic. If the receiver or the field TeConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) GetTeConstraints() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints {
	if t != nil && t.TeConstraints != nil {
		return t.TeConstraints
	}
	return nil
}

// GetPathAlgorithm retrieves the value of the leaf PathAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathAlgorithm is set, it can
// safely use t.GetPathAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) GetPathAlgorithm() E_SrlNokiaTePolicies_DynamicSegmentPathComputationType {
	if t == nil || t.PathAlgorithm == 0 {
		return SrlNokiaTePolicies_DynamicSegmentPathComputationType_local_cspf
	}
	return t.PathAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathAlgorithm == 0 {
		t.PathAlgorithm = SrlNokiaTePolicies_DynamicSegmentPathComputationType_local_cspf
	}
	t.TeConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/segment-list/dynamic/te-constraints YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints struct {
	ExcludeHop          []string                                                                                                                        `path:"exclude-hop" module:"srl_nokia-te-policies"`
	ExcludeSrlg         []string                                                                                                                        `path:"exclude-srlg" module:"srl_nokia-te-policies"`
	HopLimit            *uint8                                                                                                                          `path:"hop-limit" module:"srl_nokia-te-policies"`
	LabelStackReduction *bool                                                                                                                           `path:"label-stack-reduction" module:"srl_nokia-te-policies"`
	LatencyMetricLimit  *uint32                                                                                                                         `path:"latency-metric-limit" module:"srl_nokia-te-policies"`
	LocalSrProtection   E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_LocalSrProtection `path:"local-sr-protection" module:"srl_nokia-te-policies"`
	MetricType          E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_MetricType        `path:"metric-type" module:"srl_nokia-te-policies"`
	SecondarySrlg       *bool                                                                                                                           `path:"secondary-srlg" module:"srl_nokia-te-policies"`
	SegmentDepth        *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth       `path:"segment-depth" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) IsYANGGoStruct() {
}

// GetOrCreateSegmentDepth retrieves the value of the SegmentDepth field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetOrCreateSegmentDepth() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth {
	if t.SegmentDepth != nil {
		return t.SegmentDepth
	}
	t.SegmentDepth = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth{}
	return t.SegmentDepth
}

// GetSegmentDepth returns the value of the SegmentDepth struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints. If the receiver or the field SegmentDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetSegmentDepth() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth {
	if t != nil && t.SegmentDepth != nil {
		return t.SegmentDepth
	}
	return nil
}

// GetExcludeHop retrieves the value of the leaf ExcludeHop from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeHop is set, it can
// safely use t.GetExcludeHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeHop == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetExcludeHop() []string {
	if t == nil || t.ExcludeHop == nil {
		return nil
	}
	return t.ExcludeHop
}

// GetExcludeSrlg retrieves the value of the leaf ExcludeSrlg from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeSrlg is set, it can
// safely use t.GetExcludeSrlg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeSrlg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetExcludeSrlg() []string {
	if t == nil || t.ExcludeSrlg == nil {
		return nil
	}
	return t.ExcludeSrlg
}

// GetHopLimit retrieves the value of the leaf HopLimit from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 255
	}
	return *t.HopLimit
}

// GetLabelStackReduction retrieves the value of the leaf LabelStackReduction from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackReduction is set, it can
// safely use t.GetLabelStackReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackReduction == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetLabelStackReduction() bool {
	if t == nil || t.LabelStackReduction == nil {
		return true
	}
	return *t.LabelStackReduction
}

// GetLatencyMetricLimit retrieves the value of the leaf LatencyMetricLimit from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LatencyMetricLimit is set, it can
// safely use t.GetLatencyMetricLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LatencyMetricLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetLatencyMetricLimit() uint32 {
	if t == nil || t.LatencyMetricLimit == nil {
		return 0
	}
	return *t.LatencyMetricLimit
}

// GetLocalSrProtection retrieves the value of the leaf LocalSrProtection from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSrProtection is set, it can
// safely use t.GetLocalSrProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSrProtection == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetLocalSrProtection() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_LocalSrProtection {
	if t == nil || t.LocalSrProtection == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_LocalSrProtection_preferred
	}
	return t.LocalSrProtection
}

// GetMetricType retrieves the value of the leaf MetricType from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetMetricType() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_MetricType {
	if t == nil || t.MetricType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_MetricType_igp
	}
	return t.MetricType
}

// GetSecondarySrlg retrieves the value of the leaf SecondarySrlg from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondarySrlg is set, it can
// safely use t.GetSecondarySrlg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondarySrlg == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) GetSecondarySrlg() bool {
	if t == nil || t.SecondarySrlg == nil {
		return false
	}
	return *t.SecondarySrlg
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HopLimit == nil {
		var v uint8 = 255
		t.HopLimit = &v
	}
	if t.LabelStackReduction == nil {
		var v bool = true
		t.LabelStackReduction = &v
	}
	if t.LatencyMetricLimit == nil {
		var v uint32 = 0
		t.LatencyMetricLimit = &v
	}
	if t.LocalSrProtection == 0 {
		t.LocalSrProtection = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_LocalSrProtection_preferred
	}
	if t.MetricType == 0 {
		t.MetricType = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_MetricType_igp
	}
	if t.SecondarySrlg == nil {
		var v bool = false
		t.SecondarySrlg = &v
	}
	t.SegmentDepth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/segment-list/dynamic/te-constraints/segment-depth YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth struct {
	AdditionalFrrSegmentLimit *uint8 `path:"additional-frr-segment-limit" module:"srl_nokia-te-policies"`
	SegmentLimit              *uint8 `path:"segment-limit" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) IsYANGGoStruct() {
}

// GetAdditionalFrrSegmentLimit retrieves the value of the leaf AdditionalFrrSegmentLimit from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdditionalFrrSegmentLimit is set, it can
// safely use t.GetAdditionalFrrSegmentLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdditionalFrrSegmentLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) GetAdditionalFrrSegmentLimit() uint8 {
	if t == nil || t.AdditionalFrrSegmentLimit == nil {
		return 0
	}
	return *t.AdditionalFrrSegmentLimit
}

// GetSegmentLimit retrieves the value of the leaf SegmentLimit from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentLimit is set, it can
// safely use t.GetSegmentLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentLimit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) GetSegmentLimit() uint8 {
	if t == nil || t.SegmentLimit == nil {
		return 8
	}
	return *t.SegmentLimit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SegmentLimit == nil {
		var v uint8 = 8
		t.SegmentLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Dynamic_TeConstraints_SegmentDepth) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority represents the /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/segment-list/priority YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority struct {
	HoldPriority  *uint8 `path:"hold-priority" module:"srl_nokia-te-policies"`
	SetupPriority *uint8 `path:"setup-priority" module:"srl_nokia-te-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) IsYANGGoStruct() {
}

// GetHoldPriority retrieves the value of the leaf HoldPriority from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldPriority is set, it can
// safely use t.GetHoldPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldPriority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) GetHoldPriority() uint8 {
	if t == nil || t.HoldPriority == nil {
		return 0
	}
	return *t.HoldPriority
}

// GetSetupPriority retrieves the value of the leaf SetupPriority from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetupPriority is set, it can
// safely use t.GetSetupPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetupPriority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) GetSetupPriority() uint8 {
	if t == nil || t.SetupPriority == nil {
		return 0
	}
	return *t.SetupPriority
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldPriority == nil {
		var v uint8 = 0
		t.HoldPriority = &v
	}
	if t.SetupPriority == nil {
		var v uint8 = 0
		t.SetupPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_SegmentList_Priority) ΛBelongingModule() string {
	return "srl_nokia-te-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups represents the /srl_nokia-network-instance/network-instance/traffic-engineering/admin-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group `path:"group" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) NewGroup(
	Name string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) GetOrCreateGroup(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group {
	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) GetGroup(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group represents the /srl_nokia-network-instance/network-instance/traffic-engineering/admin-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group struct {
	BitPosition *uint32 `path:"bit-position" module:"srl_nokia-traffic-engineering"`
	Name        *string `path:"name" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) IsYANGGoStruct() {
}

// GetBitPosition retrieves the value of the leaf BitPosition from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitPosition is set, it can
// safely use t.GetBitPosition() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitPosition == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) GetBitPosition() uint32 {
	if t == nil || t.BitPosition == nil {
		return 0
	}
	return *t.BitPosition
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_AdminGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface struct {
	AdminGroup     []string                                                                           `path:"admin-group" module:"srl_nokia-traffic-engineering"`
	Delay          *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay        `path:"delay" module:"srl_nokia-traffic-engineering"`
	InterfaceName  *string                                                                            `path:"interface-name" module:"srl_nokia-traffic-engineering"`
	InterfaceRef   *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef `path:"interface-ref" module:"srl_nokia-traffic-engineering"`
	SrlgMembership []string                                                                           `path:"srlg-membership" module:"srl_nokia-traffic-engineering"`
	TeMetric       *uint32                                                                            `path:"te-metric" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) IsYANGGoStruct() {}

// GetOrCreateDelay retrieves the value of the Delay field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetOrCreateDelay() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay {
	if t.Delay != nil {
		return t.Delay
	}
	t.Delay = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay{}
	return t.Delay
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetOrCreateInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetDelay returns the value of the Delay struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface. If the receiver or the field Delay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetDelay() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay {
	if t != nil && t.Delay != nil {
		return t.Delay
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetSrlgMembership retrieves the value of the leaf SrlgMembership from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrlgMembership is set, it can
// safely use t.GetSrlgMembership() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrlgMembership == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetSrlgMembership() []string {
	if t == nil || t.SrlgMembership == nil {
		return nil
	}
	return t.SrlgMembership
}

// GetTeMetric retrieves the value of the leaf TeMetric from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeMetric is set, it can
// safely use t.GetTeMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) GetTeMetric() uint32 {
	if t == nil || t.TeMetric == nil {
		return 0
	}
	return *t.TeMetric
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Delay.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/delay YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay struct {
	Dynamic *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic `path:"dynamic" module:"srl_nokia-link-measurement"`
	Static  *uint32                                                                             `path:"static" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) IsYANGGoStruct() {}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) GetOrCreateDynamic() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic{}
	return t.Dynamic
}

// GetDynamic returns the value of the Dynamic struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) GetDynamic() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetStatic retrieves the value of the leaf Static from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) GetStatic() uint32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dynamic.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/delay/dynamic YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic struct {
	LinkMeasurement *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement `path:"link-measurement" module:"srl_nokia-link-measurement" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) IsYANGGoStruct() {
}

// GetOrCreateLinkMeasurement retrieves the value of the LinkMeasurement field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) GetOrCreateLinkMeasurement() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement {
	if t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	t.LinkMeasurement = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement{}
	return t.LinkMeasurement
}

// GetLinkMeasurement returns the value of the LinkMeasurement struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic. If the receiver or the field LinkMeasurement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) GetLinkMeasurement() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement {
	if t != nil && t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkMeasurement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/delay/dynamic/link-measurement YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement struct {
	MeasurementTemplate *string                                                                                                   `path:"measurement-template" module:"srl_nokia-link-measurement"`
	Stamp               *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp `path:"stamp" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) IsYANGGoStruct() {
}

// GetOrCreateStamp retrieves the value of the Stamp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) GetOrCreateStamp() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp {
	if t.Stamp != nil {
		return t.Stamp
	}
	t.Stamp = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp{}
	return t.Stamp
}

// GetStamp returns the value of the Stamp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement. If the receiver or the field Stamp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) GetStamp() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp {
	if t != nil && t.Stamp != nil {
		return t.Stamp
	}
	return nil
}

// GetMeasurementTemplate retrieves the value of the leaf MeasurementTemplate from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeasurementTemplate is set, it can
// safely use t.GetMeasurementTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeasurementTemplate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) GetMeasurementTemplate() string {
	if t == nil || t.MeasurementTemplate == nil {
		return ""
	}
	return *t.MeasurementTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Stamp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/delay/dynamic/link-measurement/stamp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp struct {
	Ipv4 *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4 `path:"ipv4" module:"srl_nokia-link-measurement"`
	Ipv6 *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6 `path:"ipv6" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) GetOrCreateIpv6() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) GetIpv6() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4 represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/delay/dynamic/link-measurement/stamp/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4 struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-link-measurement"`
	DestinationIp *string                     `path:"destination-ip" module:"srl_nokia-link-measurement"`
	SourceIp      *string                     `path:"source-ip" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDestinationIp retrieves the value of the leaf DestinationIp from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationIp is set, it can
// safely use t.GetDestinationIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) GetDestinationIp() string {
	if t == nil || t.DestinationIp == nil {
		return ""
	}
	return *t.DestinationIp
}

// GetSourceIp retrieves the value of the leaf SourceIp from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIp is set, it can
// safely use t.GetSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) GetSourceIp() string {
	if t == nil || t.SourceIp == nil {
		return ""
	}
	return *t.SourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6 represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/delay/dynamic/link-measurement/stamp/ipv6 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6 struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-link-measurement"`
	DestinationIp *string                     `path:"destination-ip" module:"srl_nokia-link-measurement"`
	SourceIp      *string                     `path:"source-ip" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDestinationIp retrieves the value of the leaf DestinationIp from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationIp is set, it can
// safely use t.GetDestinationIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) GetDestinationIp() string {
	if t == nil || t.DestinationIp == nil {
		return ""
	}
	return *t.DestinationIp
}

// GetSourceIp retrieves the value of the leaf SourceIp from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIp is set, it can
// safely use t.GetSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) GetSourceIp() string {
	if t == nil || t.SourceIp == nil {
		return ""
	}
	return *t.SourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_Delay_Dynamic_LinkMeasurement_Stamp_Ipv6) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef represents the /srl_nokia-network-instance/network-instance/traffic-engineering/interface/interface-ref YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef struct {
	Interface    *string `path:"interface" module:"srl_nokia-traffic-engineering"`
	Subinterface *uint32 `path:"subinterface" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Interface_InterfaceRef) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep struct {
	Pcc *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc `path:"pcc" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) IsYANGGoStruct() {}

// GetOrCreatePcc retrieves the value of the Pcc field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) GetOrCreatePcc() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc {
	if t.Pcc != nil {
		return t.Pcc
	}
	t.Pcc = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc{}
	return t.Pcc
}

// GetPcc returns the value of the Pcc struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep. If the receiver or the field Pcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) GetPcc() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc {
	if t != nil && t.Pcc != nil {
		return t.Pcc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pcc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep/pcc YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc struct {
	AdminState            E_SrlNokiaCommon_AdminState                                                          `path:"admin-state" module:"srl_nokia-pcep"`
	DeadTimer             *uint32                                                                              `path:"dead-timer" module:"srl_nokia-pcep"`
	Keepalive             *uint32                                                                              `path:"keepalive" module:"srl_nokia-pcep"`
	MaxPceInitLsps        *uint32                                                                              `path:"max-pce-init-lsps" module:"srl_nokia-pcep"`
	PceAssociations       *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations `path:"pce-associations" module:"srl_nokia-pcep"`
	Peer                  map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer `path:"peer" module:"srl_nokia-pcep"`
	RedelegationTimer     *uint32                                                                              `path:"redelegation-timer" module:"srl_nokia-pcep"`
	ReportPathConstraints *bool                                                                                `path:"report-path-constraints" module:"srl_nokia-pcep"`
	StateTimer            *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer      `path:"state-timer" module:"srl_nokia-pcep"`
	UnknownMessageRate    *uint32                                                                              `path:"unknown-message-rate" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) NewPeer(
	IpAddress string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetOrCreatePeer(
	IpAddress string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer {
	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetPeer(
	IpAddress string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer {
	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer struct to the
// list Peer of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) AppendPeer(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer,
) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreatePceAssociations retrieves the value of the PceAssociations field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetOrCreatePceAssociations() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations {
	if t.PceAssociations != nil {
		return t.PceAssociations
	}
	t.PceAssociations = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations{}
	return t.PceAssociations
}

// GetOrCreateStateTimer retrieves the value of the StateTimer field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetOrCreateStateTimer() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer {
	if t.StateTimer != nil {
		return t.StateTimer
	}
	t.StateTimer = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer{}
	return t.StateTimer
}

// GetPceAssociations returns the value of the PceAssociations struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc. If the receiver or the field PceAssociations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetPceAssociations() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations {
	if t != nil && t.PceAssociations != nil {
		return t.PceAssociations
	}
	return nil
}

// GetStateTimer returns the value of the StateTimer struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc. If the receiver or the field StateTimer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetStateTimer() *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer {
	if t != nil && t.StateTimer != nil {
		return t.StateTimer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetDeadTimer() uint32 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetMaxPceInitLsps retrieves the value of the leaf MaxPceInitLsps from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPceInitLsps is set, it can
// safely use t.GetMaxPceInitLsps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPceInitLsps == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetMaxPceInitLsps() uint32 {
	if t == nil || t.MaxPceInitLsps == nil {
		return 8191
	}
	return *t.MaxPceInitLsps
}

// GetRedelegationTimer retrieves the value of the leaf RedelegationTimer from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedelegationTimer is set, it can
// safely use t.GetRedelegationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedelegationTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetRedelegationTimer() uint32 {
	if t == nil || t.RedelegationTimer == nil {
		return 90
	}
	return *t.RedelegationTimer
}

// GetReportPathConstraints retrieves the value of the leaf ReportPathConstraints from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportPathConstraints is set, it can
// safely use t.GetReportPathConstraints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportPathConstraints == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetReportPathConstraints() bool {
	if t == nil || t.ReportPathConstraints == nil {
		return true
	}
	return *t.ReportPathConstraints
}

// GetUnknownMessageRate retrieves the value of the leaf UnknownMessageRate from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMessageRate is set, it can
// safely use t.GetUnknownMessageRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMessageRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) GetUnknownMessageRate() uint32 {
	if t == nil || t.UnknownMessageRate == nil {
		return 10
	}
	return *t.UnknownMessageRate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.DeadTimer == nil {
		var v uint32 = 120
		t.DeadTimer = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 30
		t.Keepalive = &v
	}
	if t.MaxPceInitLsps == nil {
		var v uint32 = 8191
		t.MaxPceInitLsps = &v
	}
	if t.RedelegationTimer == nil {
		var v uint32 = 90
		t.RedelegationTimer = &v
	}
	if t.ReportPathConstraints == nil {
		var v bool = true
		t.ReportPathConstraints = &v
	}
	if t.UnknownMessageRate == nil {
		var v uint32 = 10
		t.UnknownMessageRate = &v
	}
	t.PceAssociations.PopulateDefaults()
	t.StateTimer.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep/pcc/pce-associations YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations struct {
	Diversity map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity `path:"diversity" module:"srl_nokia-pcep"`
	Policy    map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy    `path:"policy" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) IsYANGGoStruct() {
}

// NewDiversity creates a new entry in the Diversity list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) NewDiversity(
	AssociationName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Diversity == nil {
		t.Diversity = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity)
	}

	key := AssociationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Diversity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Diversity", key)
	}

	t.Diversity[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity{
		AssociationName: &AssociationName,
	}

	return t.Diversity[key], nil
}

// RenameDiversity renames an entry in the list Diversity within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) RenameDiversity(oldK, newK string) error {
	if _, ok := t.Diversity[newK]; ok {
		return fmt.Errorf("key %v already exists in Diversity", newK)
	}

	e, ok := t.Diversity[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Diversity", oldK)
	}
	e.AssociationName = &newK

	t.Diversity[newK] = e
	delete(t.Diversity, oldK)
	return nil
}

// GetOrCreateDiversity retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) GetOrCreateDiversity(
	AssociationName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity {
	key := AssociationName

	if v, ok := t.Diversity[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDiversity(AssociationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDiversity got unexpected error: %v", err))
	}
	return v
}

// GetDiversity retrieves the value with the specified key from
// the Diversity map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) GetDiversity(
	AssociationName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity {
	if t == nil {
		return nil
	}

	key := AssociationName

	if lm, ok := t.Diversity[key]; ok {
		return lm
	}
	return nil
}

// DeleteDiversity deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) DeleteDiversity(AssociationName string) {
	key := AssociationName

	delete(t.Diversity, key)
}

// AppendDiversity appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity struct to the
// list Diversity of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) AppendDiversity(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity,
) error {
	if v.AssociationName == nil {
		return fmt.Errorf("invalid nil key received for AssociationName")
	}

	key := *v.AssociationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Diversity == nil {
		t.Diversity = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity)
	}

	if _, ok := t.Diversity[key]; ok {
		return fmt.Errorf("duplicate key for list Diversity %v", key)
	}

	t.Diversity[key] = v
	return nil
}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) NewPolicy(
	AssociationName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy)
	}

	key := AssociationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy{
		AssociationName: &AssociationName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.AssociationName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) GetOrCreatePolicy(
	AssociationName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy {
	key := AssociationName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(AssociationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) GetPolicy(
	AssociationName string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy {
	if t == nil {
		return nil
	}

	key := AssociationName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) DeletePolicy(AssociationName string) {
	key := AssociationName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy struct to the
// list Policy of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) AppendPolicy(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy,
) error {
	if v.AssociationName == nil {
		return fmt.Errorf("invalid nil key received for AssociationName")
	}

	key := *v.AssociationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Diversity {
		e.PopulateDefaults()
	}
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep/pcc/pce-associations/diversity YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity struct {
	AssociationId         *uint32                                                                                                          `path:"association-id" module:"srl_nokia-pcep"`
	AssociationName       *string                                                                                                          `path:"association-name" module:"srl_nokia-pcep"`
	AssociationSource     *string                                                                                                          `path:"association-source" module:"srl_nokia-pcep"`
	DisjointnessReference *bool                                                                                                            `path:"disjointness-reference" module:"srl_nokia-pcep"`
	DisjointnessType      E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DisjointnessType `path:"disjointness-type" module:"srl_nokia-pcep"`
	DiversityType         E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DiversityType    `path:"diversity-type" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) IsYANGGoStruct() {
}

// GetAssociationId retrieves the value of the leaf AssociationId from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationId is set, it can
// safely use t.GetAssociationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) GetAssociationId() uint32 {
	if t == nil || t.AssociationId == nil {
		return 0
	}
	return *t.AssociationId
}

// GetAssociationName retrieves the value of the leaf AssociationName from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationName is set, it can
// safely use t.GetAssociationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) GetAssociationName() string {
	if t == nil || t.AssociationName == nil {
		return ""
	}
	return *t.AssociationName
}

// GetAssociationSource retrieves the value of the leaf AssociationSource from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationSource is set, it can
// safely use t.GetAssociationSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationSource == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) GetAssociationSource() string {
	if t == nil || t.AssociationSource == nil {
		return ""
	}
	return *t.AssociationSource
}

// GetDisjointnessReference retrieves the value of the leaf DisjointnessReference from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisjointnessReference is set, it can
// safely use t.GetDisjointnessReference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisjointnessReference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) GetDisjointnessReference() bool {
	if t == nil || t.DisjointnessReference == nil {
		return false
	}
	return *t.DisjointnessReference
}

// GetDisjointnessType retrieves the value of the leaf DisjointnessType from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisjointnessType is set, it can
// safely use t.GetDisjointnessType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisjointnessType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) GetDisjointnessType() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DisjointnessType {
	if t == nil || t.DisjointnessType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DisjointnessType_loose
	}
	return t.DisjointnessType
}

// GetDiversityType retrieves the value of the leaf DiversityType from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiversityType is set, it can
// safely use t.GetDiversityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiversityType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) GetDiversityType() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DiversityType {
	if t == nil || t.DiversityType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DiversityType_none
	}
	return t.DiversityType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AssociationId == nil {
		var v uint32 = 0
		t.AssociationId = &v
	}
	if t.DisjointnessReference == nil {
		var v bool = false
		t.DisjointnessReference = &v
	}
	if t.DisjointnessType == 0 {
		t.DisjointnessType = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DisjointnessType_loose
	}
	if t.DiversityType == 0 {
		t.DiversityType = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity_DiversityType_none
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AssociationName == nil {
		return nil, fmt.Errorf("nil value for key AssociationName")
	}

	return map[string]interface{}{
		"association-name": *t.AssociationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Diversity) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep/pcc/pce-associations/policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy struct {
	AssociationId     *uint32 `path:"association-id" module:"srl_nokia-pcep"`
	AssociationName   *string `path:"association-name" module:"srl_nokia-pcep"`
	AssociationSource *string `path:"association-source" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) IsYANGGoStruct() {
}

// GetAssociationId retrieves the value of the leaf AssociationId from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationId is set, it can
// safely use t.GetAssociationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) GetAssociationId() uint32 {
	if t == nil || t.AssociationId == nil {
		return 0
	}
	return *t.AssociationId
}

// GetAssociationName retrieves the value of the leaf AssociationName from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationName is set, it can
// safely use t.GetAssociationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) GetAssociationName() string {
	if t == nil || t.AssociationName == nil {
		return ""
	}
	return *t.AssociationName
}

// GetAssociationSource retrieves the value of the leaf AssociationSource from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationSource is set, it can
// safely use t.GetAssociationSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationSource == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) GetAssociationSource() string {
	if t == nil || t.AssociationSource == nil {
		return ""
	}
	return *t.AssociationSource
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AssociationId == nil {
		var v uint32 = 0
		t.AssociationId = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AssociationName == nil {
		return nil, fmt.Errorf("nil value for key AssociationName")
	}

	return map[string]interface{}{
		"association-name": *t.AssociationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_PceAssociations_Policy) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep/pcc/peer YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer struct {
	AdminState             E_SrlNokiaCommon_AdminState                                                                `path:"admin-state" module:"srl_nokia-pcep"`
	AuthenticationKeychain *string                                                                                    `path:"authentication-keychain" module:"srl_nokia-pcep"`
	IpAddress              *string                                                                                    `path:"ip-address" module:"srl_nokia-pcep"`
	LocalAddress           *string                                                                                    `path:"local-address" module:"srl_nokia-pcep"`
	Preference             *uint32                                                                                    `path:"preference" module:"srl_nokia-pcep"`
	RoutePreference        E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer_RoutePreference `path:"route-preference" module:"srl_nokia-pcep"`
	TlsClientProfile       *string                                                                                    `path:"tls-client-profile" module:"srl_nokia-pcep"`
	TlsWaitTimer           *uint32                                                                                    `path:"tls-wait-timer" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetIpAddress retrieves the value of the leaf IpAddress from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetRoutePreference() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer_RoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer_RoutePreference_both
	}
	return t.RoutePreference
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// GetTlsWaitTimer retrieves the value of the leaf TlsWaitTimer from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsWaitTimer is set, it can
// safely use t.GetTlsWaitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsWaitTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) GetTlsWaitTimer() uint32 {
	if t == nil || t.TlsWaitTimer == nil {
		return 60
	}
	return *t.TlsWaitTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 0
		t.Preference = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer_RoutePreference_both
	}
	if t.TlsWaitTimer == nil {
		var v uint32 = 60
		t.TlsWaitTimer = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_Peer) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer represents the /srl_nokia-network-instance/network-instance/traffic-engineering/pcep/pcc/state-timer YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer struct {
	Timer       *uint32                                                                                      `path:"timer" module:"srl_nokia-pcep"`
	TimerAction E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer_TimerAction `path:"timer-action" module:"srl_nokia-pcep"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) IsYANGGoStruct() {
}

// GetTimer retrieves the value of the leaf Timer from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timer is set, it can
// safely use t.GetTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) GetTimer() uint32 {
	if t == nil || t.Timer == nil {
		return 180
	}
	return *t.Timer
}

// GetTimerAction retrieves the value of the leaf TimerAction from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimerAction is set, it can
// safely use t.GetTimerAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimerAction == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) GetTimerAction() E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer_TimerAction {
	if t == nil || t.TimerAction == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer_TimerAction_remove
	}
	return t.TimerAction
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timer == nil {
		var v uint32 = 180
		t.Timer = &v
	}
	if t.TimerAction == 0 {
		t.TimerAction = SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer_TimerAction_remove
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_Pcep_Pcc_StateTimer) ΛBelongingModule() string {
	return "srl_nokia-pcep"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups represents the /srl_nokia-network-instance/network-instance/traffic-engineering/shared-risk-link-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group `path:"group" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) NewGroup(
	Name string,
) (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) GetOrCreateGroup(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group {
	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) GetGroup(
	Name string,
) *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group represents the /srl_nokia-network-instance/network-instance/traffic-engineering/shared-risk-link-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group struct {
	Name  *string `path:"name" module:"srl_nokia-traffic-engineering"`
	Value *uint32 `path:"value" module:"srl_nokia-traffic-engineering"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineering_SharedRiskLinkGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-traffic-engineering"
}

// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface represents the /srl_nokia-network-instance/network-instance/vxlan-interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface struct {
	Name *string `path:"name" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface.
func (*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaOam_Oam represents the /srl_nokia-oam/oam YANG schema element.
type SrlNokiaOam_Oam struct {
	Ethcfm                *SrlNokiaOam_Oam_Ethcfm                `path:"ethcfm" module:"srl_nokia-ethcfm" yangPresence:"true"`
	Ippm                  *SrlNokiaOam_Oam_Ippm                  `path:"ippm" module:"srl_nokia-ippm-source-udp-pool"`
	LinkMeasurement       *SrlNokiaOam_Oam_LinkMeasurement       `path:"link-measurement" module:"srl_nokia-link-measurement"`
	PerformanceMonitoring *SrlNokiaOam_Oam_PerformanceMonitoring `path:"performance-monitoring" module:"srl_nokia-oam"`
	Stamp                 *SrlNokiaOam_Oam_Stamp                 `path:"stamp" module:"srl_nokia-stamp" yangPresence:"true"`
	Twamp                 *SrlNokiaOam_Oam_Twamp                 `path:"twamp" module:"srl_nokia-twamp" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam) IsYANGGoStruct() {}

// GetOrCreateEthcfm retrieves the value of the Ethcfm field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam) GetOrCreateEthcfm() *SrlNokiaOam_Oam_Ethcfm {
	if t.Ethcfm != nil {
		return t.Ethcfm
	}
	t.Ethcfm = &SrlNokiaOam_Oam_Ethcfm{}
	return t.Ethcfm
}

// GetOrCreateIppm retrieves the value of the Ippm field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam) GetOrCreateIppm() *SrlNokiaOam_Oam_Ippm {
	if t.Ippm != nil {
		return t.Ippm
	}
	t.Ippm = &SrlNokiaOam_Oam_Ippm{}
	return t.Ippm
}

// GetOrCreateLinkMeasurement retrieves the value of the LinkMeasurement field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam) GetOrCreateLinkMeasurement() *SrlNokiaOam_Oam_LinkMeasurement {
	if t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	t.LinkMeasurement = &SrlNokiaOam_Oam_LinkMeasurement{}
	return t.LinkMeasurement
}

// GetOrCreatePerformanceMonitoring retrieves the value of the PerformanceMonitoring field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam) GetOrCreatePerformanceMonitoring() *SrlNokiaOam_Oam_PerformanceMonitoring {
	if t.PerformanceMonitoring != nil {
		return t.PerformanceMonitoring
	}
	t.PerformanceMonitoring = &SrlNokiaOam_Oam_PerformanceMonitoring{}
	return t.PerformanceMonitoring
}

// GetOrCreateStamp retrieves the value of the Stamp field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam) GetOrCreateStamp() *SrlNokiaOam_Oam_Stamp {
	if t.Stamp != nil {
		return t.Stamp
	}
	t.Stamp = &SrlNokiaOam_Oam_Stamp{}
	return t.Stamp
}

// GetOrCreateTwamp retrieves the value of the Twamp field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam) GetOrCreateTwamp() *SrlNokiaOam_Oam_Twamp {
	if t.Twamp != nil {
		return t.Twamp
	}
	t.Twamp = &SrlNokiaOam_Oam_Twamp{}
	return t.Twamp
}

// GetEthcfm returns the value of the Ethcfm struct pointer
// from SrlNokiaOam_Oam. If the receiver or the field Ethcfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam) GetEthcfm() *SrlNokiaOam_Oam_Ethcfm {
	if t != nil && t.Ethcfm != nil {
		return t.Ethcfm
	}
	return nil
}

// GetIppm returns the value of the Ippm struct pointer
// from SrlNokiaOam_Oam. If the receiver or the field Ippm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam) GetIppm() *SrlNokiaOam_Oam_Ippm {
	if t != nil && t.Ippm != nil {
		return t.Ippm
	}
	return nil
}

// GetLinkMeasurement returns the value of the LinkMeasurement struct pointer
// from SrlNokiaOam_Oam. If the receiver or the field LinkMeasurement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam) GetLinkMeasurement() *SrlNokiaOam_Oam_LinkMeasurement {
	if t != nil && t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	return nil
}

// GetPerformanceMonitoring returns the value of the PerformanceMonitoring struct pointer
// from SrlNokiaOam_Oam. If the receiver or the field PerformanceMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam) GetPerformanceMonitoring() *SrlNokiaOam_Oam_PerformanceMonitoring {
	if t != nil && t.PerformanceMonitoring != nil {
		return t.PerformanceMonitoring
	}
	return nil
}

// GetStamp returns the value of the Stamp struct pointer
// from SrlNokiaOam_Oam. If the receiver or the field Stamp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam) GetStamp() *SrlNokiaOam_Oam_Stamp {
	if t != nil && t.Stamp != nil {
		return t.Stamp
	}
	return nil
}

// GetTwamp returns the value of the Twamp struct pointer
// from SrlNokiaOam_Oam. If the receiver or the field Twamp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam) GetTwamp() *SrlNokiaOam_Oam_Twamp {
	if t != nil && t.Twamp != nil {
		return t.Twamp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ethcfm.PopulateDefaults()
	t.Ippm.PopulateDefaults()
	t.LinkMeasurement.PopulateDefaults()
	t.PerformanceMonitoring.PopulateDefaults()
	t.Stamp.PopulateDefaults()
	t.Twamp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam.
func (*SrlNokiaOam_Oam) ΛBelongingModule() string {
	return "srl_nokia-oam"
}

// SrlNokiaOam_Oam_Ethcfm represents the /srl_nokia-oam/oam/ethcfm YANG schema element.
type SrlNokiaOam_Oam_Ethcfm struct {
	Domain   map[string]*SrlNokiaOam_Oam_Ethcfm_Domain `path:"domain" module:"srl_nokia-ethcfm"`
	SenderId *SrlNokiaOam_Oam_Ethcfm_SenderId          `path:"sender-id" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// SrlNokiaOam_Oam_Ethcfm struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_Ethcfm) NewDomain(DomainId string) (*SrlNokiaOam_Oam_Ethcfm_Domain, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*SrlNokiaOam_Oam_Ethcfm_Domain)
	}

	key := DomainId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &SrlNokiaOam_Oam_Ethcfm_Domain{
		DomainId: &DomainId,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the SrlNokiaOam_Oam_Ethcfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_Ethcfm) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.DomainId = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_Ethcfm) GetOrCreateDomain(DomainId string) *SrlNokiaOam_Oam_Ethcfm_Domain {
	key := DomainId

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(DomainId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of SrlNokiaOam_Oam_Ethcfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm) GetDomain(DomainId string) *SrlNokiaOam_Oam_Ethcfm_Domain {
	if t == nil {
		return nil
	}

	key := DomainId

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_Ethcfm) DeleteDomain(DomainId string) {
	key := DomainId

	delete(t.Domain, key)
}

// AppendDomain appends the supplied SrlNokiaOam_Oam_Ethcfm_Domain struct to the
// list Domain of SrlNokiaOam_Oam_Ethcfm. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_Ethcfm_Domain already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_Ethcfm) AppendDomain(v *SrlNokiaOam_Oam_Ethcfm_Domain) error {
	if v.DomainId == nil {
		return fmt.Errorf("invalid nil key received for DomainId")
	}

	key := *v.DomainId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*SrlNokiaOam_Oam_Ethcfm_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// GetOrCreateSenderId retrieves the value of the SenderId field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm) GetOrCreateSenderId() *SrlNokiaOam_Oam_Ethcfm_SenderId {
	if t.SenderId != nil {
		return t.SenderId
	}
	t.SenderId = &SrlNokiaOam_Oam_Ethcfm_SenderId{}
	return t.SenderId
}

// GetSenderId returns the value of the SenderId struct pointer
// from SrlNokiaOam_Oam_Ethcfm. If the receiver or the field SenderId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm) GetSenderId() *SrlNokiaOam_Oam_Ethcfm_SenderId {
	if t != nil && t.SenderId != nil {
		return t.SenderId
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SenderId.PopulateDefaults()
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm.
func (*SrlNokiaOam_Oam_Ethcfm) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain represents the /srl_nokia-oam/oam/ethcfm/domain YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain struct {
	Association  map[string]*SrlNokiaOam_Oam_Ethcfm_Domain_Association `path:"association" module:"srl_nokia-ethcfm"`
	Dns          *string                                               `path:"dns" module:"srl_nokia-ethcfm"`
	DomainFormat E_SrlNokiaEthcfmTypes_DomainFormatType                `path:"domain-format" module:"srl_nokia-ethcfm"`
	DomainId     *string                                               `path:"domain-id" module:"srl_nokia-ethcfm"`
	Level        *uint8                                                `path:"level" module:"srl_nokia-ethcfm"`
	Mac          *string                                               `path:"mac" module:"srl_nokia-ethcfm"`
	Name         *string                                               `path:"name" module:"srl_nokia-ethcfm"`
	TwoOctetInt  *uint16                                               `path:"two-octet-int" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain) IsYANGGoStruct() {}

// NewAssociation creates a new entry in the Association list of the
// SrlNokiaOam_Oam_Ethcfm_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) NewAssociation(AssociationId string) (*SrlNokiaOam_Oam_Ethcfm_Domain_Association, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*SrlNokiaOam_Oam_Ethcfm_Domain_Association)
	}

	key := AssociationId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Association[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Association", key)
	}

	t.Association[key] = &SrlNokiaOam_Oam_Ethcfm_Domain_Association{
		AssociationId: &AssociationId,
	}

	return t.Association[key], nil
}

// RenameAssociation renames an entry in the list Association within
// the SrlNokiaOam_Oam_Ethcfm_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) RenameAssociation(oldK, newK string) error {
	if _, ok := t.Association[newK]; ok {
		return fmt.Errorf("key %v already exists in Association", newK)
	}

	e, ok := t.Association[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Association", oldK)
	}
	e.AssociationId = &newK

	t.Association[newK] = e
	delete(t.Association, oldK)
	return nil
}

// GetOrCreateAssociation retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetOrCreateAssociation(AssociationId string) *SrlNokiaOam_Oam_Ethcfm_Domain_Association {
	key := AssociationId

	if v, ok := t.Association[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssociation(AssociationId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssociation got unexpected error: %v", err))
	}
	return v
}

// GetAssociation retrieves the value with the specified key from
// the Association map field of SrlNokiaOam_Oam_Ethcfm_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetAssociation(AssociationId string) *SrlNokiaOam_Oam_Ethcfm_Domain_Association {
	if t == nil {
		return nil
	}

	key := AssociationId

	if lm, ok := t.Association[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssociation deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm_Domain. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) DeleteAssociation(AssociationId string) {
	key := AssociationId

	delete(t.Association, key)
}

// AppendAssociation appends the supplied SrlNokiaOam_Oam_Ethcfm_Domain_Association struct to the
// list Association of SrlNokiaOam_Oam_Ethcfm_Domain. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_Ethcfm_Domain_Association already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) AppendAssociation(v *SrlNokiaOam_Oam_Ethcfm_Domain_Association) error {
	if v.AssociationId == nil {
		return fmt.Errorf("invalid nil key received for AssociationId")
	}

	key := *v.AssociationId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*SrlNokiaOam_Oam_Ethcfm_Domain_Association)
	}

	if _, ok := t.Association[key]; ok {
		return fmt.Errorf("duplicate key for list Association %v", key)
	}

	t.Association[key] = v
	return nil
}

// GetDns retrieves the value of the leaf Dns from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetDns() string {
	if t == nil || t.Dns == nil {
		return ""
	}
	return *t.Dns
}

// GetDomainFormat retrieves the value of the leaf DomainFormat from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainFormat is set, it can
// safely use t.GetDomainFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainFormat == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetDomainFormat() E_SrlNokiaEthcfmTypes_DomainFormatType {
	if t == nil || t.DomainFormat == 0 {
		return 0
	}
	return t.DomainFormat
}

// GetDomainId retrieves the value of the leaf DomainId from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetLevel retrieves the value of the leaf Level from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetLevel() uint8 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMac retrieves the value of the leaf Mac from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetName retrieves the value of the leaf Name from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTwoOctetInt retrieves the value of the leaf TwoOctetInt from the SrlNokiaOam_Oam_Ethcfm_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TwoOctetInt is set, it can
// safely use t.GetTwoOctetInt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TwoOctetInt == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) GetTwoOctetInt() uint16 {
	if t == nil || t.TwoOctetInt == nil {
		return 0
	}
	return *t.TwoOctetInt
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Level == nil {
		var v uint8 = 0
		t.Level = &v
	}
	for _, e := range t.Association {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_Ethcfm_Domain struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DomainId == nil {
		return nil, fmt.Errorf("nil value for key DomainId")
	}

	return map[string]interface{}{
		"domain-id": *t.DomainId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain.
func (*SrlNokiaOam_Oam_Ethcfm_Domain) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association represents the /srl_nokia-oam/oam/ethcfm/domain/association YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association struct {
	AssociationFormat      E_SrlNokiaEthcfmTypes_AssociationFormatType                           `path:"association-format" module:"srl_nokia-ethcfm"`
	AssociationId          *string                                                               `path:"association-id" module:"srl_nokia-ethcfm"`
	AssociationMeps        map[uint16]*SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps `path:"association-meps" module:"srl_nokia-ethcfm"`
	CcmHoldTime            *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime                `path:"ccm-hold-time" module:"srl_nokia-ethcfm"`
	CcmInterval            E_SrlNokiaEthcfmTypes_CcmIntervalType                                 `path:"ccm-interval" module:"srl_nokia-ethcfm"`
	IccValue               *string                                                               `path:"icc-value" module:"srl_nokia-ethcfm"`
	Id                     *string                                                               `path:"id" module:"srl_nokia-ethcfm"`
	Mep                    map[uint16]*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep             `path:"mep" module:"srl_nokia-ethcfm"`
	Name                   *string                                                               `path:"name" module:"srl_nokia-ethcfm"`
	NetworkInstance        *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance            `path:"network-instance" module:"srl_nokia-ethcfm"`
	Number                 *uint16                                                               `path:"number" module:"srl_nokia-ethcfm"`
	RemoteMepAutoDiscovery *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery     `path:"remote-mep-auto-discovery" module:"srl_nokia-ethcfm"`
	SenderIdPermissionType E_SrlNokiaEthcfmTypes_IdPermissionType                                `path:"sender-id-permission-type" module:"srl_nokia-ethcfm"`
	Vid                    *uint16                                                               `path:"vid" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association) IsYANGGoStruct() {}

// NewAssociationMeps creates a new entry in the AssociationMeps list of the
// SrlNokiaOam_Oam_Ethcfm_Domain_Association struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) NewAssociationMeps(MepId uint16) (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AssociationMeps == nil {
		t.AssociationMeps = make(map[uint16]*SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps)
	}

	key := MepId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AssociationMeps[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AssociationMeps", key)
	}

	t.AssociationMeps[key] = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps{
		MepId: &MepId,
	}

	return t.AssociationMeps[key], nil
}

// RenameAssociationMeps renames an entry in the list AssociationMeps within
// the SrlNokiaOam_Oam_Ethcfm_Domain_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) RenameAssociationMeps(oldK, newK uint16) error {
	if _, ok := t.AssociationMeps[newK]; ok {
		return fmt.Errorf("key %v already exists in AssociationMeps", newK)
	}

	e, ok := t.AssociationMeps[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AssociationMeps", oldK)
	}
	e.MepId = &newK

	t.AssociationMeps[newK] = e
	delete(t.AssociationMeps, oldK)
	return nil
}

// GetOrCreateAssociationMeps retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetOrCreateAssociationMeps(MepId uint16) *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps {
	key := MepId

	if v, ok := t.AssociationMeps[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssociationMeps(MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssociationMeps got unexpected error: %v", err))
	}
	return v
}

// GetAssociationMeps retrieves the value with the specified key from
// the AssociationMeps map field of SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetAssociationMeps(MepId uint16) *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps {
	if t == nil {
		return nil
	}

	key := MepId

	if lm, ok := t.AssociationMeps[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssociationMeps deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm_Domain_Association. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) DeleteAssociationMeps(MepId uint16) {
	key := MepId

	delete(t.AssociationMeps, key)
}

// AppendAssociationMeps appends the supplied SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps struct to the
// list AssociationMeps of SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) AppendAssociationMeps(
	v *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps,
) error {
	if v.MepId == nil {
		return fmt.Errorf("invalid nil key received for MepId")
	}

	key := *v.MepId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AssociationMeps == nil {
		t.AssociationMeps = make(map[uint16]*SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps)
	}

	if _, ok := t.AssociationMeps[key]; ok {
		return fmt.Errorf("duplicate key for list AssociationMeps %v", key)
	}

	t.AssociationMeps[key] = v
	return nil
}

// NewMep creates a new entry in the Mep list of the
// SrlNokiaOam_Oam_Ethcfm_Domain_Association struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) NewMep(MepId uint16) (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[uint16]*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep)
	}

	key := MepId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep{
		MepId: &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the SrlNokiaOam_Oam_Ethcfm_Domain_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) RenameMep(oldK, newK uint16) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MepId = &newK

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetOrCreateMep(MepId uint16) *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep {
	key := MepId

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetMep(MepId uint16) *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep {
	if t == nil {
		return nil
	}

	key := MepId

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ethcfm_Domain_Association. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) DeleteMep(MepId uint16) {
	key := MepId

	delete(t.Mep, key)
}

// AppendMep appends the supplied SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep struct to the
// list Mep of SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) AppendMep(v *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) error {
	if v.MepId == nil {
		return fmt.Errorf("invalid nil key received for MepId")
	}

	key := *v.MepId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[uint16]*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCcmHoldTime retrieves the value of the CcmHoldTime field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetOrCreateCcmHoldTime() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime {
	if t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	t.CcmHoldTime = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime{}
	return t.CcmHoldTime
}

// GetOrCreateNetworkInstance retrieves the value of the NetworkInstance field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetOrCreateNetworkInstance() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance {
	if t.NetworkInstance != nil {
		return t.NetworkInstance
	}
	t.NetworkInstance = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance{}
	return t.NetworkInstance
}

// GetOrCreateRemoteMepAutoDiscovery retrieves the value of the RemoteMepAutoDiscovery field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetOrCreateRemoteMepAutoDiscovery() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery {
	if t.RemoteMepAutoDiscovery != nil {
		return t.RemoteMepAutoDiscovery
	}
	t.RemoteMepAutoDiscovery = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery{}
	return t.RemoteMepAutoDiscovery
}

// GetCcmHoldTime returns the value of the CcmHoldTime struct pointer
// from SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the receiver or the field CcmHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetCcmHoldTime() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime {
	if t != nil && t.CcmHoldTime != nil {
		return t.CcmHoldTime
	}
	return nil
}

// GetNetworkInstance returns the value of the NetworkInstance struct pointer
// from SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the receiver or the field NetworkInstance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetNetworkInstance() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance {
	if t != nil && t.NetworkInstance != nil {
		return t.NetworkInstance
	}
	return nil
}

// GetRemoteMepAutoDiscovery returns the value of the RemoteMepAutoDiscovery struct pointer
// from SrlNokiaOam_Oam_Ethcfm_Domain_Association. If the receiver or the field RemoteMepAutoDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetRemoteMepAutoDiscovery() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery {
	if t != nil && t.RemoteMepAutoDiscovery != nil {
		return t.RemoteMepAutoDiscovery
	}
	return nil
}

// GetAssociationFormat retrieves the value of the leaf AssociationFormat from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationFormat is set, it can
// safely use t.GetAssociationFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationFormat == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetAssociationFormat() E_SrlNokiaEthcfmTypes_AssociationFormatType {
	if t == nil || t.AssociationFormat == 0 {
		return 0
	}
	return t.AssociationFormat
}

// GetAssociationId retrieves the value of the leaf AssociationId from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationId is set, it can
// safely use t.GetAssociationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationId == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetAssociationId() string {
	if t == nil || t.AssociationId == nil {
		return ""
	}
	return *t.AssociationId
}

// GetCcmInterval retrieves the value of the leaf CcmInterval from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmInterval is set, it can
// safely use t.GetCcmInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetCcmInterval() E_SrlNokiaEthcfmTypes_CcmIntervalType {
	if t == nil || t.CcmInterval == 0 {
		return SrlNokiaEthcfmTypes_CcmIntervalType_1s
	}
	return t.CcmInterval
}

// GetIccValue retrieves the value of the leaf IccValue from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IccValue is set, it can
// safely use t.GetIccValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IccValue == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetIccValue() string {
	if t == nil || t.IccValue == nil {
		return ""
	}
	return *t.IccValue
}

// GetId retrieves the value of the leaf Id from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNumber retrieves the value of the leaf Number from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetSenderIdPermissionType retrieves the value of the leaf SenderIdPermissionType from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderIdPermissionType is set, it can
// safely use t.GetSenderIdPermissionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderIdPermissionType == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetSenderIdPermissionType() E_SrlNokiaEthcfmTypes_IdPermissionType {
	if t == nil || t.SenderIdPermissionType == 0 {
		return SrlNokiaEthcfmTypes_IdPermissionType_none
	}
	return t.SenderIdPermissionType
}

// GetVid retrieves the value of the leaf Vid from the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vid is set, it can
// safely use t.GetVid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vid == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) GetVid() uint16 {
	if t == nil || t.Vid == nil {
		return 0
	}
	return *t.Vid
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CcmInterval == 0 {
		t.CcmInterval = SrlNokiaEthcfmTypes_CcmIntervalType_1s
	}
	if t.SenderIdPermissionType == 0 {
		t.SenderIdPermissionType = SrlNokiaEthcfmTypes_IdPermissionType_none
	}
	t.CcmHoldTime.PopulateDefaults()
	t.NetworkInstance.PopulateDefaults()
	t.RemoteMepAutoDiscovery.PopulateDefaults()
	for _, e := range t.AssociationMeps {
		e.PopulateDefaults()
	}
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_Ethcfm_Domain_Association struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AssociationId == nil {
		return nil, fmt.Errorf("nil value for key AssociationId")
	}

	return map[string]interface{}{
		"association-id": *t.AssociationId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps represents the /srl_nokia-oam/oam/ethcfm/domain/association/association-meps YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps struct {
	MepId *uint16 `path:"mep-id" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) IsYANGGoStruct() {}

// GetMepId retrieves the value of the leaf MepId from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"mep-id": *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_AssociationMeps) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime represents the /srl_nokia-oam/oam/ethcfm/domain/association/ccm-hold-time YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime struct {
	DelayTimeout *uint32 `path:"delay-timeout" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) IsYANGGoStruct() {}

// GetDelayTimeout retrieves the value of the leaf DelayTimeout from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayTimeout is set, it can
// safely use t.GetDelayTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayTimeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) GetDelayTimeout() uint32 {
	if t == nil || t.DelayTimeout == nil {
		return 0
	}
	return *t.DelayTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DelayTimeout == nil {
		var v uint32 = 0
		t.DelayTimeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_CcmHoldTime) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep represents the /srl_nokia-oam/oam/ethcfm/domain/association/mep YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep struct {
	AdminState      E_SrlNokiaCommon_AdminState                                    `path:"admin-state" module:"srl_nokia-ethcfm"`
	CcmLtmPriority  *uint8                                                         `path:"ccm-ltm-priority" module:"srl_nokia-ethcfm"`
	ContinuityCheck *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck `path:"continuity-check" module:"srl_nokia-ethcfm"`
	Direction       E_SrlNokiaEthcfmTypes_MepDirectionType                         `path:"direction" module:"srl_nokia-ethcfm"`
	InterfaceRef    *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef    `path:"interface-ref" module:"srl_nokia-ethcfm"`
	MacAddress      *string                                                        `path:"mac-address" module:"srl_nokia-ethcfm"`
	MepId           *uint16                                                        `path:"mep-id" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) IsYANGGoStruct() {}

// GetOrCreateContinuityCheck retrieves the value of the ContinuityCheck field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetOrCreateContinuityCheck() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck {
	if t.ContinuityCheck != nil {
		return t.ContinuityCheck
	}
	t.ContinuityCheck = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck{}
	return t.ContinuityCheck
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetOrCreateInterfaceRef() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef{}
	return t.InterfaceRef
}

// GetContinuityCheck returns the value of the ContinuityCheck struct pointer
// from SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep. If the receiver or the field ContinuityCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetContinuityCheck() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck {
	if t != nil && t.ContinuityCheck != nil {
		return t.ContinuityCheck
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetInterfaceRef() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetDirection retrieves the value of the leaf Direction from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetDirection() E_SrlNokiaEthcfmTypes_MepDirectionType {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetMacAddress retrieves the value of the leaf MacAddress from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMepId retrieves the value of the leaf MepId from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	t.ContinuityCheck.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"mep-id": *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck represents the /srl_nokia-oam/oam/ethcfm/domain/association/mep/continuity-check YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck struct {
	CcmLocalFault             *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault `path:"ccm-local-fault" module:"srl_nokia-ethcfm"`
	CcmTransmit               E_SrlNokiaCommon_AdminState                                                  `path:"ccm-transmit" module:"srl_nokia-ethcfm"`
	LowestFaultPriorityDefect E_SrlNokiaEthcfmTypes_LowestAlarmPriorityType                                `path:"lowest-fault-priority-defect" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) IsYANGGoStruct() {}

// GetOrCreateCcmLocalFault retrieves the value of the CcmLocalFault field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) GetOrCreateCcmLocalFault() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault {
	if t.CcmLocalFault != nil {
		return t.CcmLocalFault
	}
	t.CcmLocalFault = &SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault{}
	return t.CcmLocalFault
}

// GetCcmLocalFault returns the value of the CcmLocalFault struct pointer
// from SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck. If the receiver or the field CcmLocalFault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) GetCcmLocalFault() *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault {
	if t != nil && t.CcmLocalFault != nil {
		return t.CcmLocalFault
	}
	return nil
}

// GetCcmTransmit retrieves the value of the leaf CcmTransmit from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmTransmit is set, it can
// safely use t.GetCcmTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmTransmit == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) GetCcmTransmit() E_SrlNokiaCommon_AdminState {
	if t == nil || t.CcmTransmit == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.CcmTransmit
}

// GetLowestFaultPriorityDefect retrieves the value of the leaf LowestFaultPriorityDefect from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowestFaultPriorityDefect is set, it can
// safely use t.GetLowestFaultPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowestFaultPriorityDefect == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) GetLowestFaultPriorityDefect() E_SrlNokiaEthcfmTypes_LowestAlarmPriorityType {
	if t == nil || t.LowestFaultPriorityDefect == 0 {
		return SrlNokiaEthcfmTypes_LowestAlarmPriorityType_mac_remote_error_xcon
	}
	return t.LowestFaultPriorityDefect
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CcmTransmit == 0 {
		t.CcmTransmit = SrlNokiaCommon_AdminState_disable
	}
	if t.LowestFaultPriorityDefect == 0 {
		t.LowestFaultPriorityDefect = SrlNokiaEthcfmTypes_LowestAlarmPriorityType_mac_remote_error_xcon
	}
	t.CcmLocalFault.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault represents the /srl_nokia-oam/oam/ethcfm/domain/association/mep/continuity-check/ccm-local-fault YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault struct {
	Action E_SrlNokiaEthcfmTypes_ActionType `path:"action" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) GetAction() E_SrlNokiaEthcfmTypes_ActionType {
	if t == nil || t.Action == 0 {
		return SrlNokiaEthcfmTypes_ActionType_deny
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = SrlNokiaEthcfmTypes_ActionType_deny
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_ContinuityCheck_CcmLocalFault) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef represents the /srl_nokia-oam/oam/ethcfm/domain/association/mep/interface-ref YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef struct {
	Interface    *string `path:"interface" module:"srl_nokia-ethcfm"`
	Subinterface *uint32 `path:"subinterface" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_Mep_InterfaceRef) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance represents the /srl_nokia-oam/oam/ethcfm/domain/association/network-instance YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance struct {
	Name *string `path:"name" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_NetworkInstance) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery represents the /srl_nokia-oam/oam/ethcfm/domain/association/remote-mep-auto-discovery YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery struct {
	AdminState E_SrlNokiaCommon_AdminState                                                       `path:"admin-state" module:"srl_nokia-ethcfm"`
	AgingTimer SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union `path:"aging-timer" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAgingTimer retrieves the value of the leaf AgingTimer from the SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgingTimer is set, it can
// safely use t.GetAgingTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgingTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) GetAgingTimer() SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union {
	if t == nil || t.AgingTimer == nil {
		return SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum_none
	}
	return t.AgingTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.AgingTimer == nil {
		t.AgingTimer = SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery.
func (*SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ethcfm_SenderId represents the /srl_nokia-oam/oam/ethcfm/sender-id YANG schema element.
type SrlNokiaOam_Oam_Ethcfm_SenderId struct {
	ChassisLocalName *string                                `path:"chassis-local-name" module:"srl_nokia-ethcfm"`
	ChassisType      E_SrlNokiaEthcfmTypes_ChassisIdSubtype `path:"chassis-type" module:"srl_nokia-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ethcfm_SenderId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ethcfm_SenderId) IsYANGGoStruct() {}

// GetChassisLocalName retrieves the value of the leaf ChassisLocalName from the SrlNokiaOam_Oam_Ethcfm_SenderId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisLocalName is set, it can
// safely use t.GetChassisLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisLocalName == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_SenderId) GetChassisLocalName() string {
	if t == nil || t.ChassisLocalName == nil {
		return ""
	}
	return *t.ChassisLocalName
}

// GetChassisType retrieves the value of the leaf ChassisType from the SrlNokiaOam_Oam_Ethcfm_SenderId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChassisType is set, it can
// safely use t.GetChassisType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChassisType == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ethcfm_SenderId) GetChassisType() E_SrlNokiaEthcfmTypes_ChassisIdSubtype {
	if t == nil || t.ChassisType == 0 {
		return SrlNokiaEthcfmTypes_ChassisIdSubtype_system
	}
	return t.ChassisType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ethcfm_SenderId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ethcfm_SenderId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChassisType == 0 {
		t.ChassisType = SrlNokiaEthcfmTypes_ChassisIdSubtype_system
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_SenderId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ethcfm_SenderId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ethcfm_SenderId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ethcfm_SenderId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ethcfm_SenderId.
func (*SrlNokiaOam_Oam_Ethcfm_SenderId) ΛBelongingModule() string {
	return "srl_nokia-ethcfm"
}

// SrlNokiaOam_Oam_Ippm represents the /srl_nokia-oam/oam/ippm YANG schema element.
type SrlNokiaOam_Oam_Ippm struct {
	SourceUdpPortPools *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools `path:"source-udp-port-pools" module:"srl_nokia-ippm-source-udp-pool"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ippm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ippm) IsYANGGoStruct() {}

// GetOrCreateSourceUdpPortPools retrieves the value of the SourceUdpPortPools field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_Ippm) GetOrCreateSourceUdpPortPools() *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools {
	if t.SourceUdpPortPools != nil {
		return t.SourceUdpPortPools
	}
	t.SourceUdpPortPools = &SrlNokiaOam_Oam_Ippm_SourceUdpPortPools{}
	return t.SourceUdpPortPools
}

// GetSourceUdpPortPools returns the value of the SourceUdpPortPools struct pointer
// from SrlNokiaOam_Oam_Ippm. If the receiver or the field SourceUdpPortPools is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_Ippm) GetSourceUdpPortPools() *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools {
	if t != nil && t.SourceUdpPortPools != nil {
		return t.SourceUdpPortPools
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ippm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ippm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SourceUdpPortPools.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ippm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ippm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ippm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ippm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ippm.
func (*SrlNokiaOam_Oam_Ippm) ΛBelongingModule() string {
	return "srl_nokia-ippm-source-udp-pool"
}

// SrlNokiaOam_Oam_Ippm_SourceUdpPortPools represents the /srl_nokia-oam/oam/ippm/source-udp-port-pools YANG schema element.
type SrlNokiaOam_Oam_Ippm_SourceUdpPortPools struct {
	Port map[uint16]*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port `path:"port" module:"srl_nokia-ippm-source-udp-pool"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ippm_SourceUdpPortPools implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) IsYANGGoStruct() {}

// NewPort creates a new entry in the Port list of the
// SrlNokiaOam_Oam_Ippm_SourceUdpPortPools struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) NewPort(PortNumber uint16) (*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[uint16]*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port)
	}

	key := PortNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port{
		PortNumber: &PortNumber,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the SrlNokiaOam_Oam_Ippm_SourceUdpPortPools struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) RenamePort(oldK, newK uint16) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortNumber = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ippm_SourceUdpPortPools. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) GetOrCreatePort(PortNumber uint16) *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port {
	key := PortNumber

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of SrlNokiaOam_Oam_Ippm_SourceUdpPortPools. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) GetPort(PortNumber uint16) *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port {
	if t == nil {
		return nil
	}

	key := PortNumber

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_Ippm_SourceUdpPortPools. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) DeletePort(PortNumber uint16) {
	key := PortNumber

	delete(t.Port, key)
}

// AppendPort appends the supplied SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port struct to the
// list Port of SrlNokiaOam_Oam_Ippm_SourceUdpPortPools. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) AppendPort(v *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) error {
	if v.PortNumber == nil {
		return fmt.Errorf("invalid nil key received for PortNumber")
	}

	key := *v.PortNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[uint16]*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ippm_SourceUdpPortPools
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ippm_SourceUdpPortPools"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ippm_SourceUdpPortPools.
func (*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools) ΛBelongingModule() string {
	return "srl_nokia-ippm-source-udp-pool"
}

// SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port represents the /srl_nokia-oam/oam/ippm/source-udp-port-pools/port YANG schema element.
type SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port struct {
	ApplicationAssignment E_SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port_ApplicationAssignment `path:"application-assignment" module:"srl_nokia-ippm-source-udp-pool"`
	PortNumber            *uint16                                                              `path:"port-number" module:"srl_nokia-ippm-source-udp-pool"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) IsYANGGoStruct() {}

// GetApplicationAssignment retrieves the value of the leaf ApplicationAssignment from the SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationAssignment is set, it can
// safely use t.GetApplicationAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationAssignment == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) GetApplicationAssignment() E_SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port_ApplicationAssignment {
	if t == nil || t.ApplicationAssignment == 0 {
		return 0
	}
	return t.ApplicationAssignment
}

// GetPortNumber retrieves the value of the leaf PortNumber from the SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNumber is set, it can
// safely use t.GetPortNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) GetPortNumber() uint16 {
	if t == nil || t.PortNumber == nil {
		return 0
	}
	return *t.PortNumber
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortNumber == nil {
		return nil, fmt.Errorf("nil value for key PortNumber")
	}

	return map[string]interface{}{
		"port-number": *t.PortNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port.
func (*SrlNokiaOam_Oam_Ippm_SourceUdpPortPools_Port) ΛBelongingModule() string {
	return "srl_nokia-ippm-source-udp-pool"
}

// SrlNokiaOam_Oam_LinkMeasurement represents the /srl_nokia-oam/oam/link-measurement YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement struct {
	MeasurementTemplate map[string]*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate `path:"measurement-template" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement) IsYANGGoStruct() {}

// NewMeasurementTemplate creates a new entry in the MeasurementTemplate list of the
// SrlNokiaOam_Oam_LinkMeasurement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_LinkMeasurement) NewMeasurementTemplate(TemplateName string) (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementTemplate == nil {
		t.MeasurementTemplate = make(map[string]*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeasurementTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeasurementTemplate", key)
	}

	t.MeasurementTemplate[key] = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate{
		TemplateName: &TemplateName,
	}

	return t.MeasurementTemplate[key], nil
}

// RenameMeasurementTemplate renames an entry in the list MeasurementTemplate within
// the SrlNokiaOam_Oam_LinkMeasurement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_LinkMeasurement) RenameMeasurementTemplate(oldK, newK string) error {
	if _, ok := t.MeasurementTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in MeasurementTemplate", newK)
	}

	e, ok := t.MeasurementTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeasurementTemplate", oldK)
	}
	e.TemplateName = &newK

	t.MeasurementTemplate[newK] = e
	delete(t.MeasurementTemplate, oldK)
	return nil
}

// GetOrCreateMeasurementTemplate retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_LinkMeasurement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_LinkMeasurement) GetOrCreateMeasurementTemplate(TemplateName string) *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate {
	key := TemplateName

	if v, ok := t.MeasurementTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeasurementTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeasurementTemplate got unexpected error: %v", err))
	}
	return v
}

// GetMeasurementTemplate retrieves the value with the specified key from
// the MeasurementTemplate map field of SrlNokiaOam_Oam_LinkMeasurement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement) GetMeasurementTemplate(TemplateName string) *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate {
	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.MeasurementTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeasurementTemplate deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_LinkMeasurement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_LinkMeasurement) DeleteMeasurementTemplate(TemplateName string) {
	key := TemplateName

	delete(t.MeasurementTemplate, key)
}

// AppendMeasurementTemplate appends the supplied SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate struct to the
// list MeasurementTemplate of SrlNokiaOam_Oam_LinkMeasurement. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_LinkMeasurement) AppendMeasurementTemplate(
	v *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate,
) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementTemplate == nil {
		t.MeasurementTemplate = make(map[string]*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate)
	}

	if _, ok := t.MeasurementTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list MeasurementTemplate %v", key)
	}

	t.MeasurementTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MeasurementTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement.
func (*SrlNokiaOam_Oam_LinkMeasurement) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate represents the /srl_nokia-oam/oam/link-measurement/measurement-template YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate struct {
	AdminState                E_SrlNokiaCommon_AdminState                                                     `path:"admin-state" module:"srl_nokia-link-measurement"`
	Delay                     E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Delay                     `path:"delay" module:"srl_nokia-link-measurement"`
	Description               *string                                                                         `path:"description" module:"srl_nokia-link-measurement"`
	Interval                  *uint32                                                                         `path:"interval" module:"srl_nokia-link-measurement"`
	LastReportedDelayHold     *uint32                                                                         `path:"last-reported-delay-hold" module:"srl_nokia-link-measurement"`
	Reporting                 *bool                                                                           `path:"reporting" module:"srl_nokia-link-measurement"`
	Stamp                     *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp                      `path:"stamp" module:"srl_nokia-link-measurement"`
	TemplateName              *string                                                                         `path:"template-name" module:"srl_nokia-link-measurement"`
	UnidirectionalMeasurement E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement `path:"unidirectional-measurement" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) IsYANGGoStruct() {}

// GetOrCreateStamp retrieves the value of the Stamp field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetOrCreateStamp() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp {
	if t.Stamp != nil {
		return t.Stamp
	}
	t.Stamp = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp{}
	return t.Stamp
}

// GetStamp returns the value of the Stamp struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate. If the receiver or the field Stamp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetStamp() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp {
	if t != nil && t.Stamp != nil {
		return t.Stamp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDelay retrieves the value of the leaf Delay from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetDelay() E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Delay {
	if t == nil || t.Delay == 0 {
		return SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Delay_minimum
	}
	return t.Delay
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterval retrieves the value of the leaf Interval from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLastReportedDelayHold retrieves the value of the leaf LastReportedDelayHold from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastReportedDelayHold is set, it can
// safely use t.GetLastReportedDelayHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastReportedDelayHold == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetLastReportedDelayHold() uint32 {
	if t == nil || t.LastReportedDelayHold == nil {
		return 86400
	}
	return *t.LastReportedDelayHold
}

// GetReporting retrieves the value of the leaf Reporting from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reporting is set, it can
// safely use t.GetReporting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reporting == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetReporting() bool {
	if t == nil || t.Reporting == nil {
		return true
	}
	return *t.Reporting
}

// GetTemplateName retrieves the value of the leaf TemplateName from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// GetUnidirectionalMeasurement retrieves the value of the leaf UnidirectionalMeasurement from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnidirectionalMeasurement is set, it can
// safely use t.GetUnidirectionalMeasurement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnidirectionalMeasurement == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) GetUnidirectionalMeasurement() E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement {
	if t == nil || t.UnidirectionalMeasurement == 0 {
		return SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement_derived
	}
	return t.UnidirectionalMeasurement
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.Delay == 0 {
		t.Delay = SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Delay_minimum
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LastReportedDelayHold == nil {
		var v uint32 = 86400
		t.LastReportedDelayHold = &v
	}
	if t.Reporting == nil {
		var v bool = true
		t.Reporting = &v
	}
	if t.UnidirectionalMeasurement == 0 {
		t.UnidirectionalMeasurement = SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement_derived
	}
	t.Stamp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp struct {
	AggregateSampleWindow    *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow    `path:"aggregate-sample-window" module:"srl_nokia-link-measurement"`
	AllowEgressRemarkDscp    *bool                                                                               `path:"allow-egress-remark-dscp" module:"srl_nokia-link-measurement"`
	AllowIpv6UdpChecksumZero *bool                                                                               `path:"allow-ipv6-udp-checksum-zero" module:"srl_nokia-link-measurement"`
	DestinationUdpPort       *uint16                                                                             `path:"destination-udp-port" module:"srl_nokia-link-measurement"`
	Dscp                     SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union                `path:"dscp" module:"srl_nokia-link-measurement"`
	ForwardingClass          SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union     `path:"forwarding-class" module:"srl_nokia-link-measurement"`
	Ipv6DestinationDiscovery *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery `path:"ipv6-destination-discovery" module:"srl_nokia-link-measurement"`
	PadTlvSize               *uint32                                                                             `path:"pad-tlv-size" module:"srl_nokia-link-measurement"`
	Profile                  E_SrlNokiaCommon_RewriteProfile                                                     `path:"profile" module:"srl_nokia-link-measurement"`
	ReturnPath               *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath               `path:"return-path" module:"srl_nokia-link-measurement"`
	SampleWindow             *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow             `path:"sample-window" module:"srl_nokia-link-measurement"`
	SourceUdpPort            SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union       `path:"source-udp-port" module:"srl_nokia-link-measurement"`
	TimestampFormat          E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_TimestampFormat         `path:"timestamp-format" module:"srl_nokia-link-measurement"`
	Ttl                      *uint32                                                                             `path:"ttl" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) IsYANGGoStruct() {}

// GetOrCreateAggregateSampleWindow retrieves the value of the AggregateSampleWindow field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetOrCreateAggregateSampleWindow() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow {
	if t.AggregateSampleWindow != nil {
		return t.AggregateSampleWindow
	}
	t.AggregateSampleWindow = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow{}
	return t.AggregateSampleWindow
}

// GetOrCreateIpv6DestinationDiscovery retrieves the value of the Ipv6DestinationDiscovery field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetOrCreateIpv6DestinationDiscovery() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery {
	if t.Ipv6DestinationDiscovery != nil {
		return t.Ipv6DestinationDiscovery
	}
	t.Ipv6DestinationDiscovery = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery{}
	return t.Ipv6DestinationDiscovery
}

// GetOrCreateReturnPath retrieves the value of the ReturnPath field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetOrCreateReturnPath() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath {
	if t.ReturnPath != nil {
		return t.ReturnPath
	}
	t.ReturnPath = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath{}
	return t.ReturnPath
}

// GetOrCreateSampleWindow retrieves the value of the SampleWindow field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetOrCreateSampleWindow() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow {
	if t.SampleWindow != nil {
		return t.SampleWindow
	}
	t.SampleWindow = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow{}
	return t.SampleWindow
}

// GetAggregateSampleWindow returns the value of the AggregateSampleWindow struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp. If the receiver or the field AggregateSampleWindow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetAggregateSampleWindow() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow {
	if t != nil && t.AggregateSampleWindow != nil {
		return t.AggregateSampleWindow
	}
	return nil
}

// GetIpv6DestinationDiscovery returns the value of the Ipv6DestinationDiscovery struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp. If the receiver or the field Ipv6DestinationDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetIpv6DestinationDiscovery() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery {
	if t != nil && t.Ipv6DestinationDiscovery != nil {
		return t.Ipv6DestinationDiscovery
	}
	return nil
}

// GetReturnPath returns the value of the ReturnPath struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp. If the receiver or the field ReturnPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetReturnPath() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath {
	if t != nil && t.ReturnPath != nil {
		return t.ReturnPath
	}
	return nil
}

// GetSampleWindow returns the value of the SampleWindow struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp. If the receiver or the field SampleWindow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetSampleWindow() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow {
	if t != nil && t.SampleWindow != nil {
		return t.SampleWindow
	}
	return nil
}

// GetAllowEgressRemarkDscp retrieves the value of the leaf AllowEgressRemarkDscp from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowEgressRemarkDscp is set, it can
// safely use t.GetAllowEgressRemarkDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowEgressRemarkDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetAllowEgressRemarkDscp() bool {
	if t == nil || t.AllowEgressRemarkDscp == nil {
		return false
	}
	return *t.AllowEgressRemarkDscp
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetDestinationUdpPort retrieves the value of the leaf DestinationUdpPort from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationUdpPort is set, it can
// safely use t.GetDestinationUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationUdpPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetDestinationUdpPort() uint16 {
	if t == nil || t.DestinationUdpPort == nil {
		return 862
	}
	return *t.DestinationUdpPort
}

// GetDscp retrieves the value of the leaf Dscp from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetDscp() SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union {
	if t == nil || t.Dscp == nil {
		return SrlNokiaCommon_DscpName_CS6
	}
	return t.Dscp
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetForwardingClass() SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetPadTlvSize retrieves the value of the leaf PadTlvSize from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadTlvSize is set, it can
// safely use t.GetPadTlvSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadTlvSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetPadTlvSize() uint32 {
	if t == nil || t.PadTlvSize == nil {
		return 0
	}
	return *t.PadTlvSize
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetProfile() E_SrlNokiaCommon_RewriteProfile {
	if t == nil || t.Profile == 0 {
		return SrlNokiaCommon_RewriteProfile_in
	}
	return t.Profile
}

// GetSourceUdpPort retrieves the value of the leaf SourceUdpPort from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceUdpPort is set, it can
// safely use t.GetSourceUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceUdpPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetSourceUdpPort() SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union {
	if t == nil || t.SourceUdpPort == nil {
		return SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum_auto
	}
	return t.SourceUdpPort
}

// GetTimestampFormat retrieves the value of the leaf TimestampFormat from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimestampFormat is set, it can
// safely use t.GetTimestampFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimestampFormat == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetTimestampFormat() E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_TimestampFormat {
	if t == nil || t.TimestampFormat == 0 {
		return SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_TimestampFormat_ntp
	}
	return t.TimestampFormat
}

// GetTtl retrieves the value of the leaf Ttl from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 1
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowEgressRemarkDscp == nil {
		var v bool = false
		t.AllowEgressRemarkDscp = &v
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	if t.DestinationUdpPort == nil {
		var v uint16 = 862
		t.DestinationUdpPort = &v
	}
	if t.Dscp == nil {
		t.Dscp = SrlNokiaCommon_DscpName_CS6
	}
	if t.Profile == 0 {
		t.Profile = SrlNokiaCommon_RewriteProfile_in
	}
	if t.SourceUdpPort == nil {
		t.SourceUdpPort = SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum_auto
	}
	if t.TimestampFormat == 0 {
		t.TimestampFormat = SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_TimestampFormat_ntp
	}
	if t.Ttl == nil {
		var v uint32 = 1
		t.Ttl = &v
	}
	t.AggregateSampleWindow.PopulateDefaults()
	t.Ipv6DestinationDiscovery.PopulateDefaults()
	t.ReturnPath.PopulateDefaults()
	t.SampleWindow.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/aggregate-sample-window YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow struct {
	Multiplier      *uint32                                                                                    `path:"multiplier" module:"srl_nokia-link-measurement"`
	Threshold       *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold `path:"threshold" module:"srl_nokia-link-measurement"`
	WindowIntegrity *uint32                                                                                    `path:"window-integrity" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) IsYANGGoStruct() {
}

// GetOrCreateThreshold retrieves the value of the Threshold field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) GetOrCreateThreshold() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold {
	if t.Threshold != nil {
		return t.Threshold
	}
	t.Threshold = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold{}
	return t.Threshold
}

// GetThreshold returns the value of the Threshold struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow. If the receiver or the field Threshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) GetThreshold() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold {
	if t != nil && t.Threshold != nil {
		return t.Threshold
	}
	return nil
}

// GetMultiplier retrieves the value of the leaf Multiplier from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 12
	}
	return *t.Multiplier
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 0
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 12
		t.Multiplier = &v
	}
	t.Threshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/aggregate-sample-window/threshold YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold struct {
	Absolute *uint32 `path:"absolute" module:"srl_nokia-link-measurement"`
	Relative *uint32 `path:"relative" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetRelative retrieves the value of the leaf Relative from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Relative is set, it can
// safely use t.GetRelative() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Relative == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) GetRelative() uint32 {
	if t == nil || t.Relative == nil {
		return 0
	}
	return *t.Relative
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_AggregateSampleWindow_Threshold) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/ipv6-destination-discovery YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery struct {
	AdminState        E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-link-measurement"`
	DiscoveryInterval *uint32                     `path:"discovery-interval" module:"srl_nokia-link-measurement"`
	DiscoveryTimer    *uint32                     `path:"discovery-timer" module:"srl_nokia-link-measurement"`
	UpdateInterval    *uint32                     `path:"update-interval" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDiscoveryInterval retrieves the value of the leaf DiscoveryInterval from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoveryInterval is set, it can
// safely use t.GetDiscoveryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoveryInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) GetDiscoveryInterval() uint32 {
	if t == nil || t.DiscoveryInterval == nil {
		return 10
	}
	return *t.DiscoveryInterval
}

// GetDiscoveryTimer retrieves the value of the leaf DiscoveryTimer from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoveryTimer is set, it can
// safely use t.GetDiscoveryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoveryTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) GetDiscoveryTimer() uint32 {
	if t == nil || t.DiscoveryTimer == nil {
		return 60
	}
	return *t.DiscoveryTimer
}

// GetUpdateInterval retrieves the value of the leaf UpdateInterval from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateInterval is set, it can
// safely use t.GetUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) GetUpdateInterval() uint32 {
	if t == nil || t.UpdateInterval == nil {
		return 600
	}
	return *t.UpdateInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.DiscoveryInterval == nil {
		var v uint32 = 10
		t.DiscoveryInterval = &v
	}
	if t.DiscoveryTimer == nil {
		var v uint32 = 60
		t.DiscoveryTimer = &v
	}
	if t.UpdateInterval == nil {
		var v uint32 = 600
		t.UpdateInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Ipv6DestinationDiscovery) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/return-path YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath struct {
	Link *bool `path:"link" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) IsYANGGoStruct() {}

// GetLink retrieves the value of the leaf Link from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Link is set, it can
// safely use t.GetLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Link == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) GetLink() bool {
	if t == nil || t.Link == nil {
		return false
	}
	return *t.Link
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Link == nil {
		var v bool = false
		t.Link = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ReturnPath) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/sample-window YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow struct {
	Multiplier      *uint32                                                                           `path:"multiplier" module:"srl_nokia-link-measurement"`
	Threshold       *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold `path:"threshold" module:"srl_nokia-link-measurement"`
	WindowIntegrity *uint32                                                                           `path:"window-integrity" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) IsYANGGoStruct() {}

// GetOrCreateThreshold retrieves the value of the Threshold field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) GetOrCreateThreshold() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold {
	if t.Threshold != nil {
		return t.Threshold
	}
	t.Threshold = &SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold{}
	return t.Threshold
}

// GetThreshold returns the value of the Threshold struct pointer
// from SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow. If the receiver or the field Threshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) GetThreshold() *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold {
	if t != nil && t.Threshold != nil {
		return t.Threshold
	}
	return nil
}

// GetMultiplier retrieves the value of the leaf Multiplier from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 0
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	t.Threshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold represents the /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/sample-window/threshold YANG schema element.
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold struct {
	Absolute *uint32 `path:"absolute" module:"srl_nokia-link-measurement"`
	Relative *uint32 `path:"relative" module:"srl_nokia-link-measurement"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetRelative retrieves the value of the leaf Relative from the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Relative is set, it can
// safely use t.GetRelative() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Relative == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) GetRelative() uint32 {
	if t == nil || t.Relative == nil {
		return 0
	}
	return *t.Relative
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold.
func (*SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SampleWindow_Threshold) ΛBelongingModule() string {
	return "srl_nokia-link-measurement"
}

// SrlNokiaOam_Oam_PerformanceMonitoring represents the /srl_nokia-oam/oam/performance-monitoring YANG schema element.
type SrlNokiaOam_Oam_PerformanceMonitoring struct {
	Ethcfm *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm `path:"ethcfm" module:"srl_nokia-oam-pm-ethcfm"`
	Ip     *SrlNokiaOam_Oam_PerformanceMonitoring_Ip     `path:"ip" module:"srl_nokia-oam-pm-ip"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_PerformanceMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_PerformanceMonitoring) IsYANGGoStruct() {}

// GetOrCreateEthcfm retrieves the value of the Ethcfm field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) GetOrCreateEthcfm() *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm {
	if t.Ethcfm != nil {
		return t.Ethcfm
	}
	t.Ethcfm = &SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm{}
	return t.Ethcfm
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) GetOrCreateIp() *SrlNokiaOam_Oam_PerformanceMonitoring_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &SrlNokiaOam_Oam_PerformanceMonitoring_Ip{}
	return t.Ip
}

// GetEthcfm returns the value of the Ethcfm struct pointer
// from SrlNokiaOam_Oam_PerformanceMonitoring. If the receiver or the field Ethcfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) GetEthcfm() *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm {
	if t != nil && t.Ethcfm != nil {
		return t.Ethcfm
	}
	return nil
}

// GetIp returns the value of the Ip struct pointer
// from SrlNokiaOam_Oam_PerformanceMonitoring. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) GetIp() *SrlNokiaOam_Oam_PerformanceMonitoring_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_PerformanceMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ethcfm.PopulateDefaults()
	t.Ip.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_PerformanceMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_PerformanceMonitoring.
func (*SrlNokiaOam_Oam_PerformanceMonitoring) ΛBelongingModule() string {
	return "srl_nokia-oam"
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm represents the /srl_nokia-oam/oam/performance-monitoring/ethcfm YANG schema element.
type SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm struct {
	Delay   *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay              `path:"delay" module:"srl_nokia-oam-pm-ethcfm"`
	Loss    *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Loss               `path:"loss" module:"srl_nokia-oam-pm-ethcfm"`
	Session map[string]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session `path:"session" module:"srl_nokia-oam-pm-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) IsYANGGoStruct() {}

// NewSession creates a new entry in the Session list of the
// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) NewSession(SessionName string) (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[string]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session)
	}

	key := SessionName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Session[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Session", key)
	}

	t.Session[key] = &SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session{
		SessionName: &SessionName,
	}

	return t.Session[key], nil
}

// RenameSession renames an entry in the list Session within
// the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) RenameSession(oldK, newK string) error {
	if _, ok := t.Session[newK]; ok {
		return fmt.Errorf("key %v already exists in Session", newK)
	}

	e, ok := t.Session[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Session", oldK)
	}
	e.SessionName = &newK

	t.Session[newK] = e
	delete(t.Session, oldK)
	return nil
}

// GetOrCreateSession retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) GetOrCreateSession(SessionName string) *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session {
	key := SessionName

	if v, ok := t.Session[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSession(SessionName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSession got unexpected error: %v", err))
	}
	return v
}

// GetSession retrieves the value with the specified key from
// the Session map field of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) GetSession(SessionName string) *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session {
	if t == nil {
		return nil
	}

	key := SessionName

	if lm, ok := t.Session[key]; ok {
		return lm
	}
	return nil
}

// DeleteSession deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) DeleteSession(SessionName string) {
	key := SessionName

	delete(t.Session, key)
}

// AppendSession appends the supplied SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session struct to the
// list Session of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) AppendSession(
	v *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session,
) error {
	if v.SessionName == nil {
		return fmt.Errorf("invalid nil key received for SessionName")
	}

	key := *v.SessionName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[string]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session)
	}

	if _, ok := t.Session[key]; ok {
		return fmt.Errorf("duplicate key for list Session %v", key)
	}

	t.Session[key] = v
	return nil
}

// GetOrCreateDelay retrieves the value of the Delay field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) GetOrCreateDelay() *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay {
	if t.Delay != nil {
		return t.Delay
	}
	t.Delay = &SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay{}
	return t.Delay
}

// GetOrCreateLoss retrieves the value of the Loss field
// or returns the existing field if it already exists.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) GetOrCreateLoss() *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Loss {
	if t.Loss != nil {
		return t.Loss
	}
	t.Loss = &SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Loss{}
	return t.Loss
}

// GetDelay returns the value of the Delay struct pointer
// from SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm. If the receiver or the field Delay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) GetDelay() *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay {
	if t != nil && t.Delay != nil {
		return t.Delay
	}
	return nil
}

// GetLoss returns the value of the Loss struct pointer
// from SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm. If the receiver or the field Loss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) GetLoss() *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Loss {
	if t != nil && t.Loss != nil {
		return t.Loss
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Delay.PopulateDefaults()
	t.Loss.PopulateDefaults()
	for _, e := range t.Session {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm.
func (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm) ΛBelongingModule() string {
	return "srl_nokia-oam-pm-ethcfm"
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay represents the /srl_nokia-oam/oam/performance-monitoring/ethcfm/delay YANG schema element.
type SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay struct {
	BinGroup map[string]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup `path:"bin-group" module:"srl_nokia-oam-pm-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) IsYANGGoStruct() {}

// NewBinGroup creates a new entry in the BinGroup list of the
// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) NewBinGroup(BinGroupName string) (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinGroup == nil {
		t.BinGroup = make(map[string]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup)
	}

	key := BinGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BinGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BinGroup", key)
	}

	t.BinGroup[key] = &SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup{
		BinGroupName: &BinGroupName,
	}

	return t.BinGroup[key], nil
}

// RenameBinGroup renames an entry in the list BinGroup within
// the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) RenameBinGroup(oldK, newK string) error {
	if _, ok := t.BinGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in BinGroup", newK)
	}

	e, ok := t.BinGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BinGroup", oldK)
	}
	e.BinGroupName = &newK

	t.BinGroup[newK] = e
	delete(t.BinGroup, oldK)
	return nil
}

// GetOrCreateBinGroup retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) GetOrCreateBinGroup(
	BinGroupName string,
) *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup {
	key := BinGroupName

	if v, ok := t.BinGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBinGroup(BinGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBinGroup got unexpected error: %v", err))
	}
	return v
}

// GetBinGroup retrieves the value with the specified key from
// the BinGroup map field of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) GetBinGroup(BinGroupName string) *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup {
	if t == nil {
		return nil
	}

	key := BinGroupName

	if lm, ok := t.BinGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteBinGroup deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) DeleteBinGroup(BinGroupName string) {
	key := BinGroupName

	delete(t.BinGroup, key)
}

// AppendBinGroup appends the supplied SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup struct to the
// list BinGroup of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) AppendBinGroup(
	v *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup,
) error {
	if v.BinGroupName == nil {
		return fmt.Errorf("invalid nil key received for BinGroupName")
	}

	key := *v.BinGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinGroup == nil {
		t.BinGroup = make(map[string]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup)
	}

	if _, ok := t.BinGroup[key]; ok {
		return fmt.Errorf("duplicate key for list BinGroup %v", key)
	}

	t.BinGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BinGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay.
func (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay) ΛBelongingModule() string {
	return "srl_nokia-oam-pm-ethcfm"
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup represents the /srl_nokia-oam/oam/performance-monitoring/ethcfm/delay/bin-group YANG schema element.
type SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup struct {
	AdminState   E_SrlNokiaCommon_AdminState                                                                                 `path:"admin-state" module:"srl_nokia-oam-pm-ethcfm"`
	BinGroupName *string                                                                                                     `path:"bin-group-name" module:"srl_nokia-oam-pm-ethcfm"`
	BinType      map[E_SrlNokiaOamPmTypes_BinMetricType]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType `path:"bin-type" module:"srl_nokia-oam-pm-ethcfm"`
	Description  *string                                                                                                     `path:"description" module:"srl_nokia-oam-pm-ethcfm"`
}

// IsYANGGoStruct ensures that SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) IsYANGGoStruct() {}

// NewBinType creates a new entry in the BinType list of the
// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) NewBinType(
	BinMetric E_SrlNokiaOamPmTypes_BinMetricType,
) (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinType == nil {
		t.BinType = make(map[E_SrlNokiaOamPmTypes_BinMetricType]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType)
	}

	key := BinMetric

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BinType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BinType", key)
	}

	t.BinType[key] = &SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType{
		BinMetric: BinMetric,
	}

	return t.BinType[key], nil
}

// RenameBinType renames an entry in the list BinType within
// the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) RenameBinType(oldK, newK E_SrlNokiaOamPmTypes_BinMetricType) error {
	if _, ok := t.BinType[newK]; ok {
		return fmt.Errorf("key %v already exists in BinType", newK)
	}

	e, ok := t.BinType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BinType", oldK)
	}
	e.BinMetric = newK

	t.BinType[newK] = e
	delete(t.BinType, oldK)
	return nil
}

// GetOrCreateBinType retrieves the value with the specified keys from
// the receiver SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) GetOrCreateBinType(
	BinMetric E_SrlNokiaOamPmTypes_BinMetricType,
) *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType {
	key := BinMetric

	if v, ok := t.BinType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBinType(BinMetric)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBinType got unexpected error: %v", err))
	}
	return v
}

// GetBinType retrieves the value with the specified key from
// the BinType map field of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) GetBinType(
	BinMetric E_SrlNokiaOamPmTypes_BinMetricType,
) *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType {
	if t == nil {
		return nil
	}

	key := BinMetric

	if lm, ok := t.BinType[key]; ok {
		return lm
	}
	return nil
}

// DeleteBinType deletes the value with the specified keys from
// the receiver SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) DeleteBinType(BinMetric E_SrlNokiaOamPmTypes_BinMetricType) {
	key := BinMetric

	delete(t.BinType, key)
}

// AppendBinType appends the supplied SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType struct to the
// list BinType of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup. If the key value(s) specified in
// the supplied SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType already exist in the list, an error is
// returned.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) AppendBinType(
	v *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType,
) error {
	key := v.BinMetric

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinType == nil {
		t.BinType = make(map[E_SrlNokiaOamPmTypes_BinMetricType]*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup_BinType)
	}

	if _, ok := t.BinType[key]; ok {
		return fmt.Errorf("duplicate key for list BinType %v", key)
	}

	t.BinType[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetBinGroupName retrieves the value of the leaf BinGroupName from the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BinGroupName is set, it can
// safely use t.GetBinGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BinGroupName == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) GetBinGroupName() string {
	if t == nil || t.BinGroupName == nil {
		return ""
	}
	return *t.BinGroupName
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	for _, e := range t.BinType {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup struct, which is a YANG list entry.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BinGroupName == nil {
		return nil, fmt.Errorf("nil value for key BinGroupName")
	}

	return map[string]interface{}{
		"bin-group-name": *t.BinGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup.
func (*SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Delay_BinGroup) ΛBelongingModule() string {
	return "srl_nokia-oam-pm-ethcfm"
}
