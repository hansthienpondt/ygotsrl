/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn struct {
	Flood        *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood        `path:"flood" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	InternalTags *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags `path:"internal-tags" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) IsYANGGoStruct() {}

// GetOrCreateFlood retrieves the value of the Flood field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetOrCreateFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood {
	if t.Flood != nil {
		return t.Flood
	}
	t.Flood = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood{}
	return t.Flood
}

// GetOrCreateInternalTags retrieves the value of the InternalTags field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetOrCreateInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags {
	if t.InternalTags != nil {
		return t.InternalTags
	}
	t.InternalTags = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags{}
	return t.InternalTags
}

// GetFlood returns the value of the Flood struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn. If the receiver or the field Flood is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood {
	if t != nil && t.Flood != nil {
		return t.Flood
	}
	return nil
}

// GetInternalTags returns the value of the InternalTags struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn. If the receiver or the field InternalTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) GetInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags {
	if t != nil && t.InternalTags != nil {
		return t.InternalTags
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Flood.PopulateDefaults()
	t.InternalTags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/evpn/flood YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood struct {
	GratuitousArp *bool `path:"gratuitous-arp" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	UnknownArpReq *bool `path:"unknown-arp-req" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) IsYANGGoStruct() {}

// GetGratuitousArp retrieves the value of the leaf GratuitousArp from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousArp is set, it can
// safely use t.GetGratuitousArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousArp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) GetGratuitousArp() bool {
	if t == nil || t.GratuitousArp == nil {
		return true
	}
	return *t.GratuitousArp
}

// GetUnknownArpReq retrieves the value of the leaf UnknownArpReq from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownArpReq is set, it can
// safely use t.GetUnknownArpReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownArpReq == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) GetUnknownArpReq() bool {
	if t == nil || t.UnknownArpReq == nil {
		return true
	}
	return *t.UnknownArpReq
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GratuitousArp == nil {
		var v bool = true
		t.GratuitousArp = &v
	}
	if t.UnknownArpReq == nil {
		var v bool = true
		t.UnknownArpReq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_Flood) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/evpn/internal-tags YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) IsYANGGoStruct() {
}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_Evpn_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/ip-duplication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication struct {
	AntiSpoofMac     *string                                                                                       `path:"anti-spoof-mac" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	HoldDownTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union `path:"hold-down-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	MonitoringWindow *uint32                                                                                       `path:"monitoring-window" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	NumMoves         *uint32                                                                                       `path:"num-moves" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticBlackhole  *bool                                                                                         `path:"static-blackhole" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetHoldDownTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetMonitoringWindow retrieves the value of the leaf MonitoringWindow from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitoringWindow is set, it can
// safely use t.GetMonitoringWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitoringWindow == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetMonitoringWindow() uint32 {
	if t == nil || t.MonitoringWindow == nil {
		return 3
	}
	return *t.MonitoringWindow
}

// GetNumMoves retrieves the value of the leaf NumMoves from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.MonitoringWindow == nil {
		var v uint32 = 3
		t.MonitoringWindow = &v
	}
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/static-entries YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries struct {
	Neighbor map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor `path:"neighbor" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) NewNeighbor(
	Ipv4Address string,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) GetOrCreateNeighbor(
	Ipv4Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor {
	key := Ipv4Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) GetNeighbor(
	Ipv4Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor {
	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) DeleteNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor struct to the
// list Neighbor of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) AppendNeighbor(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor,
) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/static-entries/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor struct {
	Ipv4Address      *string `path:"ipv4-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	LinkLayerAddress *string `path:"link-layer-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_StaticEntries_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag `path:"flag" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd struct {
	AdminState                      E_SrlNokiaCommon_AdminState                                                  `path:"admin-state" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	DynamicLearning                 *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning `path:"dynamic-learning" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Evpn                            *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn            `path:"evpn" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	IpDuplication                   *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication   `path:"ip-duplication" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	ProcessDadNeighborSolicitations *bool                                                                        `path:"process-dad-neighbor-solicitations" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticEntries                   *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries   `path:"static-entries" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	TableSize                       *uint32                                                                      `path:"table-size" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	TraceOptions                    *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions    `path:"trace-options" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) IsYANGGoStruct() {}

// GetOrCreateDynamicLearning retrieves the value of the DynamicLearning field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateDynamicLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning {
	if t.DynamicLearning != nil {
		return t.DynamicLearning
	}
	t.DynamicLearning = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning{}
	return t.DynamicLearning
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn{}
	return t.Evpn
}

// GetOrCreateIpDuplication retrieves the value of the IpDuplication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateIpDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication {
	if t.IpDuplication != nil {
		return t.IpDuplication
	}
	t.IpDuplication = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication{}
	return t.IpDuplication
}

// GetOrCreateStaticEntries retrieves the value of the StaticEntries field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateStaticEntries() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries {
	if t.StaticEntries != nil {
		return t.StaticEntries
	}
	t.StaticEntries = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries{}
	return t.StaticEntries
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions{}
	return t.TraceOptions
}

// GetDynamicLearning returns the value of the DynamicLearning struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field DynamicLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetDynamicLearning() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning {
	if t != nil && t.DynamicLearning != nil {
		return t.DynamicLearning
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpDuplication returns the value of the IpDuplication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field IpDuplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetIpDuplication() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication {
	if t != nil && t.IpDuplication != nil {
		return t.IpDuplication
	}
	return nil
}

// GetStaticEntries returns the value of the StaticEntries struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field StaticEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetStaticEntries() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries {
	if t != nil && t.StaticEntries != nil {
		return t.StaticEntries
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetProcessDadNeighborSolicitations retrieves the value of the leaf ProcessDadNeighborSolicitations from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProcessDadNeighborSolicitations is set, it can
// safely use t.GetProcessDadNeighborSolicitations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProcessDadNeighborSolicitations == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetProcessDadNeighborSolicitations() bool {
	if t == nil || t.ProcessDadNeighborSolicitations == nil {
		return true
	}
	return *t.ProcessDadNeighborSolicitations
}

// GetTableSize retrieves the value of the leaf TableSize from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) GetTableSize() uint32 {
	if t == nil || t.TableSize == nil {
		return 250
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.ProcessDadNeighborSolicitations == nil {
		var v bool = true
		t.ProcessDadNeighborSolicitations = &v
	}
	if t.TableSize == nil {
		var v uint32 = 250
		t.TableSize = &v
	}
	t.DynamicLearning.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.IpDuplication.PopulateDefaults()
	t.StaticEntries.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/dynamic-learning YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning struct {
	AdminState  E_SrlNokiaCommon_AdminState                                                                   `path:"admin-state" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	AgeTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union     `path:"age-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	SendRefresh SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union `path:"send-refresh" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) GetAgeTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union {
	if t == nil || t.AgeTime == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum_never
	}
	return t.AgeTime
}

// GetSendRefresh retrieves the value of the leaf SendRefresh from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRefresh is set, it can
// safely use t.GetSendRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRefresh == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) GetSendRefresh() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union {
	if t == nil || t.SendRefresh == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum_never
	}
	return t.SendRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.AgeTime == nil {
		t.AgeTime = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum_never
	}
	if t.SendRefresh == nil {
		t.SendRefresh = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn struct {
	AdvertiseNeighborType E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType `path:"advertise-neighbor-type" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Flood                 *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood                  `path:"flood" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	InternalTags          *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags           `path:"internal-tags" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) IsYANGGoStruct() {}

// GetOrCreateFlood retrieves the value of the Flood field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetOrCreateFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood {
	if t.Flood != nil {
		return t.Flood
	}
	t.Flood = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood{}
	return t.Flood
}

// GetOrCreateInternalTags retrieves the value of the InternalTags field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetOrCreateInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags {
	if t.InternalTags != nil {
		return t.InternalTags
	}
	t.InternalTags = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags{}
	return t.InternalTags
}

// GetFlood returns the value of the Flood struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn. If the receiver or the field Flood is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetFlood() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood {
	if t != nil && t.Flood != nil {
		return t.Flood
	}
	return nil
}

// GetInternalTags returns the value of the InternalTags struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn. If the receiver or the field InternalTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetInternalTags() *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags {
	if t != nil && t.InternalTags != nil {
		return t.InternalTags
	}
	return nil
}

// GetAdvertiseNeighborType retrieves the value of the leaf AdvertiseNeighborType from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseNeighborType is set, it can
// safely use t.GetAdvertiseNeighborType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseNeighborType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) GetAdvertiseNeighborType() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType {
	if t == nil || t.AdvertiseNeighborType == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType_router
	}
	return t.AdvertiseNeighborType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseNeighborType == 0 {
		t.AdvertiseNeighborType = SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_AdvertiseNeighborType_router
	}
	t.Flood.PopulateDefaults()
	t.InternalTags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/evpn/flood YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood struct {
	UnknownNeighborAdvertiseHost   *bool `path:"unknown-neighbor-advertise-host" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	UnknownNeighborAdvertiseRouter *bool `path:"unknown-neighbor-advertise-router" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	UnknownNeighborSolicitation    *bool `path:"unknown-neighbor-solicitation" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) IsYANGGoStruct() {}

// GetUnknownNeighborAdvertiseHost retrieves the value of the leaf UnknownNeighborAdvertiseHost from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborAdvertiseHost is set, it can
// safely use t.GetUnknownNeighborAdvertiseHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborAdvertiseHost == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) GetUnknownNeighborAdvertiseHost() bool {
	if t == nil || t.UnknownNeighborAdvertiseHost == nil {
		return true
	}
	return *t.UnknownNeighborAdvertiseHost
}

// GetUnknownNeighborAdvertiseRouter retrieves the value of the leaf UnknownNeighborAdvertiseRouter from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborAdvertiseRouter is set, it can
// safely use t.GetUnknownNeighborAdvertiseRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborAdvertiseRouter == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) GetUnknownNeighborAdvertiseRouter() bool {
	if t == nil || t.UnknownNeighborAdvertiseRouter == nil {
		return true
	}
	return *t.UnknownNeighborAdvertiseRouter
}

// GetUnknownNeighborSolicitation retrieves the value of the leaf UnknownNeighborSolicitation from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborSolicitation is set, it can
// safely use t.GetUnknownNeighborSolicitation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborSolicitation == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) GetUnknownNeighborSolicitation() bool {
	if t == nil || t.UnknownNeighborSolicitation == nil {
		return true
	}
	return *t.UnknownNeighborSolicitation
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UnknownNeighborAdvertiseHost == nil {
		var v bool = true
		t.UnknownNeighborAdvertiseHost = &v
	}
	if t.UnknownNeighborAdvertiseRouter == nil {
		var v bool = true
		t.UnknownNeighborAdvertiseRouter = &v
	}
	if t.UnknownNeighborSolicitation == nil {
		var v bool = true
		t.UnknownNeighborSolicitation = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_Flood) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/evpn/internal-tags YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) IsYANGGoStruct() {
}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_Evpn_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/ip-duplication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication struct {
	AntiSpoofMac     *string                                                                                      `path:"anti-spoof-mac" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	HoldDownTime     SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union `path:"hold-down-time" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	MonitoringWindow *uint32                                                                                      `path:"monitoring-window" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	NumMoves         *uint32                                                                                      `path:"num-moves" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	StaticBlackhole  *bool                                                                                        `path:"static-blackhole" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetHoldDownTime() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetMonitoringWindow retrieves the value of the leaf MonitoringWindow from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitoringWindow is set, it can
// safely use t.GetMonitoringWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitoringWindow == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetMonitoringWindow() uint32 {
	if t == nil || t.MonitoringWindow == nil {
		return 3
	}
	return *t.MonitoringWindow
}

// GetNumMoves retrieves the value of the leaf NumMoves from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.MonitoringWindow == nil {
		var v uint32 = 3
		t.MonitoringWindow = &v
	}
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/static-entries YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries struct {
	Neighbor map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor `path:"neighbor" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) NewNeighbor(
	Ipv6Address string,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) GetOrCreateNeighbor(
	Ipv6Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor {
	key := Ipv6Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) GetNeighbor(
	Ipv6Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor {
	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) DeleteNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor struct to the
// list Neighbor of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) AppendNeighbor(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor,
) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/static-entries/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor struct {
	Ipv6Address      *string                                      `path:"ipv6-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	LinkLayerAddress *string                                      `path:"link-layer-address" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Type             E_SrlNokiaBridgeTableProxyArpNd_NeighborType `path:"type" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) IsYANGGoStruct() {
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkLayerAddress is set, it can
// safely use t.GetLinkLayerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkLayerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) GetType() E_SrlNokiaBridgeTableProxyArpNd_NeighborType {
	if t == nil || t.Type == 0 {
		return SrlNokiaBridgeTableProxyArpNd_NeighborType_router
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = SrlNokiaBridgeTableProxyArpNd_NeighborType_router
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_StaticEntries_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag `path:"flag" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bridge-table-proxy-arp-nd"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bridge-table-proxy-arp-nd"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-proxy-arp-nd"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup represents the /srl_nokia-network-instance/network-instance/bridge-table/split-horizon-group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup struct {
	Name *string `path:"name" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_SplitHorizonGroup) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac represents the /srl_nokia-network-instance/network-instance/bridge-table/static-mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac struct {
	Mac map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac `path:"mac" module:"srl_nokia-bridge-table-static-mac"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) NewMac(Address string) (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac{
		Address: &Address,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Address = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) GetOrCreateMac(
	Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac {
	key := Address

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) GetMac(Address string) *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac {
	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) DeleteMac(Address string) {
	key := Address

	delete(t.Mac, key)
}

// AppendMac appends the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac struct to the
// list Mac of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) AppendMac(
	v *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac,
) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-static-mac"
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac represents the /srl_nokia-network-instance/network-instance/bridge-table/static-mac/mac YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac struct {
	Address     *string                                                                             `path:"address" module:"srl_nokia-bridge-table-static-mac"`
	Destination SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union `path:"destination" module:"srl_nokia-bridge-table-static-mac"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDestination retrieves the value of the leaf Destination from the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) GetDestination() SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union {
	if t == nil || t.Destination == nil {
		return nil
	}
	return t.Destination
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) ΛBelongingModule() string {
	return "srl_nokia-bridge-table-static-mac"
}

// SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint represents the /srl_nokia-network-instance/network-instance/connection-point YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint struct {
	Name *string `path:"name" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint.
func (*SrlNokiaNetworkInstance_NetworkInstance_ConnectionPoint) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies represents the /srl_nokia-network-instance/network-instance/inter-instance-policies YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies struct {
	ApplyPolicy *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy `path:"apply-policy" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) IsYANGGoStruct() {}

// GetOrCreateApplyPolicy retrieves the value of the ApplyPolicy field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) GetOrCreateApplyPolicy() *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy {
	if t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	t.ApplyPolicy = &SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy{}
	return t.ApplyPolicy
}

// GetApplyPolicy returns the value of the ApplyPolicy struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies. If the receiver or the field ApplyPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) GetApplyPolicy() *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy {
	if t != nil && t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ApplyPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies.
func (*SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy represents the /srl_nokia-network-instance/network-instance/inter-instance-policies/apply-policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy struct {
	ExportPolicy *string `path:"export-policy" module:"srl_nokia-network-instance"`
	ImportPolicy *string `path:"import-policy" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy.
func (*SrlNokiaNetworkInstance_NetworkInstance_InterInstancePolicies_ApplyPolicy) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Interface represents the /srl_nokia-network-instance/network-instance/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Interface struct {
	BridgeTable     *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable  `path:"bridge-table" module:"srl_nokia-network-instance" yangPresence:"true"`
	ConnectionPoint *string                                                         `path:"connection-point" module:"srl_nokia-network-instance"`
	InterfaceRef    *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef `path:"interface-ref" module:"srl_nokia-network-instance"`
	Name            *string                                                         `path:"name" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface) IsYANGGoStruct() {}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetOrCreateBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetOrCreateInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Interface. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetBridgeTable() *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetConnectionPoint retrieves the value of the leaf ConnectionPoint from the SrlNokiaNetworkInstance_NetworkInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionPoint is set, it can
// safely use t.GetConnectionPoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionPoint == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetConnectionPoint() string {
	if t == nil || t.ConnectionPoint == nil {
		return ""
	}
	return *t.ConnectionPoint
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BridgeTable.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable represents the /srl_nokia-network-instance/network-instance/interface/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable struct {
	SplitHorizonGroup *string `path:"split-horizon-group" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) IsYANGGoStruct() {}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef represents the /srl_nokia-network-instance/network-instance/interface/interface-ref YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef struct {
	Interface    *string `path:"interface" module:"srl_nokia-network-instance"`
	Subinterface *uint32 `path:"subinterface" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface_InterfaceRef) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpForwarding represents the /srl_nokia-network-instance/network-instance/ip-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpForwarding struct {
	LastResortLookup *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup `path:"last-resort-lookup" module:"srl_nokia-network-instance"`
	ReceiveIpv4Check *bool                                                                  `path:"receive-ipv4-check" module:"srl_nokia-network-instance"`
	ReceiveIpv6Check *bool                                                                  `path:"receive-ipv6-check" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) IsYANGGoStruct() {}

// GetOrCreateLastResortLookup retrieves the value of the LastResortLookup field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetOrCreateLastResortLookup() *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup {
	if t.LastResortLookup != nil {
		return t.LastResortLookup
	}
	t.LastResortLookup = &SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup{}
	return t.LastResortLookup
}

// GetLastResortLookup returns the value of the LastResortLookup struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_IpForwarding. If the receiver or the field LastResortLookup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetLastResortLookup() *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup {
	if t != nil && t.LastResortLookup != nil {
		return t.LastResortLookup
	}
	return nil
}

// GetReceiveIpv4Check retrieves the value of the leaf ReceiveIpv4Check from the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv4Check is set, it can
// safely use t.GetReceiveIpv4Check() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv4Check == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetReceiveIpv4Check() bool {
	if t == nil || t.ReceiveIpv4Check == nil {
		return false
	}
	return *t.ReceiveIpv4Check
}

// GetReceiveIpv6Check retrieves the value of the leaf ReceiveIpv6Check from the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6Check is set, it can
// safely use t.GetReceiveIpv6Check() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6Check == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) GetReceiveIpv6Check() bool {
	if t == nil || t.ReceiveIpv6Check == nil {
		return false
	}
	return *t.ReceiveIpv6Check
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LastResortLookup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup represents the /srl_nokia-network-instance/network-instance/ip-forwarding/last-resort-lookup YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup struct {
	NetworkInstance *string `path:"network-instance" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) IsYANGGoStruct() {}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding_LastResortLookup) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing represents the /srl_nokia-network-instance/network-instance/ip-load-balancing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct {
	ResilientHashPrefix map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix `path:"resilient-hash-prefix" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) IsYANGGoStruct() {}

// NewResilientHashPrefix creates a new entry in the ResilientHashPrefix list of the
// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) NewResilientHashPrefix(
	IpPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResilientHashPrefix == nil {
		t.ResilientHashPrefix = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ResilientHashPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ResilientHashPrefix", key)
	}

	t.ResilientHashPrefix[key] = &SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.ResilientHashPrefix[key], nil
}

// RenameResilientHashPrefix renames an entry in the list ResilientHashPrefix within
// the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) RenameResilientHashPrefix(oldK, newK string) error {
	if _, ok := t.ResilientHashPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ResilientHashPrefix", newK)
	}

	e, ok := t.ResilientHashPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ResilientHashPrefix", oldK)
	}
	e.IpPrefix = &newK

	t.ResilientHashPrefix[newK] = e
	delete(t.ResilientHashPrefix, oldK)
	return nil
}

// GetOrCreateResilientHashPrefix retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) GetOrCreateResilientHashPrefix(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix {
	key := IpPrefix

	if v, ok := t.ResilientHashPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResilientHashPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResilientHashPrefix got unexpected error: %v", err))
	}
	return v
}

// GetResilientHashPrefix retrieves the value with the specified key from
// the ResilientHashPrefix map field of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) GetResilientHashPrefix(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix {
	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.ResilientHashPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteResilientHashPrefix deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) DeleteResilientHashPrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.ResilientHashPrefix, key)
}

// AppendResilientHashPrefix appends the supplied SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct to the
// list ResilientHashPrefix of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) AppendResilientHashPrefix(
	v *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResilientHashPrefix == nil {
		t.ResilientHashPrefix = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix)
	}

	if _, ok := t.ResilientHashPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ResilientHashPrefix %v", key)
	}

	t.ResilientHashPrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ResilientHashPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix represents the /srl_nokia-network-instance/network-instance/ip-load-balancing/resilient-hash-prefix YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct {
	HashBucketsPerPath *uint8  `path:"hash-buckets-per-path" module:"srl_nokia-network-instance"`
	IpPrefix           *string `path:"ip-prefix" module:"srl_nokia-network-instance"`
	MaxPaths           *uint8  `path:"max-paths" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) IsYANGGoStruct() {
}

// GetHashBucketsPerPath retrieves the value of the leaf HashBucketsPerPath from the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashBucketsPerPath is set, it can
// safely use t.GetHashBucketsPerPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashBucketsPerPath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) GetHashBucketsPerPath() uint8 {
	if t == nil || t.HashBucketsPerPath == nil {
		return 1
	}
	return *t.HashBucketsPerPath
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) GetMaxPaths() uint8 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashBucketsPerPath == nil {
		var v uint8 = 1
		t.HashBucketsPerPath = &v
	}
	if t.MaxPaths == nil {
		var v uint8 = 1
		t.MaxPaths = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies represents the /srl_nokia-network-instance/network-instance/maintenance-policies YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies struct {
	Policy map[string]*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy `path:"policy" module:"srl_nokia-maintenance-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) NewPolicy(
	MaintenancePolicyName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy)
	}

	key := MaintenancePolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy{
		MaintenancePolicyName: &MaintenancePolicyName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.MaintenancePolicyName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) GetOrCreatePolicy(
	MaintenancePolicyName string,
) *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy {
	key := MaintenancePolicyName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(MaintenancePolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) GetPolicy(
	MaintenancePolicyName string,
) *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy {
	if t == nil {
		return nil
	}

	key := MaintenancePolicyName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) DeletePolicy(MaintenancePolicyName string) {
	key := MaintenancePolicyName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy struct to the
// list Policy of SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) AppendPolicy(
	v *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy,
) error {
	if v.MaintenancePolicyName == nil {
		return fmt.Errorf("invalid nil key received for MaintenancePolicyName")
	}

	key := *v.MaintenancePolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies.
func (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies) ΛBelongingModule() string {
	return "srl_nokia-maintenance-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy represents the /srl_nokia-network-instance/network-instance/maintenance-policies/policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy struct {
	MaintenancePolicyName *string                                                                         `path:"maintenance-policy-name" module:"srl_nokia-maintenance-policies"`
	SeamlessBfd           *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd `path:"seamless-bfd" module:"srl_nokia-maintenance-policies" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) IsYANGGoStruct() {}

// GetOrCreateSeamlessBfd retrieves the value of the SeamlessBfd field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) GetOrCreateSeamlessBfd() *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd {
	if t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	t.SeamlessBfd = &SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd{}
	return t.SeamlessBfd
}

// GetSeamlessBfd returns the value of the SeamlessBfd struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy. If the receiver or the field SeamlessBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) GetSeamlessBfd() *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd {
	if t != nil && t.SeamlessBfd != nil {
		return t.SeamlessBfd
	}
	return nil
}

// GetMaintenancePolicyName retrieves the value of the leaf MaintenancePolicyName from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaintenancePolicyName is set, it can
// safely use t.GetMaintenancePolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaintenancePolicyName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) GetMaintenancePolicyName() string {
	if t == nil || t.MaintenancePolicyName == nil {
		return ""
	}
	return *t.MaintenancePolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SeamlessBfd.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaintenancePolicyName == nil {
		return nil, fmt.Errorf("nil value for key MaintenancePolicyName")
	}

	return map[string]interface{}{
		"maintenance-policy-name": *t.MaintenancePolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy.
func (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy) ΛBelongingModule() string {
	return "srl_nokia-maintenance-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd represents the /srl_nokia-network-instance/network-instance/maintenance-policies/policy/seamless-bfd YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd struct {
	DesiredMinimumTransmitInterval *uint32                                                                               `path:"desired-minimum-transmit-interval" module:"srl_nokia-maintenance-policies"`
	DetectionMultiplier            *uint8                                                                                `path:"detection-multiplier" module:"srl_nokia-maintenance-policies"`
	HoldDownTimer                  *uint16                                                                               `path:"hold-down-timer" module:"srl_nokia-maintenance-policies"`
	Mode                           E_SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd_Mode `path:"mode" module:"srl_nokia-maintenance-policies"`
	ReturnPathLabel                *uint32                                                                               `path:"return-path-label" module:"srl_nokia-maintenance-policies"`
	RevertTimer                    *uint32                                                                               `path:"revert-timer" module:"srl_nokia-maintenance-policies"`
	Threshold                      *uint32                                                                               `path:"threshold" module:"srl_nokia-maintenance-policies"`
	WaitForUpTimer                 *uint16                                                                               `path:"wait-for-up-timer" module:"srl_nokia-maintenance-policies"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) IsYANGGoStruct() {
}

// GetDesiredMinimumTransmitInterval retrieves the value of the leaf DesiredMinimumTransmitInterval from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesiredMinimumTransmitInterval is set, it can
// safely use t.GetDesiredMinimumTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesiredMinimumTransmitInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetDesiredMinimumTransmitInterval() uint32 {
	if t == nil || t.DesiredMinimumTransmitInterval == nil {
		return 1000000
	}
	return *t.DesiredMinimumTransmitInterval
}

// GetDetectionMultiplier retrieves the value of the leaf DetectionMultiplier from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectionMultiplier is set, it can
// safely use t.GetDetectionMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectionMultiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetDetectionMultiplier() uint8 {
	if t == nil || t.DetectionMultiplier == nil {
		return 3
	}
	return *t.DetectionMultiplier
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd_Mode_none
	}
	return t.Mode
}

// GetReturnPathLabel retrieves the value of the leaf ReturnPathLabel from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReturnPathLabel is set, it can
// safely use t.GetReturnPathLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReturnPathLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetReturnPathLabel() uint32 {
	if t == nil || t.ReturnPathLabel == nil {
		return 0
	}
	return *t.ReturnPathLabel
}

// GetRevertTimer retrieves the value of the leaf RevertTimer from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTimer is set, it can
// safely use t.GetRevertTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetRevertTimer() uint32 {
	if t == nil || t.RevertTimer == nil {
		return 10
	}
	return *t.RevertTimer
}

// GetThreshold retrieves the value of the leaf Threshold from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1
	}
	return *t.Threshold
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) GetWaitForUpTimer() uint16 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DesiredMinimumTransmitInterval == nil {
		var v uint32 = 1000000
		t.DesiredMinimumTransmitInterval = &v
	}
	if t.DetectionMultiplier == nil {
		var v uint8 = 3
		t.DetectionMultiplier = &v
	}
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd_Mode_none
	}
	if t.RevertTimer == nil {
		var v uint32 = 10
		t.RevertTimer = &v
	}
	if t.Threshold == nil {
		var v uint32 = 1
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd.
func (*SrlNokiaNetworkInstance_NetworkInstance_MaintenancePolicies_Policy_SeamlessBfd) ΛBelongingModule() string {
	return "srl_nokia-maintenance-policies"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls represents the /srl_nokia-network-instance/network-instance/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls struct {
	IcmpTunneling    *bool                                                                                                                      `path:"icmp-tunneling" module:"srl_nokia-mpls"`
	NdkLabelBlock    map[string]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock                                                     `path:"ndk-label-block" module:"srl_nokia-mpls"`
	StaticEntry      map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry `path:"static-entry" module:"srl_nokia-mpls"`
	StaticLabelBlock *string                                                                                                                    `path:"static-label-block" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key represents the key for list StaticEntry of element /srl_nokia-network-instance/network-instance/mpls.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key struct {
	TopLabel   uint32 `path:"top-label"`
	Preference uint8  `path:"preference"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key key struct.
func (t SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"top-label":  t.TopLabel,
		"preference": t.Preference,
	}, nil
}

// NewNdkLabelBlock creates a new entry in the NdkLabelBlock list of the
// SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) NewNdkLabelBlock(ApplicationName string) (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NdkLabelBlock == nil {
		t.NdkLabelBlock = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock)
	}

	key := ApplicationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NdkLabelBlock[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NdkLabelBlock", key)
	}

	t.NdkLabelBlock[key] = &SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock{
		ApplicationName: &ApplicationName,
	}

	return t.NdkLabelBlock[key], nil
}

// RenameNdkLabelBlock renames an entry in the list NdkLabelBlock within
// the SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) RenameNdkLabelBlock(oldK, newK string) error {
	if _, ok := t.NdkLabelBlock[newK]; ok {
		return fmt.Errorf("key %v already exists in NdkLabelBlock", newK)
	}

	e, ok := t.NdkLabelBlock[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NdkLabelBlock", oldK)
	}
	e.ApplicationName = &newK

	t.NdkLabelBlock[newK] = e
	delete(t.NdkLabelBlock, oldK)
	return nil
}

// GetOrCreateNdkLabelBlock retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetOrCreateNdkLabelBlock(
	ApplicationName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock {
	key := ApplicationName

	if v, ok := t.NdkLabelBlock[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNdkLabelBlock(ApplicationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNdkLabelBlock got unexpected error: %v", err))
	}
	return v
}

// GetNdkLabelBlock retrieves the value with the specified key from
// the NdkLabelBlock map field of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetNdkLabelBlock(ApplicationName string) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock {
	if t == nil {
		return nil
	}

	key := ApplicationName

	if lm, ok := t.NdkLabelBlock[key]; ok {
		return lm
	}
	return nil
}

// DeleteNdkLabelBlock deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) DeleteNdkLabelBlock(ApplicationName string) {
	key := ApplicationName

	delete(t.NdkLabelBlock, key)
}

// AppendNdkLabelBlock appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock struct to the
// list NdkLabelBlock of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) AppendNdkLabelBlock(
	v *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock,
) error {
	if v.ApplicationName == nil {
		return fmt.Errorf("invalid nil key received for ApplicationName")
	}

	key := *v.ApplicationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NdkLabelBlock == nil {
		t.NdkLabelBlock = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock)
	}

	if _, ok := t.NdkLabelBlock[key]; ok {
		return fmt.Errorf("duplicate key for list NdkLabelBlock %v", key)
	}

	t.NdkLabelBlock[key] = v
	return nil
}

// NewStaticEntry creates a new entry in the StaticEntry list of the
// SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) NewStaticEntry(TopLabel uint32,
	Preference uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticEntry == nil {
		t.StaticEntry = make(map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticEntry", key)
	}

	t.StaticEntry[key] = &SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry{
		TopLabel:   &TopLabel,
		Preference: &Preference,
	}

	return t.StaticEntry[key], nil
}

// RenameStaticEntry renames an entry in the list StaticEntry within
// the SrlNokiaNetworkInstance_NetworkInstance_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) RenameStaticEntry(
	oldK, newK SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key,
) error {
	if _, ok := t.StaticEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticEntry", newK)
	}

	e, ok := t.StaticEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticEntry", oldK)
	}
	e.TopLabel = &newK.TopLabel
	e.Preference = &newK.Preference

	t.StaticEntry[newK] = e
	delete(t.StaticEntry, oldK)
	return nil
}

// GetOrCreateStaticEntry retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetOrCreateStaticEntry(TopLabel uint32,
	Preference uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry {
	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	if v, ok := t.StaticEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticEntry(TopLabel, Preference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticEntry got unexpected error: %v", err))
	}
	return v
}

// GetStaticEntry retrieves the value with the specified key from
// the StaticEntry map field of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetStaticEntry(TopLabel uint32,
	Preference uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry {
	if t == nil {
		return nil
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	if lm, ok := t.StaticEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticEntry deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Mpls. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) DeleteStaticEntry(TopLabel uint32, Preference uint8) {
	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   TopLabel,
		Preference: Preference,
	}

	delete(t.StaticEntry, key)
}

// AppendStaticEntry appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry struct to the
// list StaticEntry of SrlNokiaNetworkInstance_NetworkInstance_Mpls. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) AppendStaticEntry(
	v *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry,
) error {
	if v.TopLabel == nil {
		return fmt.Errorf("invalid nil key for TopLabel")
	}

	if v.Preference == nil {
		return fmt.Errorf("invalid nil key for Preference")
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key{
		TopLabel:   *v.TopLabel,
		Preference: *v.Preference,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticEntry == nil {
		t.StaticEntry = make(map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Key]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry)
	}

	if _, ok := t.StaticEntry[key]; ok {
		return fmt.Errorf("duplicate key for list StaticEntry %v", key)
	}

	t.StaticEntry[key] = v
	return nil
}

// GetIcmpTunneling retrieves the value of the leaf IcmpTunneling from the SrlNokiaNetworkInstance_NetworkInstance_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpTunneling is set, it can
// safely use t.GetIcmpTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpTunneling == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetIcmpTunneling() bool {
	if t == nil || t.IcmpTunneling == nil {
		return false
	}
	return *t.IcmpTunneling
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NdkLabelBlock {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticEntry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls) ΛBelongingModule() string {
	return "srl_nokia-mpls"
}

// SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding represents the /srl_nokia-network-instance/network-instance/mpls-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding struct {
	ForwardReceivedPackets *bool `path:"forward-received-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) IsYANGGoStruct() {}

// GetForwardReceivedPackets retrieves the value of the leaf ForwardReceivedPackets from the SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardReceivedPackets is set, it can
// safely use t.GetForwardReceivedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardReceivedPackets == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) GetForwardReceivedPackets() bool {
	if t == nil || t.ForwardReceivedPackets == nil {
		return false
	}
	return *t.ForwardReceivedPackets
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_MplsForwarding) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock represents the /srl_nokia-network-instance/network-instance/mpls/ndk-label-block YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock struct {
	ApplicationName  *string `path:"application-name" module:"srl_nokia-mpls"`
	StaticLabelBlock *string `path:"static-label-block" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) IsYANGGoStruct() {}

// GetApplicationName retrieves the value of the leaf ApplicationName from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplicationName is set, it can
// safely use t.GetApplicationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplicationName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) GetApplicationName() string {
	if t == nil || t.ApplicationName == nil {
		return ""
	}
	return *t.ApplicationName
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ApplicationName == nil {
		return nil, fmt.Errorf("nil value for key ApplicationName")
	}

	return map[string]interface{}{
		"application-name": *t.ApplicationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_NdkLabelBlock) ΛBelongingModule() string {
	return "srl_nokia-mpls"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry represents the /srl_nokia-network-instance/network-instance/mpls/static-entry YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry struct {
	AdminState   E_SrlNokiaCommon_AdminState                                          `path:"admin-state" module:"srl_nokia-mpls"`
	CollectStats *bool                                                                `path:"collect-stats" module:"srl_nokia-mpls"`
	NextHopGroup *string                                                              `path:"next-hop-group" module:"srl_nokia-mpls"`
	Operation    E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation `path:"operation" module:"srl_nokia-mpls"`
	Preference   *uint8                                                               `path:"preference" module:"srl_nokia-mpls"`
	TopLabel     *uint32                                                              `path:"top-label" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetNextHopGroup() string {
	if t == nil || t.NextHopGroup == nil {
		return ""
	}
	return *t.NextHopGroup
}

// GetOperation retrieves the value of the leaf Operation from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetOperation() E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation {
	if t == nil || t.Operation == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation_swap
	}
	return t.Operation
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetPreference() uint8 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetTopLabel retrieves the value of the leaf TopLabel from the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopLabel is set, it can
// safely use t.GetTopLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopLabel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) GetTopLabel() uint32 {
	if t == nil || t.TopLabel == nil {
		return 0
	}
	return *t.TopLabel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Operation == 0 {
		t.Operation = SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry_Operation_swap
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Preference == nil {
		return nil, fmt.Errorf("nil value for key Preference")
	}

	if t.TopLabel == nil {
		return nil, fmt.Errorf("nil value for key TopLabel")
	}

	return map[string]interface{}{
		"preference": *t.Preference,
		"top-label":  *t.TopLabel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticEntry) ΛBelongingModule() string {
	return "srl_nokia-mpls"
}

// SrlNokiaNetworkInstance_NetworkInstance_Mtu represents the /srl_nokia-network-instance/network-instance/mtu YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mtu struct {
	PathMtuDiscovery *bool `path:"path-mtu-discovery" module:"srl_nokia-network-instance-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mtu) IsYANGGoStruct() {}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Mtu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return true
	}
	return *t.PathMtuDiscovery
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Mtu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathMtuDiscovery == nil {
		var v bool = true
		t.PathMtuDiscovery = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Mtu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mtu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Mtu.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mtu) ΛBelongingModule() string {
	return "srl_nokia-network-instance-mtu"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn struct {
	AutoDiscovery   E_SrlNokiaMvpnL3_AutoDiscoveryType                                     `path:"auto-discovery" module:"srl_nokia-mvpn-l3"`
	Bgp             *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp            `path:"bgp" module:"srl_nokia-mvpn-l3"`
	CMulticastRoute E_SrlNokiaMvpnL3_CMulticastRouteType                                   `path:"c-multicast-route" module:"srl_nokia-mvpn-l3"`
	ProviderTunnel  *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel `path:"provider-tunnel" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) GetOrCreateBgp() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp{}
	return t.Bgp
}

// GetOrCreateProviderTunnel retrieves the value of the ProviderTunnel field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) GetOrCreateProviderTunnel() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel {
	if t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	t.ProviderTunnel = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel{}
	return t.ProviderTunnel
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) GetBgp() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetProviderTunnel returns the value of the ProviderTunnel struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn. If the receiver or the field ProviderTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) GetProviderTunnel() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel {
	if t != nil && t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	return nil
}

// GetAutoDiscovery retrieves the value of the leaf AutoDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoDiscovery is set, it can
// safely use t.GetAutoDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) GetAutoDiscovery() E_SrlNokiaMvpnL3_AutoDiscoveryType {
	if t == nil || t.AutoDiscovery == 0 {
		return 0
	}
	return t.AutoDiscovery
}

// GetCMulticastRoute retrieves the value of the leaf CMulticastRoute from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CMulticastRoute is set, it can
// safely use t.GetCMulticastRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CMulticastRoute == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) GetCMulticastRoute() E_SrlNokiaMvpnL3_CMulticastRouteType {
	if t == nil || t.CMulticastRoute == 0 {
		return 0
	}
	return t.CMulticastRoute
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.ProviderTunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/bgp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp struct {
	BgpInstance map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance `path:"bgp-instance" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) IsYANGGoStruct() {}

// NewBgpInstance creates a new entry in the BgpInstance list of the
// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) NewBgpInstance(Id uint8) (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpInstance", key)
	}

	t.BgpInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance{
		Id: &Id,
	}

	return t.BgpInstance[key], nil
}

// RenameBgpInstance renames an entry in the list BgpInstance within
// the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) RenameBgpInstance(oldK, newK uint8) error {
	if _, ok := t.BgpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpInstance", newK)
	}

	e, ok := t.BgpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpInstance", oldK)
	}
	e.Id = &newK

	t.BgpInstance[newK] = e
	delete(t.BgpInstance, oldK)
	return nil
}

// GetOrCreateBgpInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) GetOrCreateBgpInstance(
	Id uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance {
	key := Id

	if v, ok := t.BgpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpInstance(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpInstance got unexpected error: %v", err))
	}
	return v
}

// GetBgpInstance retrieves the value with the specified key from
// the BgpInstance map field of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) GetBgpInstance(Id uint8) *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.BgpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) DeleteBgpInstance(Id uint8) {
	key := Id

	delete(t.BgpInstance, key)
}

// AppendBgpInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance struct to the
// list BgpInstance of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) AppendBgpInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance,
) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpInstance == nil {
		t.BgpInstance = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance)
	}

	if _, ok := t.BgpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list BgpInstance %v", key)
	}

	t.BgpInstance[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BgpInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/bgp/bgp-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance struct {
	ExportPolicy *string                                                                             `path:"export-policy" module:"srl_nokia-mvpn-l3"`
	Id           *uint8                                                                              `path:"id" module:"srl_nokia-mvpn-l3"`
	ImportPolicy *string                                                                             `path:"import-policy" module:"srl_nokia-mvpn-l3"`
	RouteTarget  *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget `path:"route-target" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) IsYANGGoStruct() {}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) GetOrCreateRouteTarget() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget{}
	return t.RouteTarget
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) GetRouteTarget() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetId retrieves the value of the leaf Id from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) GetId() uint8 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTarget.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/bgp/bgp-instance/route-target YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget struct {
	ExportRt *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt `path:"export-rt" module:"srl_nokia-mvpn-l3"`
	ImportRt *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt `path:"import-rt" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) IsYANGGoStruct() {
}

// GetOrCreateExportRt retrieves the value of the ExportRt field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) GetOrCreateExportRt() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt {
	if t.ExportRt != nil {
		return t.ExportRt
	}
	t.ExportRt = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt{}
	return t.ExportRt
}

// GetOrCreateImportRt retrieves the value of the ImportRt field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) GetOrCreateImportRt() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt {
	if t.ImportRt != nil {
		return t.ImportRt
	}
	t.ImportRt = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt{}
	return t.ImportRt
}

// GetExportRt returns the value of the ExportRt struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget. If the receiver or the field ExportRt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) GetExportRt() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt {
	if t != nil && t.ExportRt != nil {
		return t.ExportRt
	}
	return nil
}

// GetImportRt returns the value of the ImportRt struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget. If the receiver or the field ImportRt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) GetImportRt() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt {
	if t != nil && t.ImportRt != nil {
		return t.ImportRt
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExportRt.PopulateDefaults()
	t.ImportRt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/bgp/bgp-instance/route-target/export-rt YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt struct {
	Rt      *string `path:"rt" module:"srl_nokia-mvpn-l3"`
	Unicast *bool   `path:"unicast" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) IsYANGGoStruct() {
}

// GetRt retrieves the value of the leaf Rt from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rt is set, it can
// safely use t.GetRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rt == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) GetRt() string {
	if t == nil || t.Rt == nil {
		return ""
	}
	return *t.Rt
}

// GetUnicast retrieves the value of the leaf Unicast from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ExportRt) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/bgp/bgp-instance/route-target/import-rt YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt struct {
	Rt      *string `path:"rt" module:"srl_nokia-mvpn-l3"`
	Unicast *bool   `path:"unicast" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) IsYANGGoStruct() {
}

// GetRt retrieves the value of the leaf Rt from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rt is set, it can
// safely use t.GetRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rt == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) GetRt() string {
	if t == nil || t.Rt == nil {
		return ""
	}
	return *t.Rt
}

// GetUnicast retrieves the value of the leaf Unicast from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unicast is set, it can
// safely use t.GetUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) GetUnicast() bool {
	if t == nil || t.Unicast == nil {
		return false
	}
	return *t.Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Unicast == nil {
		var v bool = false
		t.Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_Bgp_BgpInstance_RouteTarget_ImportRt) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel struct {
	Inclusive *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive `path:"inclusive" module:"srl_nokia-mvpn-l3"`
	Selective *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective `path:"selective" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) IsYANGGoStruct() {}

// GetOrCreateInclusive retrieves the value of the Inclusive field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) GetOrCreateInclusive() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive {
	if t.Inclusive != nil {
		return t.Inclusive
	}
	t.Inclusive = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive{}
	return t.Inclusive
}

// GetOrCreateSelective retrieves the value of the Selective field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) GetOrCreateSelective() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective {
	if t.Selective != nil {
		return t.Selective
	}
	t.Selective = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective{}
	return t.Selective
}

// GetInclusive returns the value of the Inclusive struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel. If the receiver or the field Inclusive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) GetInclusive() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive {
	if t != nil && t.Inclusive != nil {
		return t.Inclusive
	}
	return nil
}

// GetSelective returns the value of the Selective struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel. If the receiver or the field Selective is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) GetSelective() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective {
	if t != nil && t.Selective != nil {
		return t.Selective
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inclusive.PopulateDefaults()
	t.Selective.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel/inclusive YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive struct {
	Mldp *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp `path:"mldp" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) IsYANGGoStruct() {
}

// GetOrCreateMldp retrieves the value of the Mldp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) GetOrCreateMldp() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp {
	if t.Mldp != nil {
		return t.Mldp
	}
	t.Mldp = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp{}
	return t.Mldp
}

// GetMldp returns the value of the Mldp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive. If the receiver or the field Mldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) GetMldp() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp {
	if t != nil && t.Mldp != nil {
		return t.Mldp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mldp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel/inclusive/mldp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Inclusive_Mldp) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel/selective YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective struct {
	DataRateThreshold *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold `path:"data-rate-threshold" module:"srl_nokia-mvpn-l3"`
	Mldp              *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp              `path:"mldp" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) IsYANGGoStruct() {
}

// GetOrCreateDataRateThreshold retrieves the value of the DataRateThreshold field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) GetOrCreateDataRateThreshold() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold {
	if t.DataRateThreshold != nil {
		return t.DataRateThreshold
	}
	t.DataRateThreshold = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold{}
	return t.DataRateThreshold
}

// GetOrCreateMldp retrieves the value of the Mldp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) GetOrCreateMldp() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp {
	if t.Mldp != nil {
		return t.Mldp
	}
	t.Mldp = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp{}
	return t.Mldp
}

// GetDataRateThreshold returns the value of the DataRateThreshold struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective. If the receiver or the field DataRateThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) GetDataRateThreshold() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold {
	if t != nil && t.DataRateThreshold != nil {
		return t.DataRateThreshold
	}
	return nil
}

// GetMldp returns the value of the Mldp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective. If the receiver or the field Mldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) GetMldp() *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp {
	if t != nil && t.Mldp != nil {
		return t.Mldp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DataRateThreshold.PopulateDefaults()
	t.Mldp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel/selective/data-rate-threshold YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold struct {
	GroupRange map[string]*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange `path:"group-range" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) IsYANGGoStruct() {
}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) NewGroupRange(
	GroupPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange)
	}

	key := GroupPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange{
		GroupPrefix: &GroupPrefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.GroupPrefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) GetOrCreateGroupRange(
	GroupPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange {
	key := GroupPrefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(GroupPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) GetGroupRange(
	GroupPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange {
	if t == nil {
		return nil
	}

	key := GroupPrefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) DeleteGroupRange(GroupPrefix string) {
	key := GroupPrefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange,
) error {
	if v.GroupPrefix == nil {
		return fmt.Errorf("invalid nil key received for GroupPrefix")
	}

	key := *v.GroupPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel/selective/data-rate-threshold/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange struct {
	GroupPrefix   *string `path:"group-prefix" module:"srl_nokia-mvpn-l3"`
	RateThreshold *uint64 `path:"rate-threshold" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) IsYANGGoStruct() {
}

// GetGroupPrefix retrieves the value of the leaf GroupPrefix from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPrefix is set, it can
// safely use t.GetGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) GetGroupPrefix() string {
	if t == nil || t.GroupPrefix == nil {
		return ""
	}
	return *t.GroupPrefix
}

// GetRateThreshold retrieves the value of the leaf RateThreshold from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateThreshold is set, it can
// safely use t.GetRateThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateThreshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) GetRateThreshold() uint64 {
	if t == nil || t.RateThreshold == nil {
		return 0
	}
	return *t.RateThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupPrefix == nil {
		return nil, fmt.Errorf("nil value for key GroupPrefix")
	}

	return map[string]interface{}{
		"group-prefix": *t.GroupPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_DataRateThreshold_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp represents the /srl_nokia-network-instance/network-instance/multicast-l3-vpn/provider-tunnel/selective/mldp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-mvpn-l3"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp.
func (*SrlNokiaNetworkInstance_NetworkInstance_MulticastL3Vpn_ProviderTunnel_Selective_Mldp) ΛBelongingModule() string {
	return "srl_nokia-mvpn-l3"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups represents the /srl_nokia-network-instance/network-instance/next-hop-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group `path:"group" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) NewGroup(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) GetOrCreateGroup(Name string) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group {
	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) GetGroup(Name string) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct {
	AdminState E_SrlNokiaCommon_AdminState                                                     `path:"admin-state" module:"srl_nokia-next-hop-groups"`
	Blackhole  *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole          `path:"blackhole" module:"srl_nokia-next-hop-groups" yangPresence:"true"`
	Name       *string                                                                         `path:"name" module:"srl_nokia-next-hop-groups"`
	Nexthop    map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop `path:"nexthop" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) IsYANGGoStruct() {}

// NewNexthop creates a new entry in the Nexthop list of the
// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) NewNexthop(Index uint16) (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Nexthop == nil {
		t.Nexthop = make(map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Nexthop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Nexthop", key)
	}

	t.Nexthop[key] = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop{
		Index: &Index,
	}

	return t.Nexthop[key], nil
}

// RenameNexthop renames an entry in the list Nexthop within
// the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) RenameNexthop(oldK, newK uint16) error {
	if _, ok := t.Nexthop[newK]; ok {
		return fmt.Errorf("key %v already exists in Nexthop", newK)
	}

	e, ok := t.Nexthop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Nexthop", oldK)
	}
	e.Index = &newK

	t.Nexthop[newK] = e
	delete(t.Nexthop, oldK)
	return nil
}

// GetOrCreateNexthop retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetOrCreateNexthop(
	Index uint16,
) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop {
	key := Index

	if v, ok := t.Nexthop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNexthop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNexthop got unexpected error: %v", err))
	}
	return v
}

// GetNexthop retrieves the value with the specified key from
// the Nexthop map field of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetNexthop(Index uint16) *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Nexthop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNexthop deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) DeleteNexthop(Index uint16) {
	key := Index

	delete(t.Nexthop, key)
}

// AppendNexthop appends the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct to the
// list Nexthop of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) AppendNexthop(
	v *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Nexthop == nil {
		t.Nexthop = make(map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop)
	}

	if _, ok := t.Nexthop[key]; ok {
		return fmt.Errorf("duplicate key for list Nexthop %v", key)
	}

	t.Nexthop[key] = v
	return nil
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetOrCreateBlackhole() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole{}
	return t.Blackhole
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetBlackhole() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.Blackhole.PopulateDefaults()
	for _, e := range t.Nexthop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/blackhole YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole struct {
	GenerateIcmp *bool `path:"generate-icmp" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) IsYANGGoStruct() {}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct {
	AdminState           E_SrlNokiaCommon_AdminState                                                                      `path:"admin-state" module:"srl_nokia-next-hop-groups"`
	FailureDetection     *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection            `path:"failure-detection" module:"srl_nokia-next-hop-groups"`
	Index                *uint16                                                                                          `path:"index" module:"srl_nokia-next-hop-groups"`
	IpAddress            *string                                                                                          `path:"ip-address" module:"srl_nokia-next-hop-groups"`
	PushedMplsLabelStack []SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union `path:"pushed-mpls-label-stack" module:"srl_nokia-next-hop-groups"`
	Resolve              *bool                                                                                            `path:"resolve" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) IsYANGGoStruct() {}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection{}
	return t.FailureDetection
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPushedMplsLabelStack retrieves the value of the leaf PushedMplsLabelStack from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushedMplsLabelStack is set, it can
// safely use t.GetPushedMplsLabelStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushedMplsLabelStack == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetPushedMplsLabelStack() []SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union {
	if t == nil || t.PushedMplsLabelStack == nil {
		return nil
	}
	return t.PushedMplsLabelStack
}

// GetResolve retrieves the value of the leaf Resolve from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolve is set, it can
// safely use t.GetResolve() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolve == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) GetResolve() bool {
	if t == nil || t.Resolve == nil {
		return true
	}
	return *t.Resolve
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Resolve == nil {
		var v bool = true
		t.Resolve = &v
	}
	t.FailureDetection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection struct {
	EnableBfd *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd `path:"enable-bfd" module:"srl_nokia-next-hop-groups" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) IsYANGGoStruct() {
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) GetOrCreateEnableBfd() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd{}
	return t.EnableBfd
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) GetEnableBfd() *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EnableBfd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/failure-detection/enable-bfd YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd struct {
	LocalAddress        *string `path:"local-address" module:"srl_nokia-next-hop-groups"`
	LocalDiscriminator  *uint32 `path:"local-discriminator" module:"srl_nokia-next-hop-groups"`
	RemoteDiscriminator *uint32 `path:"remote-discriminator" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) IsYANGGoStruct() {
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalDiscriminator retrieves the value of the leaf LocalDiscriminator from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDiscriminator is set, it can
// safely use t.GetLocalDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDiscriminator == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) GetLocalDiscriminator() uint32 {
	if t == nil || t.LocalDiscriminator == nil {
		return 0
	}
	return *t.LocalDiscriminator
}

// GetRemoteDiscriminator retrieves the value of the leaf RemoteDiscriminator from the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteDiscriminator is set, it can
// safely use t.GetRemoteDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteDiscriminator == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) GetRemoteDiscriminator() uint32 {
	if t == nil || t.RemoteDiscriminator == nil {
		return 0
	}
	return *t.RemoteDiscriminator
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_FailureDetection_EnableBfd) ΛBelongingModule() string {
	return "srl_nokia-next-hop-groups"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding represents the /srl_nokia-network-instance/network-instance/policy-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct {
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface `path:"interface" module:"srl_nokia-policy-forwarding"`
	Policy    map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy    `path:"policy" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) NewInterface(Subinterface string) (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface)
	}

	key := Subinterface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface{
		Subinterface: &Subinterface,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Subinterface = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetOrCreateInterface(
	Subinterface string,
) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface {
	key := Subinterface

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Subinterface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetInterface(Subinterface string) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface {
	if t == nil {
		return nil
	}

	key := Subinterface

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) DeleteInterface(Subinterface string) {
	key := Subinterface

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface,
) error {
	if v.Subinterface == nil {
		return fmt.Errorf("invalid nil key received for Subinterface")
	}

	key := *v.Subinterface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) NewPolicy(PolicyId string) (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy{
		PolicyId: &PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetOrCreatePolicy(
	PolicyId string,
) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy {
	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) GetPolicy(PolicyId string) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy {
	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) DeletePolicy(PolicyId string) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct to the
// list Policy of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) AppendPolicy(
	v *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy,
) error {
	if v.PolicyId == nil {
		return fmt.Errorf("invalid nil key received for PolicyId")
	}

	key := *v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface represents the /srl_nokia-network-instance/network-instance/policy-forwarding/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface struct {
	ApplyForwardingPolicy *string                                                                          `path:"apply-forwarding-policy" module:"srl_nokia-policy-forwarding"`
	InterfaceRef          *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef `path:"interface-ref" module:"srl_nokia-policy-forwarding"`
	Subinterface          *string                                                                          `path:"subinterface" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) GetOrCreateInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) GetInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetApplyForwardingPolicy retrieves the value of the leaf ApplyForwardingPolicy from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyForwardingPolicy is set, it can
// safely use t.GetApplyForwardingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyForwardingPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) GetApplyForwardingPolicy() string {
	if t == nil || t.ApplyForwardingPolicy == nil {
		return ""
	}
	return *t.ApplyForwardingPolicy
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) GetSubinterface() string {
	if t == nil || t.Subinterface == nil {
		return ""
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterfaceRef.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Subinterface == nil {
		return nil, fmt.Errorf("nil value for key Subinterface")
	}

	return map[string]interface{}{
		"subinterface": *t.Subinterface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef represents the /srl_nokia-network-instance/network-instance/policy-forwarding/interface/interface-ref YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef struct {
	Interface    *string `path:"interface" module:"srl_nokia-policy-forwarding"`
	Subinterface *uint32 `path:"subinterface" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Interface_InterfaceRef) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct {
	Description *string                                                                          `path:"description" module:"srl_nokia-policy-forwarding"`
	PolicyId    *string                                                                          `path:"policy-id" module:"srl_nokia-policy-forwarding"`
	Rule        map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule `path:"rule" module:"srl_nokia-policy-forwarding"`
	Type        E_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Type           `path:"type" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) IsYANGGoStruct() {}

// NewRule creates a new entry in the Rule list of the
// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) NewRule(SequenceId uint32) (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rule", key)
	}

	t.Rule[key] = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule{
		SequenceId: &SequenceId,
	}

	return t.Rule[key], nil
}

// RenameRule renames an entry in the list Rule within
// the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) RenameRule(oldK, newK uint32) error {
	if _, ok := t.Rule[newK]; ok {
		return fmt.Errorf("key %v already exists in Rule", newK)
	}

	e, ok := t.Rule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Rule", oldK)
	}
	e.SequenceId = &newK

	t.Rule[newK] = e
	delete(t.Rule, oldK)
	return nil
}

// GetOrCreateRule retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetOrCreateRule(
	SequenceId uint32,
) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule {
	key := SequenceId

	if v, ok := t.Rule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRule(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRule got unexpected error: %v", err))
	}
	return v
}

// GetRule retrieves the value with the specified key from
// the Rule map field of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetRule(SequenceId uint32) *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Rule[key]; ok {
		return lm
	}
	return nil
}

// DeleteRule deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) DeleteRule(SequenceId uint32) {
	key := SequenceId

	delete(t.Rule, key)
}

// AppendRule appends the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule struct to the
// list Rule of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) AppendRule(
	v *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule)
	}

	if _, ok := t.Rule[key]; ok {
		return fmt.Errorf("duplicate key for list Rule %v", key)
	}

	t.Rule[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyId retrieves the value of the leaf PolicyId from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetPolicyId() string {
	if t == nil || t.PolicyId == nil {
		return ""
	}
	return *t.PolicyId
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Type {
	if t == nil || t.Type == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Type_vrf_selection_policy
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Type_vrf_selection_policy
	}
	for _, e := range t.Rule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyId == nil {
		return nil, fmt.Errorf("nil value for key PolicyId")
	}

	return map[string]interface{}{
		"policy-id": *t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule struct {
	Action      *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action `path:"action" module:"srl_nokia-policy-forwarding"`
	Description *string                                                                      `path:"description" module:"srl_nokia-policy-forwarding"`
	Match       *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match  `path:"match" module:"srl_nokia-policy-forwarding"`
	SequenceId  *uint32                                                                      `path:"sequence-id" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateAction() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetOrCreateMatch() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetAction() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetMatch() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/action YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action struct {
	NetworkInstance *string `path:"network-instance" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) IsYANGGoStruct() {
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Action) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match struct {
	Ipv4 *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 `path:"ipv4" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 struct {
	DscpSet  []SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union `path:"dscp-set" module:"srl_nokia-policy-forwarding"`
	Protocol SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union  `path:"protocol" module:"srl_nokia-policy-forwarding"`
	SourceIp *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp       `path:"source-ip" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetOrCreateSourceIp() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp{}
	return t.SourceIp
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetSourceIp() *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetDscpSet() []SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) GetProtocol() SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SourceIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp represents the /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match/ipv4/source-ip YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp struct {
	Prefix *string `path:"prefix" module:"srl_nokia-policy-forwarding"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) IsYANGGoStruct() {
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp.
func (*SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-policy-forwarding"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols represents the /srl_nokia-network-instance/network-instance/protocols YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols struct {
	Bgp               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp               `path:"bgp" module:"srl_nokia-bgp" yangPresence:"true"`
	BgpEvpn           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn           `path:"bgp-evpn" module:"srl_nokia-network-instance" yangPresence:"true"`
	BgpIpvpn          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn          `path:"bgp-ipvpn" module:"srl_nokia-network-instance" yangPresence:"true"`
	BgpVpn            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn            `path:"bgp-vpn" module:"srl_nokia-bgp-vpn" yangPresence:"true"`
	DirectlyConnected *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected `path:"directly-connected" module:"srl_nokia-network-instance"`
	Gribi             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi             `path:"gribi" module:"srl_nokia-gribi-server" yangPresence:"true"`
	Igmp              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp              `path:"igmp" module:"srl_nokia-igmp" yangPresence:"true"`
	IgmpSnooping      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping      `path:"igmp-snooping" module:"srl_nokia-igmp-snooping" yangPresence:"true"`
	Isis              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis              `path:"isis" module:"srl_nokia-isis" yangPresence:"true"`
	Ldp               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp               `path:"ldp" module:"srl_nokia-ldp" yangPresence:"true"`
	Linux             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux             `path:"linux" module:"srl_nokia-linux"`
	Mld               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld               `path:"mld" module:"srl_nokia-mld" yangPresence:"true"`
	MldSnooping       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping       `path:"mld-snooping" module:"srl_nokia-mld-snooping" yangPresence:"true"`
	Ospf              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf              `path:"ospf" module:"srl_nokia-ospf" yangPresence:"true"`
	Pim               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim               `path:"pim" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp{}
	return t.Bgp
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgpEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpIpvpn retrieves the value of the BgpIpvpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgpIpvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn {
	if t.BgpIpvpn != nil {
		return t.BgpIpvpn
	}
	t.BgpIpvpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn{}
	return t.BgpIpvpn
}

// GetOrCreateBgpVpn retrieves the value of the BgpVpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateBgpVpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn {
	if t.BgpVpn != nil {
		return t.BgpVpn
	}
	t.BgpVpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn{}
	return t.BgpVpn
}

// GetOrCreateDirectlyConnected retrieves the value of the DirectlyConnected field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateDirectlyConnected() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected {
	if t.DirectlyConnected != nil {
		return t.DirectlyConnected
	}
	t.DirectlyConnected = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected{}
	return t.DirectlyConnected
}

// GetOrCreateGribi retrieves the value of the Gribi field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateGribi() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi {
	if t.Gribi != nil {
		return t.Gribi
	}
	t.Gribi = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi{}
	return t.Gribi
}

// GetOrCreateIgmp retrieves the value of the Igmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateIgmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp {
	if t.Igmp != nil {
		return t.Igmp
	}
	t.Igmp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp{}
	return t.Igmp
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateIgmpSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIsis retrieves the value of the Isis field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateIsis() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis {
	if t.Isis != nil {
		return t.Isis
	}
	t.Isis = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis{}
	return t.Isis
}

// GetOrCreateLdp retrieves the value of the Ldp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateLdp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp {
	if t.Ldp != nil {
		return t.Ldp
	}
	t.Ldp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp{}
	return t.Ldp
}

// GetOrCreateLinux retrieves the value of the Linux field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateLinux() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux {
	if t.Linux != nil {
		return t.Linux
	}
	t.Linux = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux{}
	return t.Linux
}

// GetOrCreateMld retrieves the value of the Mld field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateMld() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld {
	if t.Mld != nil {
		return t.Mld
	}
	t.Mld = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld{}
	return t.Mld
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateMldSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateOspf retrieves the value of the Ospf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreateOspf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf {
	if t.Ospf != nil {
		return t.Ospf
	}
	t.Ospf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf{}
	return t.Ospf
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOrCreatePim() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim{}
	return t.Pim
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgpEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpIpvpn returns the value of the BgpIpvpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field BgpIpvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgpIpvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpIpvpn {
	if t != nil && t.BgpIpvpn != nil {
		return t.BgpIpvpn
	}
	return nil
}

// GetBgpVpn returns the value of the BgpVpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field BgpVpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetBgpVpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpVpn {
	if t != nil && t.BgpVpn != nil {
		return t.BgpVpn
	}
	return nil
}

// GetDirectlyConnected returns the value of the DirectlyConnected struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field DirectlyConnected is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetDirectlyConnected() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected {
	if t != nil && t.DirectlyConnected != nil {
		return t.DirectlyConnected
	}
	return nil
}

// GetGribi returns the value of the Gribi struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Gribi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetGribi() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Gribi {
	if t != nil && t.Gribi != nil {
		return t.Gribi
	}
	return nil
}

// GetIgmp returns the value of the Igmp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Igmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetIgmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp {
	if t != nil && t.Igmp != nil {
		return t.Igmp
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetIgmpSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIsis returns the value of the Isis struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Isis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetIsis() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis {
	if t != nil && t.Isis != nil {
		return t.Isis
	}
	return nil
}

// GetLdp returns the value of the Ldp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Ldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetLdp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ldp {
	if t != nil && t.Ldp != nil {
		return t.Ldp
	}
	return nil
}

// GetLinux returns the value of the Linux struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Linux is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetLinux() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux {
	if t != nil && t.Linux != nil {
		return t.Linux
	}
	return nil
}

// GetMld returns the value of the Mld struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Mld is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetMld() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Mld {
	if t != nil && t.Mld != nil {
		return t.Mld
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetMldSnooping() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetOspf returns the value of the Ospf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Ospf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetOspf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf {
	if t != nil && t.Ospf != nil {
		return t.Ospf
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) GetPim() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.BgpEvpn.PopulateDefaults()
	t.BgpIpvpn.PopulateDefaults()
	t.BgpVpn.PopulateDefaults()
	t.DirectlyConnected.PopulateDefaults()
	t.Gribi.PopulateDefaults()
	t.Igmp.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Isis.PopulateDefaults()
	t.Ldp.PopulateDefaults()
	t.Linux.PopulateDefaults()
	t.Mld.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Ospf.PopulateDefaults()
	t.Pim.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛBelongingModule() string {
	return "srl_nokia-network-instance"
}
