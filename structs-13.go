/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaPlatform_Platform_ResourceManagement represents the /srl_nokia-platform/platform/resource-management YANG schema element.
type SrlNokiaPlatform_Platform_ResourceManagement struct {
	Tcam                       *SrlNokiaPlatform_Platform_ResourceManagement_Tcam                       `path:"tcam" module:"srl_nokia-platform-resource-mgmt"`
	UnifiedForwardingResources *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources `path:"unified-forwarding-resources" module:"srl_nokia-platform-resource-mgmt"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceManagement) IsYANGGoStruct() {}

// GetOrCreateTcam retrieves the value of the Tcam field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) GetOrCreateTcam() *SrlNokiaPlatform_Platform_ResourceManagement_Tcam {
	if t.Tcam != nil {
		return t.Tcam
	}
	t.Tcam = &SrlNokiaPlatform_Platform_ResourceManagement_Tcam{}
	return t.Tcam
}

// GetOrCreateUnifiedForwardingResources retrieves the value of the UnifiedForwardingResources field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) GetOrCreateUnifiedForwardingResources() *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources {
	if t.UnifiedForwardingResources != nil {
		return t.UnifiedForwardingResources
	}
	t.UnifiedForwardingResources = &SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources{}
	return t.UnifiedForwardingResources
}

// GetTcam returns the value of the Tcam struct pointer
// from SrlNokiaPlatform_Platform_ResourceManagement. If the receiver or the field Tcam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) GetTcam() *SrlNokiaPlatform_Platform_ResourceManagement_Tcam {
	if t != nil && t.Tcam != nil {
		return t.Tcam
	}
	return nil
}

// GetUnifiedForwardingResources returns the value of the UnifiedForwardingResources struct pointer
// from SrlNokiaPlatform_Platform_ResourceManagement. If the receiver or the field UnifiedForwardingResources is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) GetUnifiedForwardingResources() *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources {
	if t != nil && t.UnifiedForwardingResources != nil {
		return t.UnifiedForwardingResources
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Tcam.PopulateDefaults()
	t.UnifiedForwardingResources.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceManagement.
func (*SrlNokiaPlatform_Platform_ResourceManagement) ΛBelongingModule() string {
	return "srl_nokia-platform-resource-mgmt"
}

// SrlNokiaPlatform_Platform_ResourceManagement_Tcam represents the /srl_nokia-platform/platform/resource-management/tcam YANG schema element.
type SrlNokiaPlatform_Platform_ResourceManagement_Tcam struct{}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceManagement_Tcam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceManagement_Tcam) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceManagement_Tcam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_Tcam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_Tcam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceManagement_Tcam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_Tcam) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_Tcam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceManagement_Tcam.
func (*SrlNokiaPlatform_Platform_ResourceManagement_Tcam) ΛBelongingModule() string {
	return "srl_nokia-platform-resource-mgmt"
}

// SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources represents the /srl_nokia-platform/platform/resource-management/unified-forwarding-resources YANG schema element.
type SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources struct {
	Alpm                        E_SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources_Alpm `path:"alpm" module:"srl_nokia-platform-resource-mgmt"`
	Ipv6_128BitLpmEntries       *uint16                                                                        `path:"ipv6-128bit-lpm-entries" module:"srl_nokia-platform-resource-mgmt"`
	RequestedExtraIpHostEntries *uint32                                                                        `path:"requested-extra-ip-host-entries" module:"srl_nokia-platform-resource-mgmt"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) IsYANGGoStruct() {}

// GetAlpm retrieves the value of the leaf Alpm from the SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alpm is set, it can
// safely use t.GetAlpm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alpm == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) GetAlpm() E_SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources_Alpm {
	if t == nil || t.Alpm == 0 {
		return 0
	}
	return t.Alpm
}

// GetIpv6_128BitLpmEntries retrieves the value of the leaf Ipv6_128BitLpmEntries from the SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6_128BitLpmEntries is set, it can
// safely use t.GetIpv6_128BitLpmEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6_128BitLpmEntries == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) GetIpv6_128BitLpmEntries() uint16 {
	if t == nil || t.Ipv6_128BitLpmEntries == nil {
		return 0
	}
	return *t.Ipv6_128BitLpmEntries
}

// GetRequestedExtraIpHostEntries retrieves the value of the leaf RequestedExtraIpHostEntries from the SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestedExtraIpHostEntries is set, it can
// safely use t.GetRequestedExtraIpHostEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestedExtraIpHostEntries == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) GetRequestedExtraIpHostEntries() uint32 {
	if t == nil || t.RequestedExtraIpHostEntries == nil {
		return 0
	}
	return *t.RequestedExtraIpHostEntries
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources.
func (*SrlNokiaPlatform_Platform_ResourceManagement_UnifiedForwardingResources) ΛBelongingModule() string {
	return "srl_nokia-platform-resource-mgmt"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring represents the /srl_nokia-platform/platform/resource-monitoring YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring struct {
	Acl      *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl      `path:"acl" module:"srl_nokia-platform-acl"`
	Datapath *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath `path:"datapath" module:"srl_nokia-platform-datapath-resources"`
	Mtu      *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu      `path:"mtu" module:"srl_nokia-platform-mtu"`
	Qos      *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos      `path:"qos" module:"srl_nokia-platform-qos"`
	Tcam     *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam     `path:"tcam" module:"srl_nokia-platform-tcam"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring) IsYANGGoStruct() {}

// GetOrCreateAcl retrieves the value of the Acl field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetOrCreateAcl() *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl {
	if t.Acl != nil {
		return t.Acl
	}
	t.Acl = &SrlNokiaPlatform_Platform_ResourceMonitoring_Acl{}
	return t.Acl
}

// GetOrCreateDatapath retrieves the value of the Datapath field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetOrCreateDatapath() *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath {
	if t.Datapath != nil {
		return t.Datapath
	}
	t.Datapath = &SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath{}
	return t.Datapath
}

// GetOrCreateMtu retrieves the value of the Mtu field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetOrCreateMtu() *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu {
	if t.Mtu != nil {
		return t.Mtu
	}
	t.Mtu = &SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu{}
	return t.Mtu
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetOrCreateQos() *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &SrlNokiaPlatform_Platform_ResourceMonitoring_Qos{}
	return t.Qos
}

// GetOrCreateTcam retrieves the value of the Tcam field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetOrCreateTcam() *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam {
	if t.Tcam != nil {
		return t.Tcam
	}
	t.Tcam = &SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam{}
	return t.Tcam
}

// GetAcl returns the value of the Acl struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring. If the receiver or the field Acl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetAcl() *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl {
	if t != nil && t.Acl != nil {
		return t.Acl
	}
	return nil
}

// GetDatapath returns the value of the Datapath struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring. If the receiver or the field Datapath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetDatapath() *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath {
	if t != nil && t.Datapath != nil {
		return t.Datapath
	}
	return nil
}

// GetMtu returns the value of the Mtu struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring. If the receiver or the field Mtu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetMtu() *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu {
	if t != nil && t.Mtu != nil {
		return t.Mtu
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetQos() *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetTcam returns the value of the Tcam struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring. If the receiver or the field Tcam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) GetTcam() *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam {
	if t != nil && t.Tcam != nil {
		return t.Tcam
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Acl.PopulateDefaults()
	t.Datapath.PopulateDefaults()
	t.Mtu.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.Tcam.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring) ΛBelongingModule() string {
	return "srl_nokia-platform-resource-monitoring"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Acl represents the /srl_nokia-platform/platform/resource-monitoring/acl YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Acl struct {
	Resource map[E_SrlNokiaPlatformAcl_AclResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource `path:"resource" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// SrlNokiaPlatform_Platform_ResourceMonitoring_Acl struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) NewResource(
	Name E_SrlNokiaPlatformAcl_AclResources,
) (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformAcl_AclResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource{
		Name: Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) RenameResource(oldK, newK E_SrlNokiaPlatformAcl_AclResources) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Acl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) GetOrCreateResource(
	Name E_SrlNokiaPlatformAcl_AclResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource {
	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of SrlNokiaPlatform_Platform_ResourceMonitoring_Acl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) GetResource(
	Name E_SrlNokiaPlatformAcl_AclResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Acl. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) DeleteResource(Name E_SrlNokiaPlatformAcl_AclResources) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource struct to the
// list Resource of SrlNokiaPlatform_Platform_ResourceMonitoring_Acl. If the key value(s) specified in
// the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource already exist in the list, an error is
// returned.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) AppendResource(
	v *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformAcl_AclResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Acl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Acl.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) ΛBelongingModule() string {
	return "srl_nokia-platform-acl"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource represents the /srl_nokia-platform/platform/resource-monitoring/acl/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource struct {
	FallingThresholdLog *uint8                             `path:"falling-threshold-log" module:"srl_nokia-platform-acl"`
	Name                E_SrlNokiaPlatformAcl_AclResources `path:"name" module:"srl_nokia-platform-acl"`
	RisingThresholdLog  *uint8                             `path:"rising-threshold-log" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) IsYANGGoStruct() {}

// GetFallingThresholdLog retrieves the value of the leaf FallingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThresholdLog is set, it can
// safely use t.GetFallingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) GetFallingThresholdLog() uint8 {
	if t == nil || t.FallingThresholdLog == nil {
		return 70
	}
	return *t.FallingThresholdLog
}

// GetName retrieves the value of the leaf Name from the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) GetName() E_SrlNokiaPlatformAcl_AclResources {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetRisingThresholdLog retrieves the value of the leaf RisingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThresholdLog is set, it can
// safely use t.GetRisingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) GetRisingThresholdLog() uint8 {
	if t == nil || t.RisingThresholdLog == nil {
		return 90
	}
	return *t.RisingThresholdLog
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FallingThresholdLog == nil {
		var v uint8 = 70
		t.FallingThresholdLog = &v
	}
	if t.RisingThresholdLog == nil {
		var v uint8 = 90
		t.RisingThresholdLog = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource struct, which is a YANG list entry.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) ΛBelongingModule() string {
	return "srl_nokia-platform-acl"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath represents the /srl_nokia-platform/platform/resource-monitoring/datapath YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath struct {
	Asic *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic `path:"asic" module:"srl_nokia-platform-datapath-resources"`
	Xdp  *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp  `path:"xdp" module:"srl_nokia-platform-datapath-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) IsYANGGoStruct() {}

// GetOrCreateAsic retrieves the value of the Asic field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) GetOrCreateAsic() *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic {
	if t.Asic != nil {
		return t.Asic
	}
	t.Asic = &SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic{}
	return t.Asic
}

// GetOrCreateXdp retrieves the value of the Xdp field
// or returns the existing field if it already exists.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) GetOrCreateXdp() *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp {
	if t.Xdp != nil {
		return t.Xdp
	}
	t.Xdp = &SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp{}
	return t.Xdp
}

// GetAsic returns the value of the Asic struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath. If the receiver or the field Asic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) GetAsic() *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic {
	if t != nil && t.Asic != nil {
		return t.Asic
	}
	return nil
}

// GetXdp returns the value of the Xdp struct pointer
// from SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath. If the receiver or the field Xdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) GetXdp() *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp {
	if t != nil && t.Xdp != nil {
		return t.Xdp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Asic.PopulateDefaults()
	t.Xdp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath) ΛBelongingModule() string {
	return "srl_nokia-platform-datapath-resources"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic represents the /srl_nokia-platform/platform/resource-monitoring/datapath/asic YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic struct {
	Resource map[E_SrlNokiaPlatformDatapathResources_AsicDatapathResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource `path:"resource" module:"srl_nokia-platform-datapath-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) NewResource(
	Name E_SrlNokiaPlatformDatapathResources_AsicDatapathResources,
) (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformDatapathResources_AsicDatapathResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource{
		Name: Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) RenameResource(
	oldK, newK E_SrlNokiaPlatformDatapathResources_AsicDatapathResources,
) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) GetOrCreateResource(
	Name E_SrlNokiaPlatformDatapathResources_AsicDatapathResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource {
	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) GetResource(
	Name E_SrlNokiaPlatformDatapathResources_AsicDatapathResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) DeleteResource(
	Name E_SrlNokiaPlatformDatapathResources_AsicDatapathResources,
) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource struct to the
// list Resource of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic. If the key value(s) specified in
// the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource already exist in the list, an error is
// returned.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) AppendResource(
	v *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformDatapathResources_AsicDatapathResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic) ΛBelongingModule() string {
	return "srl_nokia-platform-datapath-resources"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource represents the /srl_nokia-platform/platform/resource-monitoring/datapath/asic/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource struct {
	FallingThresholdLog *uint8                                                    `path:"falling-threshold-log" module:"srl_nokia-platform-datapath-resources"`
	Name                E_SrlNokiaPlatformDatapathResources_AsicDatapathResources `path:"name" module:"srl_nokia-platform-datapath-resources"`
	RisingThresholdLog  *uint8                                                    `path:"rising-threshold-log" module:"srl_nokia-platform-datapath-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) IsYANGGoStruct() {}

// GetFallingThresholdLog retrieves the value of the leaf FallingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThresholdLog is set, it can
// safely use t.GetFallingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) GetFallingThresholdLog() uint8 {
	if t == nil || t.FallingThresholdLog == nil {
		return 70
	}
	return *t.FallingThresholdLog
}

// GetName retrieves the value of the leaf Name from the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) GetName() E_SrlNokiaPlatformDatapathResources_AsicDatapathResources {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetRisingThresholdLog retrieves the value of the leaf RisingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThresholdLog is set, it can
// safely use t.GetRisingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) GetRisingThresholdLog() uint8 {
	if t == nil || t.RisingThresholdLog == nil {
		return 90
	}
	return *t.RisingThresholdLog
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FallingThresholdLog == nil {
		var v uint8 = 70
		t.FallingThresholdLog = &v
	}
	if t.RisingThresholdLog == nil {
		var v uint8 = 90
		t.RisingThresholdLog = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource struct, which is a YANG list entry.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Asic_Resource) ΛBelongingModule() string {
	return "srl_nokia-platform-datapath-resources"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp represents the /srl_nokia-platform/platform/resource-monitoring/datapath/xdp YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp struct {
	Resource map[E_SrlNokiaPlatformDatapathResources_XdpDatapathResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource `path:"resource" module:"srl_nokia-platform-datapath-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) NewResource(
	Name E_SrlNokiaPlatformDatapathResources_XdpDatapathResources,
) (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformDatapathResources_XdpDatapathResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource{
		Name: Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) RenameResource(
	oldK, newK E_SrlNokiaPlatformDatapathResources_XdpDatapathResources,
) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) GetOrCreateResource(
	Name E_SrlNokiaPlatformDatapathResources_XdpDatapathResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource {
	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) GetResource(
	Name E_SrlNokiaPlatformDatapathResources_XdpDatapathResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) DeleteResource(
	Name E_SrlNokiaPlatformDatapathResources_XdpDatapathResources,
) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource struct to the
// list Resource of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp. If the key value(s) specified in
// the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource already exist in the list, an error is
// returned.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) AppendResource(
	v *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformDatapathResources_XdpDatapathResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp) ΛBelongingModule() string {
	return "srl_nokia-platform-datapath-resources"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource represents the /srl_nokia-platform/platform/resource-monitoring/datapath/xdp/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource struct {
	FallingThresholdLog *uint8                                                   `path:"falling-threshold-log" module:"srl_nokia-platform-datapath-resources"`
	Name                E_SrlNokiaPlatformDatapathResources_XdpDatapathResources `path:"name" module:"srl_nokia-platform-datapath-resources"`
	RisingThresholdLog  *uint8                                                   `path:"rising-threshold-log" module:"srl_nokia-platform-datapath-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) IsYANGGoStruct() {}

// GetFallingThresholdLog retrieves the value of the leaf FallingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThresholdLog is set, it can
// safely use t.GetFallingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) GetFallingThresholdLog() uint8 {
	if t == nil || t.FallingThresholdLog == nil {
		return 70
	}
	return *t.FallingThresholdLog
}

// GetName retrieves the value of the leaf Name from the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) GetName() E_SrlNokiaPlatformDatapathResources_XdpDatapathResources {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetRisingThresholdLog retrieves the value of the leaf RisingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThresholdLog is set, it can
// safely use t.GetRisingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) GetRisingThresholdLog() uint8 {
	if t == nil || t.RisingThresholdLog == nil {
		return 90
	}
	return *t.RisingThresholdLog
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FallingThresholdLog == nil {
		var v uint8 = 70
		t.FallingThresholdLog = &v
	}
	if t.RisingThresholdLog == nil {
		var v uint8 = 90
		t.RisingThresholdLog = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource struct, which is a YANG list entry.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Datapath_Xdp_Resource) ΛBelongingModule() string {
	return "srl_nokia-platform-datapath-resources"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu represents the /srl_nokia-platform/platform/resource-monitoring/mtu YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu struct {
	Resource map[E_SrlNokiaPlatformMtu_MtuResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource `path:"resource" module:"srl_nokia-platform-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) NewResource(
	Name E_SrlNokiaPlatformMtu_MtuResources,
) (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformMtu_MtuResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource{
		Name: Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) RenameResource(oldK, newK E_SrlNokiaPlatformMtu_MtuResources) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) GetOrCreateResource(
	Name E_SrlNokiaPlatformMtu_MtuResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource {
	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) GetResource(
	Name E_SrlNokiaPlatformMtu_MtuResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) DeleteResource(Name E_SrlNokiaPlatformMtu_MtuResources) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource struct to the
// list Resource of SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu. If the key value(s) specified in
// the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource already exist in the list, an error is
// returned.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) AppendResource(
	v *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformMtu_MtuResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) ΛBelongingModule() string {
	return "srl_nokia-platform-mtu"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource represents the /srl_nokia-platform/platform/resource-monitoring/mtu/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource struct {
	FallingThresholdLog *uint8                             `path:"falling-threshold-log" module:"srl_nokia-platform-mtu"`
	Name                E_SrlNokiaPlatformMtu_MtuResources `path:"name" module:"srl_nokia-platform-mtu"`
	RisingThresholdLog  *uint8                             `path:"rising-threshold-log" module:"srl_nokia-platform-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) IsYANGGoStruct() {}

// GetFallingThresholdLog retrieves the value of the leaf FallingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThresholdLog is set, it can
// safely use t.GetFallingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) GetFallingThresholdLog() uint8 {
	if t == nil || t.FallingThresholdLog == nil {
		return 70
	}
	return *t.FallingThresholdLog
}

// GetName retrieves the value of the leaf Name from the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) GetName() E_SrlNokiaPlatformMtu_MtuResources {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetRisingThresholdLog retrieves the value of the leaf RisingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThresholdLog is set, it can
// safely use t.GetRisingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) GetRisingThresholdLog() uint8 {
	if t == nil || t.RisingThresholdLog == nil {
		return 90
	}
	return *t.RisingThresholdLog
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FallingThresholdLog == nil {
		var v uint8 = 70
		t.FallingThresholdLog = &v
	}
	if t.RisingThresholdLog == nil {
		var v uint8 = 90
		t.RisingThresholdLog = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource struct, which is a YANG list entry.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) ΛBelongingModule() string {
	return "srl_nokia-platform-mtu"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Qos represents the /srl_nokia-platform/platform/resource-monitoring/qos YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Qos struct {
	Resource map[E_SrlNokiaPlatformQos_QosResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource `path:"resource" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// SrlNokiaPlatform_Platform_ResourceMonitoring_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) NewResource(
	Name E_SrlNokiaPlatformQos_QosResources,
) (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformQos_QosResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource{
		Name: Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) RenameResource(oldK, newK E_SrlNokiaPlatformQos_QosResources) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) GetOrCreateResource(
	Name E_SrlNokiaPlatformQos_QosResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource {
	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of SrlNokiaPlatform_Platform_ResourceMonitoring_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) GetResource(
	Name E_SrlNokiaPlatformQos_QosResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Qos. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) DeleteResource(Name E_SrlNokiaPlatformQos_QosResources) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource struct to the
// list Resource of SrlNokiaPlatform_Platform_ResourceMonitoring_Qos. If the key value(s) specified in
// the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource already exist in the list, an error is
// returned.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) AppendResource(
	v *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformQos_QosResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Qos.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) ΛBelongingModule() string {
	return "srl_nokia-platform-qos"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource represents the /srl_nokia-platform/platform/resource-monitoring/qos/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource struct {
	FallingThresholdLog *uint8                             `path:"falling-threshold-log" module:"srl_nokia-platform-qos"`
	Name                E_SrlNokiaPlatformQos_QosResources `path:"name" module:"srl_nokia-platform-qos"`
	RisingThresholdLog  *uint8                             `path:"rising-threshold-log" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) IsYANGGoStruct() {}

// GetFallingThresholdLog retrieves the value of the leaf FallingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThresholdLog is set, it can
// safely use t.GetFallingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) GetFallingThresholdLog() uint8 {
	if t == nil || t.FallingThresholdLog == nil {
		return 70
	}
	return *t.FallingThresholdLog
}

// GetName retrieves the value of the leaf Name from the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) GetName() E_SrlNokiaPlatformQos_QosResources {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetRisingThresholdLog retrieves the value of the leaf RisingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThresholdLog is set, it can
// safely use t.GetRisingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) GetRisingThresholdLog() uint8 {
	if t == nil || t.RisingThresholdLog == nil {
		return 90
	}
	return *t.RisingThresholdLog
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FallingThresholdLog == nil {
		var v uint8 = 70
		t.FallingThresholdLog = &v
	}
	if t.RisingThresholdLog == nil {
		var v uint8 = 90
		t.RisingThresholdLog = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource struct, which is a YANG list entry.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) ΛBelongingModule() string {
	return "srl_nokia-platform-qos"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam represents the /srl_nokia-platform/platform/resource-monitoring/tcam YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam struct {
	Resource map[E_SrlNokiaPlatformTcam_TcamResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource `path:"resource" module:"srl_nokia-platform-tcam"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) IsYANGGoStruct() {}

// NewResource creates a new entry in the Resource list of the
// SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) NewResource(
	Name E_SrlNokiaPlatformTcam_TcamResources,
) (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformTcam_TcamResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Resource[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Resource", key)
	}

	t.Resource[key] = &SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource{
		Name: Name,
	}

	return t.Resource[key], nil
}

// RenameResource renames an entry in the list Resource within
// the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) RenameResource(oldK, newK E_SrlNokiaPlatformTcam_TcamResources) error {
	if _, ok := t.Resource[newK]; ok {
		return fmt.Errorf("key %v already exists in Resource", newK)
	}

	e, ok := t.Resource[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Resource", oldK)
	}
	e.Name = newK

	t.Resource[newK] = e
	delete(t.Resource, oldK)
	return nil
}

// GetOrCreateResource retrieves the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) GetOrCreateResource(
	Name E_SrlNokiaPlatformTcam_TcamResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource {
	key := Name

	if v, ok := t.Resource[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewResource(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateResource got unexpected error: %v", err))
	}
	return v
}

// GetResource retrieves the value with the specified key from
// the Resource map field of SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) GetResource(
	Name E_SrlNokiaPlatformTcam_TcamResources,
) *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Resource[key]; ok {
		return lm
	}
	return nil
}

// DeleteResource deletes the value with the specified keys from
// the receiver SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) DeleteResource(Name E_SrlNokiaPlatformTcam_TcamResources) {
	key := Name

	delete(t.Resource, key)
}

// AppendResource appends the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource struct to the
// list Resource of SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam. If the key value(s) specified in
// the supplied SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource already exist in the list, an error is
// returned.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) AppendResource(
	v *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Resource == nil {
		t.Resource = make(map[E_SrlNokiaPlatformTcam_TcamResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource)
	}

	if _, ok := t.Resource[key]; ok {
		return fmt.Errorf("duplicate key for list Resource %v", key)
	}

	t.Resource[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Resource {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) ΛBelongingModule() string {
	return "srl_nokia-platform-tcam"
}

// SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource represents the /srl_nokia-platform/platform/resource-monitoring/tcam/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource struct {
	FallingThresholdLog *uint8                               `path:"falling-threshold-log" module:"srl_nokia-platform-tcam"`
	Name                E_SrlNokiaPlatformTcam_TcamResources `path:"name" module:"srl_nokia-platform-tcam"`
	RisingThresholdLog  *uint8                               `path:"rising-threshold-log" module:"srl_nokia-platform-tcam"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) IsYANGGoStruct() {}

// GetFallingThresholdLog retrieves the value of the leaf FallingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThresholdLog is set, it can
// safely use t.GetFallingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) GetFallingThresholdLog() uint8 {
	if t == nil || t.FallingThresholdLog == nil {
		return 70
	}
	return *t.FallingThresholdLog
}

// GetName retrieves the value of the leaf Name from the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) GetName() E_SrlNokiaPlatformTcam_TcamResources {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// GetRisingThresholdLog retrieves the value of the leaf RisingThresholdLog from the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThresholdLog is set, it can
// safely use t.GetRisingThresholdLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThresholdLog == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) GetRisingThresholdLog() uint8 {
	if t == nil || t.RisingThresholdLog == nil {
		return 90
	}
	return *t.RisingThresholdLog
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FallingThresholdLog == nil {
		var v uint8 = 70
		t.FallingThresholdLog = &v
	}
	if t.RisingThresholdLog == nil {
		var v uint8 = 90
		t.RisingThresholdLog = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource struct, which is a YANG list entry.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) ΛBelongingModule() string {
	return "srl_nokia-platform-tcam"
}

// SrlNokiaPlatform_Platform_Vxdp represents the /srl_nokia-platform/platform/vxdp YANG schema element.
type SrlNokiaPlatform_Platform_Vxdp struct {
	CpuSet []uint16 `path:"cpu-set" module:"srl_nokia-platform-vxdp"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Vxdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Vxdp) IsYANGGoStruct() {}

// GetCpuSet retrieves the value of the leaf CpuSet from the SrlNokiaPlatform_Platform_Vxdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuSet is set, it can
// safely use t.GetCpuSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaPlatform_Platform_Vxdp) GetCpuSet() []uint16 {
	if t == nil || t.CpuSet == nil {
		return nil
	}
	return t.CpuSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaPlatform_Platform_Vxdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaPlatform_Platform_Vxdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_Vxdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaPlatform_Platform_Vxdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaPlatform_Platform_Vxdp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaPlatform_Platform_Vxdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaPlatform_Platform_Vxdp.
func (*SrlNokiaPlatform_Platform_Vxdp) ΛBelongingModule() string {
	return "srl_nokia-platform-vxdp"
}

// SrlNokiaQos_Qos represents the /srl_nokia-qos/qos YANG schema element.
type SrlNokiaQos_Qos struct {
	BufferManagement               *SrlNokiaQos_Qos_BufferManagement               `path:"buffer-management" module:"srl_nokia-qos"`
	Classifiers                    *SrlNokiaQos_Qos_Classifiers                    `path:"classifiers" module:"srl_nokia-qos"`
	ExplicitCongestionNotification *SrlNokiaQos_Qos_ExplicitCongestionNotification `path:"explicit-congestion-notification" module:"srl_nokia-qos" yangPresence:"true"`
	ForwardingClasses              *SrlNokiaQos_Qos_ForwardingClasses              `path:"forwarding-classes" module:"srl_nokia-qos"`
	ForwardingComplexes            *SrlNokiaQos_Qos_ForwardingComplexes            `path:"forwarding-complexes" module:"srl_nokia-qos"`
	InputClassMap                  map[string]*SrlNokiaQos_Qos_InputClassMap       `path:"input-class-map" module:"srl_nokia-qos"`
	Interfaces                     *SrlNokiaQos_Qos_Interfaces                     `path:"interfaces" module:"srl_nokia-qos" yangPresence:"true"`
	OutputClassMap                 map[string]*SrlNokiaQos_Qos_OutputClassMap      `path:"output-class-map" module:"srl_nokia-qos"`
	PolicerPolicies                *SrlNokiaQos_Qos_PolicerPolicies                `path:"policer-policies" module:"srl_nokia-qos"`
	PolicerTemplates               *SrlNokiaQos_Qos_PolicerTemplates               `path:"policer-templates" module:"srl_nokia-acl-policers"`
	PreserveDscp                   *bool                                           `path:"preserve-dscp" module:"srl_nokia-qos"`
	QueueTemplates                 *SrlNokiaQos_Qos_QueueTemplates                 `path:"queue-templates" module:"srl_nokia-qos"`
	Queues                         *SrlNokiaQos_Qos_Queues                         `path:"queues" module:"srl_nokia-qos"`
	ResourceManagement             *SrlNokiaQos_Qos_ResourceManagement             `path:"resource-management" module:"srl_nokia-qos"`
	RewriteRules                   *SrlNokiaQos_Qos_RewriteRules                   `path:"rewrite-rules" module:"srl_nokia-qos"`
	SchedulerPolicies              *SrlNokiaQos_Qos_SchedulerPolicies              `path:"scheduler-policies" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos) IsYANGGoStruct() {}

// NewInputClassMap creates a new entry in the InputClassMap list of the
// SrlNokiaQos_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos) NewInputClassMap(Name string) (*SrlNokiaQos_Qos_InputClassMap, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InputClassMap == nil {
		t.InputClassMap = make(map[string]*SrlNokiaQos_Qos_InputClassMap)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InputClassMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InputClassMap", key)
	}

	t.InputClassMap[key] = &SrlNokiaQos_Qos_InputClassMap{
		Name: &Name,
	}

	return t.InputClassMap[key], nil
}

// RenameInputClassMap renames an entry in the list InputClassMap within
// the SrlNokiaQos_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos) RenameInputClassMap(oldK, newK string) error {
	if _, ok := t.InputClassMap[newK]; ok {
		return fmt.Errorf("key %v already exists in InputClassMap", newK)
	}

	e, ok := t.InputClassMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InputClassMap", oldK)
	}
	e.Name = &newK

	t.InputClassMap[newK] = e
	delete(t.InputClassMap, oldK)
	return nil
}

// GetOrCreateInputClassMap retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos) GetOrCreateInputClassMap(Name string) *SrlNokiaQos_Qos_InputClassMap {
	key := Name

	if v, ok := t.InputClassMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInputClassMap(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInputClassMap got unexpected error: %v", err))
	}
	return v
}

// GetInputClassMap retrieves the value with the specified key from
// the InputClassMap map field of SrlNokiaQos_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos) GetInputClassMap(Name string) *SrlNokiaQos_Qos_InputClassMap {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.InputClassMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteInputClassMap deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos) DeleteInputClassMap(Name string) {
	key := Name

	delete(t.InputClassMap, key)
}

// AppendInputClassMap appends the supplied SrlNokiaQos_Qos_InputClassMap struct to the
// list InputClassMap of SrlNokiaQos_Qos. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_InputClassMap already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos) AppendInputClassMap(v *SrlNokiaQos_Qos_InputClassMap) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InputClassMap == nil {
		t.InputClassMap = make(map[string]*SrlNokiaQos_Qos_InputClassMap)
	}

	if _, ok := t.InputClassMap[key]; ok {
		return fmt.Errorf("duplicate key for list InputClassMap %v", key)
	}

	t.InputClassMap[key] = v
	return nil
}

// NewOutputClassMap creates a new entry in the OutputClassMap list of the
// SrlNokiaQos_Qos struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos) NewOutputClassMap(Name string) (*SrlNokiaQos_Qos_OutputClassMap, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OutputClassMap == nil {
		t.OutputClassMap = make(map[string]*SrlNokiaQos_Qos_OutputClassMap)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OutputClassMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OutputClassMap", key)
	}

	t.OutputClassMap[key] = &SrlNokiaQos_Qos_OutputClassMap{
		Name: &Name,
	}

	return t.OutputClassMap[key], nil
}

// RenameOutputClassMap renames an entry in the list OutputClassMap within
// the SrlNokiaQos_Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos) RenameOutputClassMap(oldK, newK string) error {
	if _, ok := t.OutputClassMap[newK]; ok {
		return fmt.Errorf("key %v already exists in OutputClassMap", newK)
	}

	e, ok := t.OutputClassMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OutputClassMap", oldK)
	}
	e.Name = &newK

	t.OutputClassMap[newK] = e
	delete(t.OutputClassMap, oldK)
	return nil
}

// GetOrCreateOutputClassMap retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos) GetOrCreateOutputClassMap(Name string) *SrlNokiaQos_Qos_OutputClassMap {
	key := Name

	if v, ok := t.OutputClassMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOutputClassMap(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOutputClassMap got unexpected error: %v", err))
	}
	return v
}

// GetOutputClassMap retrieves the value with the specified key from
// the OutputClassMap map field of SrlNokiaQos_Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos) GetOutputClassMap(Name string) *SrlNokiaQos_Qos_OutputClassMap {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.OutputClassMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteOutputClassMap deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos) DeleteOutputClassMap(Name string) {
	key := Name

	delete(t.OutputClassMap, key)
}

// AppendOutputClassMap appends the supplied SrlNokiaQos_Qos_OutputClassMap struct to the
// list OutputClassMap of SrlNokiaQos_Qos. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_OutputClassMap already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos) AppendOutputClassMap(v *SrlNokiaQos_Qos_OutputClassMap) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OutputClassMap == nil {
		t.OutputClassMap = make(map[string]*SrlNokiaQos_Qos_OutputClassMap)
	}

	if _, ok := t.OutputClassMap[key]; ok {
		return fmt.Errorf("duplicate key for list OutputClassMap %v", key)
	}

	t.OutputClassMap[key] = v
	return nil
}

// GetOrCreateBufferManagement retrieves the value of the BufferManagement field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateBufferManagement() *SrlNokiaQos_Qos_BufferManagement {
	if t.BufferManagement != nil {
		return t.BufferManagement
	}
	t.BufferManagement = &SrlNokiaQos_Qos_BufferManagement{}
	return t.BufferManagement
}

// GetOrCreateClassifiers retrieves the value of the Classifiers field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateClassifiers() *SrlNokiaQos_Qos_Classifiers {
	if t.Classifiers != nil {
		return t.Classifiers
	}
	t.Classifiers = &SrlNokiaQos_Qos_Classifiers{}
	return t.Classifiers
}

// GetOrCreateExplicitCongestionNotification retrieves the value of the ExplicitCongestionNotification field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateExplicitCongestionNotification() *SrlNokiaQos_Qos_ExplicitCongestionNotification {
	if t.ExplicitCongestionNotification != nil {
		return t.ExplicitCongestionNotification
	}
	t.ExplicitCongestionNotification = &SrlNokiaQos_Qos_ExplicitCongestionNotification{}
	return t.ExplicitCongestionNotification
}

// GetOrCreateForwardingClasses retrieves the value of the ForwardingClasses field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateForwardingClasses() *SrlNokiaQos_Qos_ForwardingClasses {
	if t.ForwardingClasses != nil {
		return t.ForwardingClasses
	}
	t.ForwardingClasses = &SrlNokiaQos_Qos_ForwardingClasses{}
	return t.ForwardingClasses
}

// GetOrCreateForwardingComplexes retrieves the value of the ForwardingComplexes field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateForwardingComplexes() *SrlNokiaQos_Qos_ForwardingComplexes {
	if t.ForwardingComplexes != nil {
		return t.ForwardingComplexes
	}
	t.ForwardingComplexes = &SrlNokiaQos_Qos_ForwardingComplexes{}
	return t.ForwardingComplexes
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateInterfaces() *SrlNokiaQos_Qos_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &SrlNokiaQos_Qos_Interfaces{}
	return t.Interfaces
}

// GetOrCreatePolicerPolicies retrieves the value of the PolicerPolicies field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreatePolicerPolicies() *SrlNokiaQos_Qos_PolicerPolicies {
	if t.PolicerPolicies != nil {
		return t.PolicerPolicies
	}
	t.PolicerPolicies = &SrlNokiaQos_Qos_PolicerPolicies{}
	return t.PolicerPolicies
}

// GetOrCreatePolicerTemplates retrieves the value of the PolicerTemplates field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreatePolicerTemplates() *SrlNokiaQos_Qos_PolicerTemplates {
	if t.PolicerTemplates != nil {
		return t.PolicerTemplates
	}
	t.PolicerTemplates = &SrlNokiaQos_Qos_PolicerTemplates{}
	return t.PolicerTemplates
}

// GetOrCreateQueueTemplates retrieves the value of the QueueTemplates field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateQueueTemplates() *SrlNokiaQos_Qos_QueueTemplates {
	if t.QueueTemplates != nil {
		return t.QueueTemplates
	}
	t.QueueTemplates = &SrlNokiaQos_Qos_QueueTemplates{}
	return t.QueueTemplates
}

// GetOrCreateQueues retrieves the value of the Queues field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateQueues() *SrlNokiaQos_Qos_Queues {
	if t.Queues != nil {
		return t.Queues
	}
	t.Queues = &SrlNokiaQos_Qos_Queues{}
	return t.Queues
}

// GetOrCreateResourceManagement retrieves the value of the ResourceManagement field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateResourceManagement() *SrlNokiaQos_Qos_ResourceManagement {
	if t.ResourceManagement != nil {
		return t.ResourceManagement
	}
	t.ResourceManagement = &SrlNokiaQos_Qos_ResourceManagement{}
	return t.ResourceManagement
}

// GetOrCreateRewriteRules retrieves the value of the RewriteRules field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateRewriteRules() *SrlNokiaQos_Qos_RewriteRules {
	if t.RewriteRules != nil {
		return t.RewriteRules
	}
	t.RewriteRules = &SrlNokiaQos_Qos_RewriteRules{}
	return t.RewriteRules
}

// GetOrCreateSchedulerPolicies retrieves the value of the SchedulerPolicies field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos) GetOrCreateSchedulerPolicies() *SrlNokiaQos_Qos_SchedulerPolicies {
	if t.SchedulerPolicies != nil {
		return t.SchedulerPolicies
	}
	t.SchedulerPolicies = &SrlNokiaQos_Qos_SchedulerPolicies{}
	return t.SchedulerPolicies
}

// GetBufferManagement returns the value of the BufferManagement struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field BufferManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetBufferManagement() *SrlNokiaQos_Qos_BufferManagement {
	if t != nil && t.BufferManagement != nil {
		return t.BufferManagement
	}
	return nil
}

// GetClassifiers returns the value of the Classifiers struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field Classifiers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetClassifiers() *SrlNokiaQos_Qos_Classifiers {
	if t != nil && t.Classifiers != nil {
		return t.Classifiers
	}
	return nil
}

// GetExplicitCongestionNotification returns the value of the ExplicitCongestionNotification struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field ExplicitCongestionNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetExplicitCongestionNotification() *SrlNokiaQos_Qos_ExplicitCongestionNotification {
	if t != nil && t.ExplicitCongestionNotification != nil {
		return t.ExplicitCongestionNotification
	}
	return nil
}

// GetForwardingClasses returns the value of the ForwardingClasses struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field ForwardingClasses is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetForwardingClasses() *SrlNokiaQos_Qos_ForwardingClasses {
	if t != nil && t.ForwardingClasses != nil {
		return t.ForwardingClasses
	}
	return nil
}

// GetForwardingComplexes returns the value of the ForwardingComplexes struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field ForwardingComplexes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetForwardingComplexes() *SrlNokiaQos_Qos_ForwardingComplexes {
	if t != nil && t.ForwardingComplexes != nil {
		return t.ForwardingComplexes
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetInterfaces() *SrlNokiaQos_Qos_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetPolicerPolicies returns the value of the PolicerPolicies struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field PolicerPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetPolicerPolicies() *SrlNokiaQos_Qos_PolicerPolicies {
	if t != nil && t.PolicerPolicies != nil {
		return t.PolicerPolicies
	}
	return nil
}

// GetPolicerTemplates returns the value of the PolicerTemplates struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field PolicerTemplates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetPolicerTemplates() *SrlNokiaQos_Qos_PolicerTemplates {
	if t != nil && t.PolicerTemplates != nil {
		return t.PolicerTemplates
	}
	return nil
}

// GetQueueTemplates returns the value of the QueueTemplates struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field QueueTemplates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetQueueTemplates() *SrlNokiaQos_Qos_QueueTemplates {
	if t != nil && t.QueueTemplates != nil {
		return t.QueueTemplates
	}
	return nil
}

// GetQueues returns the value of the Queues struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field Queues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetQueues() *SrlNokiaQos_Qos_Queues {
	if t != nil && t.Queues != nil {
		return t.Queues
	}
	return nil
}

// GetResourceManagement returns the value of the ResourceManagement struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field ResourceManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetResourceManagement() *SrlNokiaQos_Qos_ResourceManagement {
	if t != nil && t.ResourceManagement != nil {
		return t.ResourceManagement
	}
	return nil
}

// GetRewriteRules returns the value of the RewriteRules struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field RewriteRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetRewriteRules() *SrlNokiaQos_Qos_RewriteRules {
	if t != nil && t.RewriteRules != nil {
		return t.RewriteRules
	}
	return nil
}

// GetSchedulerPolicies returns the value of the SchedulerPolicies struct pointer
// from SrlNokiaQos_Qos. If the receiver or the field SchedulerPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos) GetSchedulerPolicies() *SrlNokiaQos_Qos_SchedulerPolicies {
	if t != nil && t.SchedulerPolicies != nil {
		return t.SchedulerPolicies
	}
	return nil
}

// GetPreserveDscp retrieves the value of the leaf PreserveDscp from the SrlNokiaQos_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreserveDscp is set, it can
// safely use t.GetPreserveDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreserveDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos) GetPreserveDscp() bool {
	if t == nil || t.PreserveDscp == nil {
		return false
	}
	return *t.PreserveDscp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BufferManagement.PopulateDefaults()
	t.Classifiers.PopulateDefaults()
	t.ExplicitCongestionNotification.PopulateDefaults()
	t.ForwardingClasses.PopulateDefaults()
	t.ForwardingComplexes.PopulateDefaults()
	t.Interfaces.PopulateDefaults()
	t.PolicerPolicies.PopulateDefaults()
	t.PolicerTemplates.PopulateDefaults()
	t.QueueTemplates.PopulateDefaults()
	t.Queues.PopulateDefaults()
	t.ResourceManagement.PopulateDefaults()
	t.RewriteRules.PopulateDefaults()
	t.SchedulerPolicies.PopulateDefaults()
	for _, e := range t.InputClassMap {
		e.PopulateDefaults()
	}
	for _, e := range t.OutputClassMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos.
func (*SrlNokiaQos_Qos) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement represents the /srl_nokia-qos/qos/buffer-management YANG schema element.
type SrlNokiaQos_Qos_BufferManagement struct {
	BufferAllocationProfile map[string]*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile `path:"buffer-allocation-profile" module:"srl_nokia-qos"`
	CommittedBurstSizeTable *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable            `path:"committed-burst-size-table" module:"srl_nokia-qos"`
	FpPoolPolicy            map[string]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy            `path:"fp-pool-policy" module:"srl_nokia-qos"`
	InterfacePoolPolicy     map[string]*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy     `path:"interface-pool-policy" module:"srl_nokia-qos"`
	QueueManagementProfile  map[string]*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile  `path:"queue-management-profile" module:"srl_nokia-qos"`
	SlopePolicy             map[string]*SrlNokiaQos_Qos_BufferManagement_SlopePolicy             `path:"slope-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement) IsYANGGoStruct() {}

// NewBufferAllocationProfile creates a new entry in the BufferAllocationProfile list of the
// SrlNokiaQos_Qos_BufferManagement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement) NewBufferAllocationProfile(Name string) (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BufferAllocationProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BufferAllocationProfile", key)
	}

	t.BufferAllocationProfile[key] = &SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile{
		Name: &Name,
	}

	return t.BufferAllocationProfile[key], nil
}

// RenameBufferAllocationProfile renames an entry in the list BufferAllocationProfile within
// the SrlNokiaQos_Qos_BufferManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement) RenameBufferAllocationProfile(oldK, newK string) error {
	if _, ok := t.BufferAllocationProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in BufferAllocationProfile", newK)
	}

	e, ok := t.BufferAllocationProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BufferAllocationProfile", oldK)
	}
	e.Name = &newK

	t.BufferAllocationProfile[newK] = e
	delete(t.BufferAllocationProfile, oldK)
	return nil
}

// GetOrCreateBufferAllocationProfile retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement) GetOrCreateBufferAllocationProfile(Name string) *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile {
	key := Name

	if v, ok := t.BufferAllocationProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBufferAllocationProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBufferAllocationProfile got unexpected error: %v", err))
	}
	return v
}

// GetBufferAllocationProfile retrieves the value with the specified key from
// the BufferAllocationProfile map field of SrlNokiaQos_Qos_BufferManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement) GetBufferAllocationProfile(Name string) *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BufferAllocationProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteBufferAllocationProfile deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement) DeleteBufferAllocationProfile(Name string) {
	key := Name

	delete(t.BufferAllocationProfile, key)
}

// AppendBufferAllocationProfile appends the supplied SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile struct to the
// list BufferAllocationProfile of SrlNokiaQos_Qos_BufferManagement. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement) AppendBufferAllocationProfile(
	v *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile)
	}

	if _, ok := t.BufferAllocationProfile[key]; ok {
		return fmt.Errorf("duplicate key for list BufferAllocationProfile %v", key)
	}

	t.BufferAllocationProfile[key] = v
	return nil
}

// NewFpPoolPolicy creates a new entry in the FpPoolPolicy list of the
// SrlNokiaQos_Qos_BufferManagement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement) NewFpPoolPolicy(Name string) (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FpPoolPolicy == nil {
		t.FpPoolPolicy = make(map[string]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FpPoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FpPoolPolicy", key)
	}

	t.FpPoolPolicy[key] = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy{
		Name: &Name,
	}

	return t.FpPoolPolicy[key], nil
}

// RenameFpPoolPolicy renames an entry in the list FpPoolPolicy within
// the SrlNokiaQos_Qos_BufferManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement) RenameFpPoolPolicy(oldK, newK string) error {
	if _, ok := t.FpPoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in FpPoolPolicy", newK)
	}

	e, ok := t.FpPoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FpPoolPolicy", oldK)
	}
	e.Name = &newK

	t.FpPoolPolicy[newK] = e
	delete(t.FpPoolPolicy, oldK)
	return nil
}

// GetOrCreateFpPoolPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement) GetOrCreateFpPoolPolicy(Name string) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy {
	key := Name

	if v, ok := t.FpPoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFpPoolPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFpPoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetFpPoolPolicy retrieves the value with the specified key from
// the FpPoolPolicy map field of SrlNokiaQos_Qos_BufferManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement) GetFpPoolPolicy(Name string) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.FpPoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteFpPoolPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement) DeleteFpPoolPolicy(Name string) {
	key := Name

	delete(t.FpPoolPolicy, key)
}

// AppendFpPoolPolicy appends the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy struct to the
// list FpPoolPolicy of SrlNokiaQos_Qos_BufferManagement. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement) AppendFpPoolPolicy(v *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FpPoolPolicy == nil {
		t.FpPoolPolicy = make(map[string]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy)
	}

	if _, ok := t.FpPoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list FpPoolPolicy %v", key)
	}

	t.FpPoolPolicy[key] = v
	return nil
}

// NewInterfacePoolPolicy creates a new entry in the InterfacePoolPolicy list of the
// SrlNokiaQos_Qos_BufferManagement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement) NewInterfacePoolPolicy(Name string) (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfacePoolPolicy == nil {
		t.InterfacePoolPolicy = make(map[string]*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfacePoolPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfacePoolPolicy", key)
	}

	t.InterfacePoolPolicy[key] = &SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy{
		Name: &Name,
	}

	return t.InterfacePoolPolicy[key], nil
}

// RenameInterfacePoolPolicy renames an entry in the list InterfacePoolPolicy within
// the SrlNokiaQos_Qos_BufferManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement) RenameInterfacePoolPolicy(oldK, newK string) error {
	if _, ok := t.InterfacePoolPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in InterfacePoolPolicy", newK)
	}

	e, ok := t.InterfacePoolPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterfacePoolPolicy", oldK)
	}
	e.Name = &newK

	t.InterfacePoolPolicy[newK] = e
	delete(t.InterfacePoolPolicy, oldK)
	return nil
}

// GetOrCreateInterfacePoolPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement) GetOrCreateInterfacePoolPolicy(Name string) *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy {
	key := Name

	if v, ok := t.InterfacePoolPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterfacePoolPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterfacePoolPolicy got unexpected error: %v", err))
	}
	return v
}

// GetInterfacePoolPolicy retrieves the value with the specified key from
// the InterfacePoolPolicy map field of SrlNokiaQos_Qos_BufferManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement) GetInterfacePoolPolicy(Name string) *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.InterfacePoolPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterfacePoolPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement) DeleteInterfacePoolPolicy(Name string) {
	key := Name

	delete(t.InterfacePoolPolicy, key)
}

// AppendInterfacePoolPolicy appends the supplied SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy struct to the
// list InterfacePoolPolicy of SrlNokiaQos_Qos_BufferManagement. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement) AppendInterfacePoolPolicy(
	v *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfacePoolPolicy == nil {
		t.InterfacePoolPolicy = make(map[string]*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy)
	}

	if _, ok := t.InterfacePoolPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list InterfacePoolPolicy %v", key)
	}

	t.InterfacePoolPolicy[key] = v
	return nil
}

// NewQueueManagementProfile creates a new entry in the QueueManagementProfile list of the
// SrlNokiaQos_Qos_BufferManagement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement) NewQueueManagementProfile(Name string) (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueManagementProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueManagementProfile", key)
	}

	t.QueueManagementProfile[key] = &SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile{
		Name: &Name,
	}

	return t.QueueManagementProfile[key], nil
}

// RenameQueueManagementProfile renames an entry in the list QueueManagementProfile within
// the SrlNokiaQos_Qos_BufferManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement) RenameQueueManagementProfile(oldK, newK string) error {
	if _, ok := t.QueueManagementProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueManagementProfile", newK)
	}

	e, ok := t.QueueManagementProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueManagementProfile", oldK)
	}
	e.Name = &newK

	t.QueueManagementProfile[newK] = e
	delete(t.QueueManagementProfile, oldK)
	return nil
}

// GetOrCreateQueueManagementProfile retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement) GetOrCreateQueueManagementProfile(Name string) *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile {
	key := Name

	if v, ok := t.QueueManagementProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueManagementProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueManagementProfile got unexpected error: %v", err))
	}
	return v
}

// GetQueueManagementProfile retrieves the value with the specified key from
// the QueueManagementProfile map field of SrlNokiaQos_Qos_BufferManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement) GetQueueManagementProfile(Name string) *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.QueueManagementProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueManagementProfile deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement) DeleteQueueManagementProfile(Name string) {
	key := Name

	delete(t.QueueManagementProfile, key)
}

// AppendQueueManagementProfile appends the supplied SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile struct to the
// list QueueManagementProfile of SrlNokiaQos_Qos_BufferManagement. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement) AppendQueueManagementProfile(
	v *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile)
	}

	if _, ok := t.QueueManagementProfile[key]; ok {
		return fmt.Errorf("duplicate key for list QueueManagementProfile %v", key)
	}

	t.QueueManagementProfile[key] = v
	return nil
}

// NewSlopePolicy creates a new entry in the SlopePolicy list of the
// SrlNokiaQos_Qos_BufferManagement struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement) NewSlopePolicy(Name string) (*SrlNokiaQos_Qos_BufferManagement_SlopePolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlopePolicy == nil {
		t.SlopePolicy = make(map[string]*SrlNokiaQos_Qos_BufferManagement_SlopePolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SlopePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SlopePolicy", key)
	}

	t.SlopePolicy[key] = &SrlNokiaQos_Qos_BufferManagement_SlopePolicy{
		Name: &Name,
	}

	return t.SlopePolicy[key], nil
}

// RenameSlopePolicy renames an entry in the list SlopePolicy within
// the SrlNokiaQos_Qos_BufferManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement) RenameSlopePolicy(oldK, newK string) error {
	if _, ok := t.SlopePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SlopePolicy", newK)
	}

	e, ok := t.SlopePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SlopePolicy", oldK)
	}
	e.Name = &newK

	t.SlopePolicy[newK] = e
	delete(t.SlopePolicy, oldK)
	return nil
}

// GetOrCreateSlopePolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement) GetOrCreateSlopePolicy(Name string) *SrlNokiaQos_Qos_BufferManagement_SlopePolicy {
	key := Name

	if v, ok := t.SlopePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSlopePolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSlopePolicy got unexpected error: %v", err))
	}
	return v
}

// GetSlopePolicy retrieves the value with the specified key from
// the SlopePolicy map field of SrlNokiaQos_Qos_BufferManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement) GetSlopePolicy(Name string) *SrlNokiaQos_Qos_BufferManagement_SlopePolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SlopePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSlopePolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement) DeleteSlopePolicy(Name string) {
	key := Name

	delete(t.SlopePolicy, key)
}

// AppendSlopePolicy appends the supplied SrlNokiaQos_Qos_BufferManagement_SlopePolicy struct to the
// list SlopePolicy of SrlNokiaQos_Qos_BufferManagement. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_SlopePolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement) AppendSlopePolicy(v *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SlopePolicy == nil {
		t.SlopePolicy = make(map[string]*SrlNokiaQos_Qos_BufferManagement_SlopePolicy)
	}

	if _, ok := t.SlopePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SlopePolicy %v", key)
	}

	t.SlopePolicy[key] = v
	return nil
}

// GetOrCreateCommittedBurstSizeTable retrieves the value of the CommittedBurstSizeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement) GetOrCreateCommittedBurstSizeTable() *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable {
	if t.CommittedBurstSizeTable != nil {
		return t.CommittedBurstSizeTable
	}
	t.CommittedBurstSizeTable = &SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable{}
	return t.CommittedBurstSizeTable
}

// GetCommittedBurstSizeTable returns the value of the CommittedBurstSizeTable struct pointer
// from SrlNokiaQos_Qos_BufferManagement. If the receiver or the field CommittedBurstSizeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement) GetCommittedBurstSizeTable() *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable {
	if t != nil && t.CommittedBurstSizeTable != nil {
		return t.CommittedBurstSizeTable
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CommittedBurstSizeTable.PopulateDefaults()
	for _, e := range t.BufferAllocationProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.FpPoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.InterfacePoolPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.QueueManagementProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.SlopePolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement.
func (*SrlNokiaQos_Qos_BufferManagement) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile represents the /srl_nokia-qos/qos/buffer-management/buffer-allocation-profile YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile struct {
	Name   *string                                                          `path:"name" module:"srl_nokia-qos"`
	Queues *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues `path:"queues" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) IsYANGGoStruct() {}

// GetOrCreateQueues retrieves the value of the Queues field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) GetOrCreateQueues() *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues {
	if t.Queues != nil {
		return t.Queues
	}
	t.Queues = &SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues{}
	return t.Queues
}

// GetQueues returns the value of the Queues struct pointer
// from SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile. If the receiver or the field Queues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) GetQueues() *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues {
	if t != nil && t.Queues != nil {
		return t.Queues
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queues.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile.
func (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues represents the /srl_nokia-qos/qos/buffer-management/buffer-allocation-profile/queues YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues struct {
	Queue map[SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union]*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue `path:"queue" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) NewQueue(
	QueueName SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union,
) (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union]*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue)
	}

	key := QueueName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue{
		QueueName: QueueName,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) RenameQueue(
	oldK, newK SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union,
) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueName = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) GetOrCreateQueue(
	QueueName SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union,
) *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue {
	key := QueueName

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) GetQueue(
	QueueName SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union,
) *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue {
	if t == nil {
		return nil
	}

	key := QueueName

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) DeleteQueue(
	QueueName SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union,
) {
	key := QueueName

	delete(t.Queue, key)
}

// AppendQueue appends the supplied SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue struct to the
// list Queue of SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) AppendQueue(
	v *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue,
) error {
	key := v.QueueName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union]*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues.
func (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue represents the /srl_nokia-qos/qos/buffer-management/buffer-allocation-profile/queues/queue YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue struct {
	CbsAdaptationRule  E_SrlNokiaCommon_AdaptationRule                                                       `path:"cbs-adaptation-rule" module:"srl_nokia-qos"`
	CommittedBurstSize *uint32                                                                               `path:"committed-burst-size" module:"srl_nokia-qos"`
	HighThresholdBytes *uint32                                                                               `path:"high-threshold-bytes" module:"srl_nokia-qos"`
	MaximumBurstSize   *uint32                                                                               `path:"maximum-burst-size" module:"srl_nokia-qos"`
	MbsAdaptationRule  E_SrlNokiaCommon_AdaptationRule                                                       `path:"mbs-adaptation-rule" module:"srl_nokia-qos"`
	QueueName          SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union `path:"queue-name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) IsYANGGoStruct() {}

// GetCbsAdaptationRule retrieves the value of the leaf CbsAdaptationRule from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CbsAdaptationRule is set, it can
// safely use t.GetCbsAdaptationRule() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CbsAdaptationRule == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) GetCbsAdaptationRule() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.CbsAdaptationRule == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.CbsAdaptationRule
}

// GetCommittedBurstSize retrieves the value of the leaf CommittedBurstSize from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedBurstSize is set, it can
// safely use t.GetCommittedBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) GetCommittedBurstSize() uint32 {
	if t == nil || t.CommittedBurstSize == nil {
		return 0
	}
	return *t.CommittedBurstSize
}

// GetHighThresholdBytes retrieves the value of the leaf HighThresholdBytes from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighThresholdBytes is set, it can
// safely use t.GetHighThresholdBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighThresholdBytes == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) GetHighThresholdBytes() uint32 {
	if t == nil || t.HighThresholdBytes == nil {
		return 0
	}
	return *t.HighThresholdBytes
}

// GetMaximumBurstSize retrieves the value of the leaf MaximumBurstSize from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumBurstSize is set, it can
// safely use t.GetMaximumBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) GetMaximumBurstSize() uint32 {
	if t == nil || t.MaximumBurstSize == nil {
		return 0
	}
	return *t.MaximumBurstSize
}

// GetMbsAdaptationRule retrieves the value of the leaf MbsAdaptationRule from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsAdaptationRule is set, it can
// safely use t.GetMbsAdaptationRule() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsAdaptationRule == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) GetMbsAdaptationRule() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.MbsAdaptationRule == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.MbsAdaptationRule
}

// GetQueueName retrieves the value of the leaf QueueName from the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueName is set, it can
// safely use t.GetQueueName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueName == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) GetQueueName() SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union {
	if t == nil || t.QueueName == nil {
		return nil
	}
	return t.QueueName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CbsAdaptationRule == 0 {
		t.CbsAdaptationRule = SrlNokiaCommon_AdaptationRule_closest
	}
	if t.CommittedBurstSize == nil {
		var v uint32 = 0
		t.CommittedBurstSize = &v
	}
	if t.HighThresholdBytes == nil {
		var v uint32 = 0
		t.HighThresholdBytes = &v
	}
	if t.MaximumBurstSize == nil {
		var v uint32 = 0
		t.MaximumBurstSize = &v
	}
	if t.MbsAdaptationRule == 0 {
		t.MbsAdaptationRule = SrlNokiaCommon_AdaptationRule_closest
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"queue-name": t.QueueName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue.
func (*SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable represents the /srl_nokia-qos/qos/buffer-management/committed-burst-size-table YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable struct {
	Alt_0 *uint32 `path:"alt-0" module:"srl_nokia-qos"`
	Alt_1 *uint32 `path:"alt-1" module:"srl_nokia-qos"`
	Alt_2 *uint32 `path:"alt-2" module:"srl_nokia-qos"`
	Alt_3 *uint32 `path:"alt-3" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) IsYANGGoStruct() {}

// GetAlt_0 retrieves the value of the leaf Alt_0 from the SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alt_0 is set, it can
// safely use t.GetAlt_0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alt_0 == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) GetAlt_0() uint32 {
	if t == nil || t.Alt_0 == nil {
		return 0
	}
	return *t.Alt_0
}

// GetAlt_1 retrieves the value of the leaf Alt_1 from the SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alt_1 is set, it can
// safely use t.GetAlt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alt_1 == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) GetAlt_1() uint32 {
	if t == nil || t.Alt_1 == nil {
		return 0
	}
	return *t.Alt_1
}

// GetAlt_2 retrieves the value of the leaf Alt_2 from the SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alt_2 is set, it can
// safely use t.GetAlt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alt_2 == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) GetAlt_2() uint32 {
	if t == nil || t.Alt_2 == nil {
		return 0
	}
	return *t.Alt_2
}

// GetAlt_3 retrieves the value of the leaf Alt_3 from the SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alt_3 is set, it can
// safely use t.GetAlt_3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alt_3 == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) GetAlt_3() uint32 {
	if t == nil || t.Alt_3 == nil {
		return 0
	}
	return *t.Alt_3
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable.
func (*SrlNokiaQos_Qos_BufferManagement_CommittedBurstSizeTable) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy struct {
	MidTier                 *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier  `path:"mid-tier" module:"srl_nokia-qos"`
	Name                    *string                                                 `path:"name" module:"srl_nokia-qos"`
	RootTier                *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier `path:"root-tier" module:"srl_nokia-qos"`
	SystemReservePercentage *uint8                                                  `path:"system-reserve-percentage" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) IsYANGGoStruct() {}

// GetOrCreateMidTier retrieves the value of the MidTier field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) GetOrCreateMidTier() *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier {
	if t.MidTier != nil {
		return t.MidTier
	}
	t.MidTier = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier{}
	return t.MidTier
}

// GetOrCreateRootTier retrieves the value of the RootTier field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) GetOrCreateRootTier() *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier {
	if t.RootTier != nil {
		return t.RootTier
	}
	t.RootTier = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier{}
	return t.RootTier
}

// GetMidTier returns the value of the MidTier struct pointer
// from SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy. If the receiver or the field MidTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) GetMidTier() *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier {
	if t != nil && t.MidTier != nil {
		return t.MidTier
	}
	return nil
}

// GetRootTier returns the value of the RootTier struct pointer
// from SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy. If the receiver or the field RootTier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) GetRootTier() *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier {
	if t != nil && t.RootTier != nil {
		return t.RootTier
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSystemReservePercentage retrieves the value of the leaf SystemReservePercentage from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemReservePercentage is set, it can
// safely use t.GetSystemReservePercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemReservePercentage == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) GetSystemReservePercentage() uint8 {
	if t == nil || t.SystemReservePercentage == nil {
		return 10
	}
	return *t.SystemReservePercentage
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemReservePercentage == nil {
		var v uint8 = 10
		t.SystemReservePercentage = &v
	}
	t.MidTier.PopulateDefaults()
	t.RootTier.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy/mid-tier YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier struct {
	MidPool map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool `path:"mid-pool" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) IsYANGGoStruct() {}

// NewMidPool creates a new entry in the MidPool list of the
// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) NewMidPool(Index uint8) (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPool == nil {
		t.MidPool = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MidPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MidPool", key)
	}

	t.MidPool[key] = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool{
		Index: &Index,
	}

	return t.MidPool[key], nil
}

// RenameMidPool renames an entry in the list MidPool within
// the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) RenameMidPool(oldK, newK uint8) error {
	if _, ok := t.MidPool[newK]; ok {
		return fmt.Errorf("key %v already exists in MidPool", newK)
	}

	e, ok := t.MidPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MidPool", oldK)
	}
	e.Index = &newK

	t.MidPool[newK] = e
	delete(t.MidPool, oldK)
	return nil
}

// GetOrCreateMidPool retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) GetOrCreateMidPool(Index uint8) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool {
	key := Index

	if v, ok := t.MidPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMidPool(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMidPool got unexpected error: %v", err))
	}
	return v
}

// GetMidPool retrieves the value with the specified key from
// the MidPool map field of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) GetMidPool(Index uint8) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.MidPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteMidPool deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) DeleteMidPool(Index uint8) {
	key := Index

	delete(t.MidPool, key)
}

// AppendMidPool appends the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool struct to the
// list MidPool of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) AppendMidPool(
	v *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPool == nil {
		t.MidPool = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool)
	}

	if _, ok := t.MidPool[key]; ok {
		return fmt.Errorf("duplicate key for list MidPool %v", key)
	}

	t.MidPool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MidPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy/mid-tier/mid-pool YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool struct {
	AllocationPercentageSize *uint8  `path:"allocation-percentage-size" module:"srl_nokia-qos"`
	Index                    *uint8  `path:"index" module:"srl_nokia-qos"`
	SlopePolicy              *string `path:"slope-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) IsYANGGoStruct() {}

// GetAllocationPercentageSize retrieves the value of the leaf AllocationPercentageSize from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationPercentageSize is set, it can
// safely use t.GetAllocationPercentageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationPercentageSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) GetAllocationPercentageSize() uint8 {
	if t == nil || t.AllocationPercentageSize == nil {
		return 0
	}
	return *t.AllocationPercentageSize
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return "default"
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SlopePolicy == nil {
		var v string = "default"
		t.SlopePolicy = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_MidTier_MidPool) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy/root-tier YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier struct {
	DefaultSlopePolicy *string                                                                    `path:"default-slope-policy" module:"srl_nokia-qos"`
	RootPool           map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool `path:"root-pool" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) IsYANGGoStruct() {}

// NewRootPool creates a new entry in the RootPool list of the
// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) NewRootPool(Index uint8) (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RootPool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RootPool", key)
	}

	t.RootPool[key] = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool{
		Index: &Index,
	}

	return t.RootPool[key], nil
}

// RenameRootPool renames an entry in the list RootPool within
// the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) RenameRootPool(oldK, newK uint8) error {
	if _, ok := t.RootPool[newK]; ok {
		return fmt.Errorf("key %v already exists in RootPool", newK)
	}

	e, ok := t.RootPool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RootPool", oldK)
	}
	e.Index = &newK

	t.RootPool[newK] = e
	delete(t.RootPool, oldK)
	return nil
}

// GetOrCreateRootPool retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) GetOrCreateRootPool(Index uint8) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool {
	key := Index

	if v, ok := t.RootPool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRootPool(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRootPool got unexpected error: %v", err))
	}
	return v
}

// GetRootPool retrieves the value with the specified key from
// the RootPool map field of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) GetRootPool(Index uint8) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.RootPool[key]; ok {
		return lm
	}
	return nil
}

// DeleteRootPool deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) DeleteRootPool(Index uint8) {
	key := Index

	delete(t.RootPool, key)
}

// AppendRootPool appends the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool struct to the
// list RootPool of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) AppendRootPool(
	v *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RootPool == nil {
		t.RootPool = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool)
	}

	if _, ok := t.RootPool[key]; ok {
		return fmt.Errorf("duplicate key for list RootPool %v", key)
	}

	t.RootPool[key] = v
	return nil
}

// GetDefaultSlopePolicy retrieves the value of the leaf DefaultSlopePolicy from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultSlopePolicy is set, it can
// safely use t.GetDefaultSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultSlopePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) GetDefaultSlopePolicy() string {
	if t == nil || t.DefaultSlopePolicy == nil {
		return "default"
	}
	return *t.DefaultSlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultSlopePolicy == nil {
		var v string = "default"
		t.DefaultSlopePolicy = &v
	}
	for _, e := range t.RootPool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy/root-tier/root-pool YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool struct {
	AllocationWeight *uint8                                                                          `path:"allocation-weight" module:"srl_nokia-qos"`
	Index            *uint8                                                                          `path:"index" module:"srl_nokia-qos"`
	MidPoolMembers   *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers `path:"mid-pool-members" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) IsYANGGoStruct() {}

// GetOrCreateMidPoolMembers retrieves the value of the MidPoolMembers field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) GetOrCreateMidPoolMembers() *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers {
	if t.MidPoolMembers != nil {
		return t.MidPoolMembers
	}
	t.MidPoolMembers = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers{}
	return t.MidPoolMembers
}

// GetMidPoolMembers returns the value of the MidPoolMembers struct pointer
// from SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool. If the receiver or the field MidPoolMembers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) GetMidPoolMembers() *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers {
	if t != nil && t.MidPoolMembers != nil {
		return t.MidPoolMembers
	}
	return nil
}

// GetAllocationWeight retrieves the value of the leaf AllocationWeight from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllocationWeight is set, it can
// safely use t.GetAllocationWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllocationWeight == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) GetAllocationWeight() uint8 {
	if t == nil || t.AllocationWeight == nil {
		return 0
	}
	return *t.AllocationWeight
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MidPoolMembers.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy/root-tier/root-pool/mid-pool-members YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers struct {
	MidPoolMember map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember `path:"mid-pool-member" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) IsYANGGoStruct() {
}

// NewMidPoolMember creates a new entry in the MidPoolMember list of the
// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) NewMidPoolMember(
	Index uint8,
) (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPoolMember == nil {
		t.MidPoolMember = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MidPoolMember[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MidPoolMember", key)
	}

	t.MidPoolMember[key] = &SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember{
		Index: &Index,
	}

	return t.MidPoolMember[key], nil
}

// RenameMidPoolMember renames an entry in the list MidPoolMember within
// the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) RenameMidPoolMember(oldK, newK uint8) error {
	if _, ok := t.MidPoolMember[newK]; ok {
		return fmt.Errorf("key %v already exists in MidPoolMember", newK)
	}

	e, ok := t.MidPoolMember[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MidPoolMember", oldK)
	}
	e.Index = &newK

	t.MidPoolMember[newK] = e
	delete(t.MidPoolMember, oldK)
	return nil
}

// GetOrCreateMidPoolMember retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) GetOrCreateMidPoolMember(
	Index uint8,
) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember {
	key := Index

	if v, ok := t.MidPoolMember[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMidPoolMember(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMidPoolMember got unexpected error: %v", err))
	}
	return v
}

// GetMidPoolMember retrieves the value with the specified key from
// the MidPoolMember map field of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) GetMidPoolMember(
	Index uint8,
) *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.MidPoolMember[key]; ok {
		return lm
	}
	return nil
}

// DeleteMidPoolMember deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) DeleteMidPoolMember(Index uint8) {
	key := Index

	delete(t.MidPoolMember, key)
}

// AppendMidPoolMember appends the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember struct to the
// list MidPoolMember of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) AppendMidPoolMember(
	v *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MidPoolMember == nil {
		t.MidPoolMember = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember)
	}

	if _, ok := t.MidPoolMember[key]; ok {
		return fmt.Errorf("duplicate key for list MidPoolMember %v", key)
	}

	t.MidPoolMember[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MidPoolMember {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember represents the /srl_nokia-qos/qos/buffer-management/fp-pool-policy/root-tier/root-pool/mid-pool-members/mid-pool-member YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember struct {
	Index *uint8 `path:"index" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember.
func (*SrlNokiaQos_Qos_BufferManagement_FpPoolPolicy_RootTier_RootPool_MidPoolMembers_MidPoolMember) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy represents the /srl_nokia-qos/qos/buffer-management/interface-pool-policy YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy struct {
	InterfacePool map[uint8]*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool `path:"interface-pool" module:"srl_nokia-qos"`
	Name          *string                                                                       `path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) IsYANGGoStruct() {}

// NewInterfacePool creates a new entry in the InterfacePool list of the
// SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) NewInterfacePool(Index uint8) (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfacePool == nil {
		t.InterfacePool = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterfacePool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterfacePool", key)
	}

	t.InterfacePool[key] = &SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool{
		Index: &Index,
	}

	return t.InterfacePool[key], nil
}

// RenameInterfacePool renames an entry in the list InterfacePool within
// the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) RenameInterfacePool(oldK, newK uint8) error {
	if _, ok := t.InterfacePool[newK]; ok {
		return fmt.Errorf("key %v already exists in InterfacePool", newK)
	}

	e, ok := t.InterfacePool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterfacePool", oldK)
	}
	e.Index = &newK

	t.InterfacePool[newK] = e
	delete(t.InterfacePool, oldK)
	return nil
}

// GetOrCreateInterfacePool retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) GetOrCreateInterfacePool(Index uint8) *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool {
	key := Index

	if v, ok := t.InterfacePool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterfacePool(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterfacePool got unexpected error: %v", err))
	}
	return v
}

// GetInterfacePool retrieves the value with the specified key from
// the InterfacePool map field of SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) GetInterfacePool(Index uint8) *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.InterfacePool[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterfacePool deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) DeleteInterfacePool(Index uint8) {
	key := Index

	delete(t.InterfacePool, key)
}

// AppendInterfacePool appends the supplied SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool struct to the
// list InterfacePool of SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) AppendInterfacePool(
	v *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterfacePool == nil {
		t.InterfacePool = make(map[uint8]*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool)
	}

	if _, ok := t.InterfacePool[key]; ok {
		return fmt.Errorf("duplicate key for list InterfacePool %v", key)
	}

	t.InterfacePool[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.InterfacePool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool represents the /srl_nokia-qos/qos/buffer-management/interface-pool-policy/interface-pool YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool struct {
	AllocationSize *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize `path:"allocation-size" module:"srl_nokia-qos"`
	Index          *uint8                                                                             `path:"index" module:"srl_nokia-qos"`
	SlopePolicy    *string                                                                            `path:"slope-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) IsYANGGoStruct() {}

// GetOrCreateAllocationSize retrieves the value of the AllocationSize field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) GetOrCreateAllocationSize() *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize {
	if t.AllocationSize != nil {
		return t.AllocationSize
	}
	t.AllocationSize = &SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize{}
	return t.AllocationSize
}

// GetAllocationSize returns the value of the AllocationSize struct pointer
// from SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool. If the receiver or the field AllocationSize is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) GetAllocationSize() *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize {
	if t != nil && t.AllocationSize != nil {
		return t.AllocationSize
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return "default"
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SlopePolicy == nil {
		var v string = "default"
		t.SlopePolicy = &v
	}
	t.AllocationSize.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize represents the /srl_nokia-qos/qos/buffer-management/interface-pool-policy/interface-pool/allocation-size YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize struct {
	BwProportional     *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional `path:"bw-proportional" module:"srl_nokia-qos"`
	ExplicitPercentage *uint8                                                                                            `path:"explicit-percentage" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) IsYANGGoStruct() {
}

// GetOrCreateBwProportional retrieves the value of the BwProportional field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) GetOrCreateBwProportional() *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional {
	if t.BwProportional != nil {
		return t.BwProportional
	}
	t.BwProportional = &SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional{}
	return t.BwProportional
}

// GetBwProportional returns the value of the BwProportional struct pointer
// from SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize. If the receiver or the field BwProportional is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) GetBwProportional() *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional {
	if t != nil && t.BwProportional != nil {
		return t.BwProportional
	}
	return nil
}

// GetExplicitPercentage retrieves the value of the leaf ExplicitPercentage from the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitPercentage is set, it can
// safely use t.GetExplicitPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitPercentage == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) GetExplicitPercentage() uint8 {
	if t == nil || t.ExplicitPercentage == nil {
		return 0
	}
	return *t.ExplicitPercentage
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExplicitPercentage == nil {
		var v uint8 = 0
		t.ExplicitPercentage = &v
	}
	t.BwProportional.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional represents the /srl_nokia-qos/qos/buffer-management/interface-pool-policy/interface-pool/allocation-size/bw-proportional YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional struct {
	OverSubscriptionFactor *float64 `path:"over-subscription-factor" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) IsYANGGoStruct() {
}

// GetOverSubscriptionFactor retrieves the value of the leaf OverSubscriptionFactor from the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverSubscriptionFactor is set, it can
// safely use t.GetOverSubscriptionFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverSubscriptionFactor == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) GetOverSubscriptionFactor() float64 {
	if t == nil || t.OverSubscriptionFactor == nil {
		return 1.25
	}
	return *t.OverSubscriptionFactor
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverSubscriptionFactor == nil {
		var v float64 = 1.25
		t.OverSubscriptionFactor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional.
func (*SrlNokiaQos_Qos_BufferManagement_InterfacePoolPolicy_InterfacePool_AllocationSize_BwProportional) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile represents the /srl_nokia-qos/qos/buffer-management/queue-management-profile YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile struct {
	Name         *string                                                       `path:"name" module:"srl_nokia-qos"`
	WeightFactor *uint32                                                       `path:"weight-factor" module:"srl_nokia-qos"`
	Wred         *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred `path:"wred" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) IsYANGGoStruct() {}

// GetOrCreateWred retrieves the value of the Wred field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) GetOrCreateWred() *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred {
	if t.Wred != nil {
		return t.Wred
	}
	t.Wred = &SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred{}
	return t.Wred
}

// GetWred returns the value of the Wred struct pointer
// from SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile. If the receiver or the field Wred is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) GetWred() *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred {
	if t != nil && t.Wred != nil {
		return t.Wred
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetWeightFactor retrieves the value of the leaf WeightFactor from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightFactor is set, it can
// safely use t.GetWeightFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightFactor == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) GetWeightFactor() uint32 {
	if t == nil || t.WeightFactor == nil {
		return 0
	}
	return *t.WeightFactor
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WeightFactor == nil {
		var v uint32 = 0
		t.WeightFactor = &v
	}
	t.Wred.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile.
func (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred represents the /srl_nokia-qos/qos/buffer-management/queue-management-profile/wred YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred struct {
	WredSlope map[SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key]*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope `path:"wred-slope" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) IsYANGGoStruct() {}

// SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key represents the key for list WredSlope of element /srl_nokia-qos/qos/buffer-management/queue-management-profile/wred.
type SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key struct {
	TrafficType     E_SrlNokiaQos_WredTrafficType     `path:"traffic-type"`
	DropProbability E_SrlNokiaQos_WredDropProbability `path:"drop-probability"`
	EnableEcn       bool                              `path:"enable-ecn"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key) IsYANGGoKeyStruct() {
}

// ΛListKeyMap returns the values of the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key key struct.
func (t SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"traffic-type":     t.TrafficType,
		"drop-probability": t.DropProbability,
		"enable-ecn":       t.EnableEcn,
	}, nil
}

// NewWredSlope creates a new entry in the WredSlope list of the
// SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) NewWredSlope(
	TrafficType E_SrlNokiaQos_WredTrafficType, DropProbability E_SrlNokiaQos_WredDropProbability,
	EnableEcn bool,
) (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WredSlope == nil {
		t.WredSlope = make(map[SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key]*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope)
	}

	key := SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key{
		TrafficType:     TrafficType,
		DropProbability: DropProbability,
		EnableEcn:       EnableEcn,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WredSlope[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WredSlope", key)
	}

	t.WredSlope[key] = &SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope{
		TrafficType:     TrafficType,
		DropProbability: DropProbability,
		EnableEcn:       &EnableEcn,
	}

	return t.WredSlope[key], nil
}

// RenameWredSlope renames an entry in the list WredSlope within
// the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) RenameWredSlope(
	oldK, newK SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key,
) error {
	if _, ok := t.WredSlope[newK]; ok {
		return fmt.Errorf("key %v already exists in WredSlope", newK)
	}

	e, ok := t.WredSlope[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WredSlope", oldK)
	}
	e.TrafficType = newK.TrafficType
	e.DropProbability = newK.DropProbability
	e.EnableEcn = &newK.EnableEcn

	t.WredSlope[newK] = e
	delete(t.WredSlope, oldK)
	return nil
}

// GetOrCreateWredSlope retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) GetOrCreateWredSlope(
	TrafficType E_SrlNokiaQos_WredTrafficType, DropProbability E_SrlNokiaQos_WredDropProbability,
	EnableEcn bool,
) *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope {
	key := SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key{
		TrafficType:     TrafficType,
		DropProbability: DropProbability,
		EnableEcn:       EnableEcn,
	}

	if v, ok := t.WredSlope[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWredSlope(TrafficType, DropProbability, EnableEcn)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWredSlope got unexpected error: %v", err))
	}
	return v
}

// GetWredSlope retrieves the value with the specified key from
// the WredSlope map field of SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) GetWredSlope(
	TrafficType E_SrlNokiaQos_WredTrafficType, DropProbability E_SrlNokiaQos_WredDropProbability,
	EnableEcn bool,
) *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope {
	if t == nil {
		return nil
	}

	key := SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key{
		TrafficType:     TrafficType,
		DropProbability: DropProbability,
		EnableEcn:       EnableEcn,
	}

	if lm, ok := t.WredSlope[key]; ok {
		return lm
	}
	return nil
}

// DeleteWredSlope deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) DeleteWredSlope(
	TrafficType E_SrlNokiaQos_WredTrafficType, DropProbability E_SrlNokiaQos_WredDropProbability, EnableEcn bool,
) {
	key := SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key{
		TrafficType:     TrafficType,
		DropProbability: DropProbability,
		EnableEcn:       EnableEcn,
	}

	delete(t.WredSlope, key)
}

// AppendWredSlope appends the supplied SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope struct to the
// list WredSlope of SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) AppendWredSlope(
	v *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope,
) error {
	if v.EnableEcn == nil {
		return fmt.Errorf("invalid nil key for EnableEcn")
	}

	key := SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key{
		TrafficType:     v.TrafficType,
		DropProbability: v.DropProbability,
		EnableEcn:       *v.EnableEcn,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WredSlope == nil {
		t.WredSlope = make(map[SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope_Key]*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope)
	}

	if _, ok := t.WredSlope[key]; ok {
		return fmt.Errorf("duplicate key for list WredSlope %v", key)
	}

	t.WredSlope[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.WredSlope {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred.
func (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope represents the /srl_nokia-qos/qos/buffer-management/queue-management-profile/wred/wred-slope YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope struct {
	DropProbability           E_SrlNokiaQos_WredDropProbability `path:"drop-probability" module:"srl_nokia-qos"`
	EnableEcn                 *bool                             `path:"enable-ecn" module:"srl_nokia-qos"`
	MaxDropProbabilityPercent *uint8                            `path:"max-drop-probability-percent" module:"srl_nokia-qos"`
	MaxThreshold              *uint64                           `path:"max-threshold" module:"srl_nokia-qos"`
	MaxThresholdPercent       *uint8                            `path:"max-threshold-percent" module:"srl_nokia-qos"`
	MinThreshold              *uint64                           `path:"min-threshold" module:"srl_nokia-qos"`
	MinThresholdPercent       *uint8                            `path:"min-threshold-percent" module:"srl_nokia-qos"`
	SlopeEnabled              *bool                             `path:"slope-enabled" module:"srl_nokia-qos"`
	TrafficType               E_SrlNokiaQos_WredTrafficType     `path:"traffic-type" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) IsYANGGoStruct() {}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetDropProbability() E_SrlNokiaQos_WredDropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxDropProbabilityPercent retrieves the value of the leaf MaxDropProbabilityPercent from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDropProbabilityPercent is set, it can
// safely use t.GetMaxDropProbabilityPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDropProbabilityPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetMaxDropProbabilityPercent() uint8 {
	if t == nil || t.MaxDropProbabilityPercent == nil {
		return 0
	}
	return *t.MaxDropProbabilityPercent
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMaxThresholdPercent retrieves the value of the leaf MaxThresholdPercent from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThresholdPercent is set, it can
// safely use t.GetMaxThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThresholdPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetMaxThresholdPercent() uint8 {
	if t == nil || t.MaxThresholdPercent == nil {
		return 0
	}
	return *t.MaxThresholdPercent
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// GetMinThresholdPercent retrieves the value of the leaf MinThresholdPercent from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdPercent is set, it can
// safely use t.GetMinThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetMinThresholdPercent() uint8 {
	if t == nil || t.MinThresholdPercent == nil {
		return 0
	}
	return *t.MinThresholdPercent
}

// GetSlopeEnabled retrieves the value of the leaf SlopeEnabled from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopeEnabled is set, it can
// safely use t.GetSlopeEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopeEnabled == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetSlopeEnabled() bool {
	if t == nil || t.SlopeEnabled == nil {
		return false
	}
	return *t.SlopeEnabled
}

// GetTrafficType retrieves the value of the leaf TrafficType from the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficType is set, it can
// safely use t.GetTrafficType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficType == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) GetTrafficType() E_SrlNokiaQos_WredTrafficType {
	if t == nil || t.TrafficType == 0 {
		return 0
	}
	return t.TrafficType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EnableEcn == nil {
		return nil, fmt.Errorf("nil value for key EnableEcn")
	}

	return map[string]interface{}{
		"drop-probability": t.DropProbability,
		"enable-ecn":       *t.EnableEcn,
		"traffic-type":     t.TrafficType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope.
func (*SrlNokiaQos_Qos_BufferManagement_QueueManagementProfile_Wred_WredSlope) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_SlopePolicy represents the /srl_nokia-qos/qos/buffer-management/slope-policy YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_SlopePolicy struct {
	Name      *string                                                                               `path:"name" module:"srl_nokia-qos"`
	WredSlope map[E_SrlNokiaQos_WredProfile]*SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope `path:"wred-slope" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_SlopePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_SlopePolicy) IsYANGGoStruct() {}

// NewWredSlope creates a new entry in the WredSlope list of the
// SrlNokiaQos_Qos_BufferManagement_SlopePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) NewWredSlope(
	WredProfile E_SrlNokiaQos_WredProfile,
) (*SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WredSlope == nil {
		t.WredSlope = make(map[E_SrlNokiaQos_WredProfile]*SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope)
	}

	key := WredProfile

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WredSlope[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WredSlope", key)
	}

	t.WredSlope[key] = &SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope{
		WredProfile: WredProfile,
	}

	return t.WredSlope[key], nil
}

// RenameWredSlope renames an entry in the list WredSlope within
// the SrlNokiaQos_Qos_BufferManagement_SlopePolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) RenameWredSlope(oldK, newK E_SrlNokiaQos_WredProfile) error {
	if _, ok := t.WredSlope[newK]; ok {
		return fmt.Errorf("key %v already exists in WredSlope", newK)
	}

	e, ok := t.WredSlope[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WredSlope", oldK)
	}
	e.WredProfile = newK

	t.WredSlope[newK] = e
	delete(t.WredSlope, oldK)
	return nil
}

// GetOrCreateWredSlope retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_SlopePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) GetOrCreateWredSlope(
	WredProfile E_SrlNokiaQos_WredProfile,
) *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope {
	key := WredProfile

	if v, ok := t.WredSlope[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWredSlope(WredProfile)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWredSlope got unexpected error: %v", err))
	}
	return v
}

// GetWredSlope retrieves the value with the specified key from
// the WredSlope map field of SrlNokiaQos_Qos_BufferManagement_SlopePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) GetWredSlope(
	WredProfile E_SrlNokiaQos_WredProfile,
) *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope {
	if t == nil {
		return nil
	}

	key := WredProfile

	if lm, ok := t.WredSlope[key]; ok {
		return lm
	}
	return nil
}

// DeleteWredSlope deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_BufferManagement_SlopePolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) DeleteWredSlope(WredProfile E_SrlNokiaQos_WredProfile) {
	key := WredProfile

	delete(t.WredSlope, key)
}

// AppendWredSlope appends the supplied SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope struct to the
// list WredSlope of SrlNokiaQos_Qos_BufferManagement_SlopePolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) AppendWredSlope(
	v *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope,
) error {
	key := v.WredProfile

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WredSlope == nil {
		t.WredSlope = make(map[E_SrlNokiaQos_WredProfile]*SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope)
	}

	if _, ok := t.WredSlope[key]; ok {
		return fmt.Errorf("duplicate key for list WredSlope %v", key)
	}

	t.WredSlope[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_BufferManagement_SlopePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_SlopePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.WredSlope {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_SlopePolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_SlopePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_SlopePolicy.
func (*SrlNokiaQos_Qos_BufferManagement_SlopePolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope represents the /srl_nokia-qos/qos/buffer-management/slope-policy/wred-slope YANG schema element.
type SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope struct {
	MaxProbability      *uint8                    `path:"max-probability" module:"srl_nokia-qos"`
	MaxThresholdPercent *uint8                    `path:"max-threshold-percent" module:"srl_nokia-qos"`
	MinThresholdPercent *uint8                    `path:"min-threshold-percent" module:"srl_nokia-qos"`
	SlopeEnabled        *bool                     `path:"slope-enabled" module:"srl_nokia-qos"`
	WredProfile         E_SrlNokiaQos_WredProfile `path:"wred-profile" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) IsYANGGoStruct() {}

// GetMaxProbability retrieves the value of the leaf MaxProbability from the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxProbability is set, it can
// safely use t.GetMaxProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) GetMaxProbability() uint8 {
	if t == nil || t.MaxProbability == nil {
		return 80
	}
	return *t.MaxProbability
}

// GetMaxThresholdPercent retrieves the value of the leaf MaxThresholdPercent from the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThresholdPercent is set, it can
// safely use t.GetMaxThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThresholdPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) GetMaxThresholdPercent() uint8 {
	if t == nil || t.MaxThresholdPercent == nil {
		return 100
	}
	return *t.MaxThresholdPercent
}

// GetMinThresholdPercent retrieves the value of the leaf MinThresholdPercent from the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThresholdPercent is set, it can
// safely use t.GetMinThresholdPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThresholdPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) GetMinThresholdPercent() uint8 {
	if t == nil || t.MinThresholdPercent == nil {
		return 85
	}
	return *t.MinThresholdPercent
}

// GetSlopeEnabled retrieves the value of the leaf SlopeEnabled from the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopeEnabled is set, it can
// safely use t.GetSlopeEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopeEnabled == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) GetSlopeEnabled() bool {
	if t == nil || t.SlopeEnabled == nil {
		return false
	}
	return *t.SlopeEnabled
}

// GetWredProfile retrieves the value of the leaf WredProfile from the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WredProfile is set, it can
// safely use t.GetWredProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WredProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) GetWredProfile() E_SrlNokiaQos_WredProfile {
	if t == nil || t.WredProfile == 0 {
		return 0
	}
	return t.WredProfile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxProbability == nil {
		var v uint8 = 80
		t.MaxProbability = &v
	}
	if t.MaxThresholdPercent == nil {
		var v uint8 = 100
		t.MaxThresholdPercent = &v
	}
	if t.MinThresholdPercent == nil {
		var v uint8 = 85
		t.MinThresholdPercent = &v
	}
	if t.SlopeEnabled == nil {
		var v bool = false
		t.SlopeEnabled = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"wred-profile": t.WredProfile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope.
func (*SrlNokiaQos_Qos_BufferManagement_SlopePolicy_WredSlope) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers represents the /srl_nokia-qos/qos/classifiers YANG schema element.
type SrlNokiaQos_Qos_Classifiers struct {
	Dot1PPolicy            map[string]*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy            `path:"dot1p-policy" module:"srl_nokia-qos"`
	DscpPolicy             map[string]*SrlNokiaQos_Qos_Classifiers_DscpPolicy             `path:"dscp-policy" module:"srl_nokia-qos"`
	DscpReclassifyPolicy   map[string]*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy   `path:"dscp-reclassify-policy" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy map[string]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy `path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
	Multifield             *SrlNokiaQos_Qos_Classifiers_Multifield                        `path:"multifield" module:"srl_nokia-acl-qos"`
	MultifieldClassifier   map[string]*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier   `path:"multifield-classifier" module:"srl_nokia-acl-qos"`
	VxlanDefault           *string                                                        `path:"vxlan-default" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers) IsYANGGoStruct() {}

// NewDot1PPolicy creates a new entry in the Dot1PPolicy list of the
// SrlNokiaQos_Qos_Classifiers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers) NewDot1PPolicy(Name string) (*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1PPolicy == nil {
		t.Dot1PPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1PPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1PPolicy", key)
	}

	t.Dot1PPolicy[key] = &SrlNokiaQos_Qos_Classifiers_Dot1PPolicy{
		Name: &Name,
	}

	return t.Dot1PPolicy[key], nil
}

// RenameDot1PPolicy renames an entry in the list Dot1PPolicy within
// the SrlNokiaQos_Qos_Classifiers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers) RenameDot1PPolicy(oldK, newK string) error {
	if _, ok := t.Dot1PPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1PPolicy", newK)
	}

	e, ok := t.Dot1PPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1PPolicy", oldK)
	}
	e.Name = &newK

	t.Dot1PPolicy[newK] = e
	delete(t.Dot1PPolicy, oldK)
	return nil
}

// GetOrCreateDot1PPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers) GetOrCreateDot1PPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy {
	key := Name

	if v, ok := t.Dot1PPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1PPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1PPolicy got unexpected error: %v", err))
	}
	return v
}

// GetDot1PPolicy retrieves the value with the specified key from
// the Dot1PPolicy map field of SrlNokiaQos_Qos_Classifiers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers) GetDot1PPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dot1PPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1PPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers) DeleteDot1PPolicy(Name string) {
	key := Name

	delete(t.Dot1PPolicy, key)
}

// AppendDot1PPolicy appends the supplied SrlNokiaQos_Qos_Classifiers_Dot1PPolicy struct to the
// list Dot1PPolicy of SrlNokiaQos_Qos_Classifiers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_Dot1PPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers) AppendDot1PPolicy(v *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1PPolicy == nil {
		t.Dot1PPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy)
	}

	if _, ok := t.Dot1PPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1PPolicy %v", key)
	}

	t.Dot1PPolicy[key] = v
	return nil
}

// NewDscpPolicy creates a new entry in the DscpPolicy list of the
// SrlNokiaQos_Qos_Classifiers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers) NewDscpPolicy(Name string) (*SrlNokiaQos_Qos_Classifiers_DscpPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpPolicy == nil {
		t.DscpPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_DscpPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpPolicy", key)
	}

	t.DscpPolicy[key] = &SrlNokiaQos_Qos_Classifiers_DscpPolicy{
		Name: &Name,
	}

	return t.DscpPolicy[key], nil
}

// RenameDscpPolicy renames an entry in the list DscpPolicy within
// the SrlNokiaQos_Qos_Classifiers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers) RenameDscpPolicy(oldK, newK string) error {
	if _, ok := t.DscpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpPolicy", newK)
	}

	e, ok := t.DscpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpPolicy", oldK)
	}
	e.Name = &newK

	t.DscpPolicy[newK] = e
	delete(t.DscpPolicy, oldK)
	return nil
}

// GetOrCreateDscpPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers) GetOrCreateDscpPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_DscpPolicy {
	key := Name

	if v, ok := t.DscpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetDscpPolicy retrieves the value with the specified key from
// the DscpPolicy map field of SrlNokiaQos_Qos_Classifiers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers) GetDscpPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_DscpPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DscpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers) DeleteDscpPolicy(Name string) {
	key := Name

	delete(t.DscpPolicy, key)
}

// AppendDscpPolicy appends the supplied SrlNokiaQos_Qos_Classifiers_DscpPolicy struct to the
// list DscpPolicy of SrlNokiaQos_Qos_Classifiers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_DscpPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers) AppendDscpPolicy(v *SrlNokiaQos_Qos_Classifiers_DscpPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpPolicy == nil {
		t.DscpPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_DscpPolicy)
	}

	if _, ok := t.DscpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list DscpPolicy %v", key)
	}

	t.DscpPolicy[key] = v
	return nil
}

// NewDscpReclassifyPolicy creates a new entry in the DscpReclassifyPolicy list of the
// SrlNokiaQos_Qos_Classifiers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers) NewDscpReclassifyPolicy(Name string) (*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpReclassifyPolicy == nil {
		t.DscpReclassifyPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpReclassifyPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpReclassifyPolicy", key)
	}

	t.DscpReclassifyPolicy[key] = &SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy{
		Name: &Name,
	}

	return t.DscpReclassifyPolicy[key], nil
}

// RenameDscpReclassifyPolicy renames an entry in the list DscpReclassifyPolicy within
// the SrlNokiaQos_Qos_Classifiers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers) RenameDscpReclassifyPolicy(oldK, newK string) error {
	if _, ok := t.DscpReclassifyPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpReclassifyPolicy", newK)
	}

	e, ok := t.DscpReclassifyPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpReclassifyPolicy", oldK)
	}
	e.Name = &newK

	t.DscpReclassifyPolicy[newK] = e
	delete(t.DscpReclassifyPolicy, oldK)
	return nil
}

// GetOrCreateDscpReclassifyPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers) GetOrCreateDscpReclassifyPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy {
	key := Name

	if v, ok := t.DscpReclassifyPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpReclassifyPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpReclassifyPolicy got unexpected error: %v", err))
	}
	return v
}

// GetDscpReclassifyPolicy retrieves the value with the specified key from
// the DscpReclassifyPolicy map field of SrlNokiaQos_Qos_Classifiers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers) GetDscpReclassifyPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DscpReclassifyPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpReclassifyPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers) DeleteDscpReclassifyPolicy(Name string) {
	key := Name

	delete(t.DscpReclassifyPolicy, key)
}

// AppendDscpReclassifyPolicy appends the supplied SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy struct to the
// list DscpReclassifyPolicy of SrlNokiaQos_Qos_Classifiers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers) AppendDscpReclassifyPolicy(
	v *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpReclassifyPolicy == nil {
		t.DscpReclassifyPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy)
	}

	if _, ok := t.DscpReclassifyPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list DscpReclassifyPolicy %v", key)
	}

	t.DscpReclassifyPolicy[key] = v
	return nil
}

// NewMplsTrafficClassPolicy creates a new entry in the MplsTrafficClassPolicy list of the
// SrlNokiaQos_Qos_Classifiers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers) NewMplsTrafficClassPolicy(Name string) (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MplsTrafficClassPolicy == nil {
		t.MplsTrafficClassPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MplsTrafficClassPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MplsTrafficClassPolicy", key)
	}

	t.MplsTrafficClassPolicy[key] = &SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy{
		Name: &Name,
	}

	return t.MplsTrafficClassPolicy[key], nil
}

// RenameMplsTrafficClassPolicy renames an entry in the list MplsTrafficClassPolicy within
// the SrlNokiaQos_Qos_Classifiers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers) RenameMplsTrafficClassPolicy(oldK, newK string) error {
	if _, ok := t.MplsTrafficClassPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in MplsTrafficClassPolicy", newK)
	}

	e, ok := t.MplsTrafficClassPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MplsTrafficClassPolicy", oldK)
	}
	e.Name = &newK

	t.MplsTrafficClassPolicy[newK] = e
	delete(t.MplsTrafficClassPolicy, oldK)
	return nil
}

// GetOrCreateMplsTrafficClassPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers) GetOrCreateMplsTrafficClassPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy {
	key := Name

	if v, ok := t.MplsTrafficClassPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMplsTrafficClassPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMplsTrafficClassPolicy got unexpected error: %v", err))
	}
	return v
}

// GetMplsTrafficClassPolicy retrieves the value with the specified key from
// the MplsTrafficClassPolicy map field of SrlNokiaQos_Qos_Classifiers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers) GetMplsTrafficClassPolicy(Name string) *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MplsTrafficClassPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteMplsTrafficClassPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers) DeleteMplsTrafficClassPolicy(Name string) {
	key := Name

	delete(t.MplsTrafficClassPolicy, key)
}

// AppendMplsTrafficClassPolicy appends the supplied SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy struct to the
// list MplsTrafficClassPolicy of SrlNokiaQos_Qos_Classifiers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers) AppendMplsTrafficClassPolicy(
	v *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MplsTrafficClassPolicy == nil {
		t.MplsTrafficClassPolicy = make(map[string]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy)
	}

	if _, ok := t.MplsTrafficClassPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list MplsTrafficClassPolicy %v", key)
	}

	t.MplsTrafficClassPolicy[key] = v
	return nil
}

// NewMultifieldClassifier creates a new entry in the MultifieldClassifier list of the
// SrlNokiaQos_Qos_Classifiers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers) NewMultifieldClassifier(Name string) (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultifieldClassifier == nil {
		t.MultifieldClassifier = make(map[string]*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultifieldClassifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultifieldClassifier", key)
	}

	t.MultifieldClassifier[key] = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier{
		Name: &Name,
	}

	return t.MultifieldClassifier[key], nil
}

// RenameMultifieldClassifier renames an entry in the list MultifieldClassifier within
// the SrlNokiaQos_Qos_Classifiers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers) RenameMultifieldClassifier(oldK, newK string) error {
	if _, ok := t.MultifieldClassifier[newK]; ok {
		return fmt.Errorf("key %v already exists in MultifieldClassifier", newK)
	}

	e, ok := t.MultifieldClassifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultifieldClassifier", oldK)
	}
	e.Name = &newK

	t.MultifieldClassifier[newK] = e
	delete(t.MultifieldClassifier, oldK)
	return nil
}

// GetOrCreateMultifieldClassifier retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers) GetOrCreateMultifieldClassifier(Name string) *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier {
	key := Name

	if v, ok := t.MultifieldClassifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultifieldClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultifieldClassifier got unexpected error: %v", err))
	}
	return v
}

// GetMultifieldClassifier retrieves the value with the specified key from
// the MultifieldClassifier map field of SrlNokiaQos_Qos_Classifiers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers) GetMultifieldClassifier(Name string) *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MultifieldClassifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultifieldClassifier deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers) DeleteMultifieldClassifier(Name string) {
	key := Name

	delete(t.MultifieldClassifier, key)
}

// AppendMultifieldClassifier appends the supplied SrlNokiaQos_Qos_Classifiers_MultifieldClassifier struct to the
// list MultifieldClassifier of SrlNokiaQos_Qos_Classifiers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_MultifieldClassifier already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers) AppendMultifieldClassifier(
	v *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultifieldClassifier == nil {
		t.MultifieldClassifier = make(map[string]*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier)
	}

	if _, ok := t.MultifieldClassifier[key]; ok {
		return fmt.Errorf("duplicate key for list MultifieldClassifier %v", key)
	}

	t.MultifieldClassifier[key] = v
	return nil
}

// GetOrCreateMultifield retrieves the value of the Multifield field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers) GetOrCreateMultifield() *SrlNokiaQos_Qos_Classifiers_Multifield {
	if t.Multifield != nil {
		return t.Multifield
	}
	t.Multifield = &SrlNokiaQos_Qos_Classifiers_Multifield{}
	return t.Multifield
}

// GetMultifield returns the value of the Multifield struct pointer
// from SrlNokiaQos_Qos_Classifiers. If the receiver or the field Multifield is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers) GetMultifield() *SrlNokiaQos_Qos_Classifiers_Multifield {
	if t != nil && t.Multifield != nil {
		return t.Multifield
	}
	return nil
}

// GetVxlanDefault retrieves the value of the leaf VxlanDefault from the SrlNokiaQos_Qos_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanDefault is set, it can
// safely use t.GetVxlanDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanDefault == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers) GetVxlanDefault() string {
	if t == nil || t.VxlanDefault == nil {
		return ""
	}
	return *t.VxlanDefault
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Multifield.PopulateDefaults()
	for _, e := range t.Dot1PPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpReclassifyPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.MplsTrafficClassPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.MultifieldClassifier {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers.
func (*SrlNokiaQos_Qos_Classifiers) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_Dot1PPolicy represents the /srl_nokia-qos/qos/classifiers/dot1p-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Dot1PPolicy struct {
	Dot1P map[uint8]*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P `path:"dot1p" module:"srl_nokia-qos"`
	Name  *string                                                  `path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Dot1PPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) IsYANGGoStruct() {}

// NewDot1P creates a new entry in the Dot1P list of the
// SrlNokiaQos_Qos_Classifiers_Dot1PPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) NewDot1P(Value uint8) (*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dot1P[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dot1P", key)
	}

	t.Dot1P[key] = &SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P{
		Value: &Value,
	}

	return t.Dot1P[key], nil
}

// RenameDot1P renames an entry in the list Dot1P within
// the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) RenameDot1P(oldK, newK uint8) error {
	if _, ok := t.Dot1P[newK]; ok {
		return fmt.Errorf("key %v already exists in Dot1P", newK)
	}

	e, ok := t.Dot1P[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dot1P", oldK)
	}
	e.Value = &newK

	t.Dot1P[newK] = e
	delete(t.Dot1P, oldK)
	return nil
}

// GetOrCreateDot1P retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Dot1PPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) GetOrCreateDot1P(Value uint8) *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P {
	key := Value

	if v, ok := t.Dot1P[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDot1P(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDot1P got unexpected error: %v", err))
	}
	return v
}

// GetDot1P retrieves the value with the specified key from
// the Dot1P map field of SrlNokiaQos_Qos_Classifiers_Dot1PPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) GetDot1P(Value uint8) *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P {
	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Dot1P[key]; ok {
		return lm
	}
	return nil
}

// DeleteDot1P deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Dot1PPolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) DeleteDot1P(Value uint8) {
	key := Value

	delete(t.Dot1P, key)
}

// AppendDot1P appends the supplied SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P struct to the
// list Dot1P of SrlNokiaQos_Qos_Classifiers_Dot1PPolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) AppendDot1P(v *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dot1P == nil {
		t.Dot1P = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P)
	}

	if _, ok := t.Dot1P[key]; ok {
		return fmt.Errorf("duplicate key for list Dot1P %v", key)
	}

	t.Dot1P[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dot1P {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Dot1PPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Dot1PPolicy.
func (*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P represents the /srl_nokia-qos/qos/classifiers/dot1p-policy/dot1p YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P struct {
	DeOutProfile    *bool                                                               `path:"de-out-profile" module:"srl_nokia-qos"`
	DropProbability E_SrlNokiaCommon_DropProbability                                    `path:"drop-probability" module:"srl_nokia-qos"`
	ForwardingClass SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-qos"`
	IpRewritePolicy *string                                                             `path:"ip-rewrite-policy" module:"srl_nokia-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                    `path:"profile" module:"srl_nokia-qos"`
	Value           *uint8                                                              `path:"value" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) IsYANGGoStruct() {}

// GetDeOutProfile retrieves the value of the leaf DeOutProfile from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeOutProfile is set, it can
// safely use t.GetDeOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeOutProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) GetDeOutProfile() bool {
	if t == nil || t.DeOutProfile == nil {
		return true
	}
	return *t.DeOutProfile
}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) GetDropProbability() E_SrlNokiaCommon_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetIpRewritePolicy retrieves the value of the leaf IpRewritePolicy from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpRewritePolicy is set, it can
// safely use t.GetIpRewritePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpRewritePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) GetIpRewritePolicy() string {
	if t == nil || t.IpRewritePolicy == nil {
		return ""
	}
	return *t.IpRewritePolicy
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) GetValue() uint8 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DeOutProfile == nil {
		var v bool = true
		t.DeOutProfile = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P.
func (*SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_DscpPolicy represents the /srl_nokia-qos/qos/classifiers/dscp-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_DscpPolicy struct {
	Dscp map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp `path:"dscp" module:"srl_nokia-qos"`
	Name *string                                                `path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_DscpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_DscpPolicy) IsYANGGoStruct() {}

// NewDscp creates a new entry in the Dscp list of the
// SrlNokiaQos_Qos_Classifiers_DscpPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) NewDscp(Value uint8) (*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp{
		Value: &Value,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the SrlNokiaQos_Qos_Classifiers_DscpPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) RenameDscp(oldK, newK uint8) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.Value = &newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_DscpPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) GetOrCreateDscp(Value uint8) *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp {
	key := Value

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of SrlNokiaQos_Qos_Classifiers_DscpPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) GetDscp(Value uint8) *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp {
	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_DscpPolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) DeleteDscp(Value uint8) {
	key := Value

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp struct to the
// list Dscp of SrlNokiaQos_Qos_Classifiers_DscpPolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) AppendDscp(v *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_DscpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_DscpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_DscpPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_DscpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_DscpPolicy.
func (*SrlNokiaQos_Qos_Classifiers_DscpPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp represents the /srl_nokia-qos/qos/classifiers/dscp-policy/dscp YANG schema element.
type SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp struct {
	DeOutProfile    *bool                                                             `path:"de-out-profile" module:"srl_nokia-qos"`
	DropProbability E_SrlNokiaCommon_DropProbability                                  `path:"drop-probability" module:"srl_nokia-qos"`
	ForwardingClass SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-qos"`
	IpRewritePolicy *string                                                           `path:"ip-rewrite-policy" module:"srl_nokia-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                  `path:"profile" module:"srl_nokia-qos"`
	Value           *uint8                                                            `path:"value" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) IsYANGGoStruct() {}

// GetDeOutProfile retrieves the value of the leaf DeOutProfile from the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeOutProfile is set, it can
// safely use t.GetDeOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeOutProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) GetDeOutProfile() bool {
	if t == nil || t.DeOutProfile == nil {
		return true
	}
	return *t.DeOutProfile
}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) GetDropProbability() E_SrlNokiaCommon_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetIpRewritePolicy retrieves the value of the leaf IpRewritePolicy from the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpRewritePolicy is set, it can
// safely use t.GetIpRewritePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpRewritePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) GetIpRewritePolicy() string {
	if t == nil || t.IpRewritePolicy == nil {
		return ""
	}
	return *t.IpRewritePolicy
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) GetValue() uint8 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DeOutProfile == nil {
		var v bool = true
		t.DeOutProfile = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp.
func (*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy represents the /srl_nokia-qos/qos/classifiers/dscp-reclassify-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy struct {
	Dscp map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp `path:"dscp" module:"srl_nokia-qos"`
	Name *string                                                          `path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) IsYANGGoStruct() {}

// NewDscp creates a new entry in the Dscp list of the
// SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) NewDscp(Value uint8) (*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dscp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dscp", key)
	}

	t.Dscp[key] = &SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp{
		Value: &Value,
	}

	return t.Dscp[key], nil
}

// RenameDscp renames an entry in the list Dscp within
// the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) RenameDscp(oldK, newK uint8) error {
	if _, ok := t.Dscp[newK]; ok {
		return fmt.Errorf("key %v already exists in Dscp", newK)
	}

	e, ok := t.Dscp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dscp", oldK)
	}
	e.Value = &newK

	t.Dscp[newK] = e
	delete(t.Dscp, oldK)
	return nil
}

// GetOrCreateDscp retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) GetOrCreateDscp(Value uint8) *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp {
	key := Value

	if v, ok := t.Dscp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscp(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscp got unexpected error: %v", err))
	}
	return v
}

// GetDscp retrieves the value with the specified key from
// the Dscp map field of SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) GetDscp(Value uint8) *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp {
	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Dscp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscp deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) DeleteDscp(Value uint8) {
	key := Value

	delete(t.Dscp, key)
}

// AppendDscp appends the supplied SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp struct to the
// list Dscp of SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) AppendDscp(
	v *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp,
) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dscp == nil {
		t.Dscp = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp)
	}

	if _, ok := t.Dscp[key]; ok {
		return fmt.Errorf("duplicate key for list Dscp %v", key)
	}

	t.Dscp[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dscp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy.
func (*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp represents the /srl_nokia-qos/qos/classifiers/dscp-reclassify-policy/dscp YANG schema element.
type SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp struct {
	ForwardingClass SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                            `path:"profile" module:"srl_nokia-qos"`
	Value           *uint8                                                                      `path:"value" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) GetValue() uint8 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp.
func (*SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy represents the /srl_nokia-qos/qos/classifiers/mpls-traffic-class-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy struct {
	Name         *string                                                                    `path:"name" module:"srl_nokia-qos"`
	TrafficClass map[uint8]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass `path:"traffic-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) IsYANGGoStruct() {}

// NewTrafficClass creates a new entry in the TrafficClass list of the
// SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) NewTrafficClass(Value uint8) (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrafficClass == nil {
		t.TrafficClass = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrafficClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrafficClass", key)
	}

	t.TrafficClass[key] = &SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass{
		Value: &Value,
	}

	return t.TrafficClass[key], nil
}

// RenameTrafficClass renames an entry in the list TrafficClass within
// the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) RenameTrafficClass(oldK, newK uint8) error {
	if _, ok := t.TrafficClass[newK]; ok {
		return fmt.Errorf("key %v already exists in TrafficClass", newK)
	}

	e, ok := t.TrafficClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrafficClass", oldK)
	}
	e.Value = &newK

	t.TrafficClass[newK] = e
	delete(t.TrafficClass, oldK)
	return nil
}

// GetOrCreateTrafficClass retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) GetOrCreateTrafficClass(Value uint8) *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass {
	key := Value

	if v, ok := t.TrafficClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrafficClass(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrafficClass got unexpected error: %v", err))
	}
	return v
}

// GetTrafficClass retrieves the value with the specified key from
// the TrafficClass map field of SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) GetTrafficClass(Value uint8) *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass {
	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.TrafficClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrafficClass deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) DeleteTrafficClass(Value uint8) {
	key := Value

	delete(t.TrafficClass, key)
}

// AppendTrafficClass appends the supplied SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass struct to the
// list TrafficClass of SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) AppendTrafficClass(
	v *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass,
) error {
	if v.Value == nil {
		return fmt.Errorf("invalid nil key received for Value")
	}

	key := *v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrafficClass == nil {
		t.TrafficClass = make(map[uint8]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass)
	}

	if _, ok := t.TrafficClass[key]; ok {
		return fmt.Errorf("duplicate key for list TrafficClass %v", key)
	}

	t.TrafficClass[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TrafficClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy.
func (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass represents the /srl_nokia-qos/qos/classifiers/mpls-traffic-class-policy/traffic-class YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass struct {
	DeOutProfile    *bool                                                                                 `path:"de-out-profile" module:"srl_nokia-qos"`
	DropProbability E_SrlNokiaCommon_DropProbability                                                      `path:"drop-probability" module:"srl_nokia-qos"`
	ForwardingClass SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-qos"`
	IpRewritePolicy *string                                                                               `path:"ip-rewrite-policy" module:"srl_nokia-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                                      `path:"profile" module:"srl_nokia-qos"`
	Value           *uint8                                                                                `path:"value" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) IsYANGGoStruct() {}

// GetDeOutProfile retrieves the value of the leaf DeOutProfile from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeOutProfile is set, it can
// safely use t.GetDeOutProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeOutProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) GetDeOutProfile() bool {
	if t == nil || t.DeOutProfile == nil {
		return true
	}
	return *t.DeOutProfile
}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) GetDropProbability() E_SrlNokiaCommon_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetIpRewritePolicy retrieves the value of the leaf IpRewritePolicy from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpRewritePolicy is set, it can
// safely use t.GetIpRewritePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpRewritePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) GetIpRewritePolicy() string {
	if t == nil || t.IpRewritePolicy == nil {
		return ""
	}
	return *t.IpRewritePolicy
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) GetValue() uint8 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DeOutProfile == nil {
		var v bool = true
		t.DeOutProfile = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Value == nil {
		return nil, fmt.Errorf("nil value for key Value")
	}

	return map[string]interface{}{
		"value": *t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass.
func (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield represents the /srl_nokia-qos/qos/classifiers/multifield YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield struct {
	Ipv4Policy map[string]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy `path:"ipv4-policy" module:"srl_nokia-acl-qos"`
	Ipv6Policy map[string]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy `path:"ipv6-policy" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield) IsYANGGoStruct() {}

// NewIpv4Policy creates a new entry in the Ipv4Policy list of the
// SrlNokiaQos_Qos_Classifiers_Multifield struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) NewIpv4Policy(Name string) (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Policy == nil {
		t.Ipv4Policy = make(map[string]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Policy", key)
	}

	t.Ipv4Policy[key] = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy{
		Name: &Name,
	}

	return t.Ipv4Policy[key], nil
}

// RenameIpv4Policy renames an entry in the list Ipv4Policy within
// the SrlNokiaQos_Qos_Classifiers_Multifield struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) RenameIpv4Policy(oldK, newK string) error {
	if _, ok := t.Ipv4Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4Policy", newK)
	}

	e, ok := t.Ipv4Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4Policy", oldK)
	}
	e.Name = &newK

	t.Ipv4Policy[newK] = e
	delete(t.Ipv4Policy, oldK)
	return nil
}

// GetOrCreateIpv4Policy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) GetOrCreateIpv4Policy(Name string) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy {
	key := Name

	if v, ok := t.Ipv4Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Policy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Policy got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Policy retrieves the value with the specified key from
// the Ipv4Policy map field of SrlNokiaQos_Qos_Classifiers_Multifield. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) GetIpv4Policy(Name string) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv4Policy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Policy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) DeleteIpv4Policy(Name string) {
	key := Name

	delete(t.Ipv4Policy, key)
}

// AppendIpv4Policy appends the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy struct to the
// list Ipv4Policy of SrlNokiaQos_Qos_Classifiers_Multifield. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) AppendIpv4Policy(
	v *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Policy == nil {
		t.Ipv4Policy = make(map[string]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy)
	}

	if _, ok := t.Ipv4Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4Policy %v", key)
	}

	t.Ipv4Policy[key] = v
	return nil
}

// NewIpv6Policy creates a new entry in the Ipv6Policy list of the
// SrlNokiaQos_Qos_Classifiers_Multifield struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) NewIpv6Policy(Name string) (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Policy == nil {
		t.Ipv6Policy = make(map[string]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Policy", key)
	}

	t.Ipv6Policy[key] = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy{
		Name: &Name,
	}

	return t.Ipv6Policy[key], nil
}

// RenameIpv6Policy renames an entry in the list Ipv6Policy within
// the SrlNokiaQos_Qos_Classifiers_Multifield struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) RenameIpv6Policy(oldK, newK string) error {
	if _, ok := t.Ipv6Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Policy", newK)
	}

	e, ok := t.Ipv6Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Policy", oldK)
	}
	e.Name = &newK

	t.Ipv6Policy[newK] = e
	delete(t.Ipv6Policy, oldK)
	return nil
}

// GetOrCreateIpv6Policy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) GetOrCreateIpv6Policy(Name string) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy {
	key := Name

	if v, ok := t.Ipv6Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Policy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Policy got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Policy retrieves the value with the specified key from
// the Ipv6Policy map field of SrlNokiaQos_Qos_Classifiers_Multifield. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) GetIpv6Policy(Name string) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ipv6Policy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Policy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) DeleteIpv6Policy(Name string) {
	key := Name

	delete(t.Ipv6Policy, key)
}

// AppendIpv6Policy appends the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy struct to the
// list Ipv6Policy of SrlNokiaQos_Qos_Classifiers_Multifield. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) AppendIpv6Policy(
	v *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Policy == nil {
		t.Ipv6Policy = make(map[string]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy)
	}

	if _, ok := t.Ipv6Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Policy %v", key)
	}

	t.Ipv6Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4Policy {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield.
func (*SrlNokiaQos_Qos_Classifiers_Multifield) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier represents the /srl_nokia-qos/qos/classifiers/multifield-classifier YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier struct {
	Entries *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries `path:"entries" module:"srl_nokia-acl-qos"`
	Name    *string                                                   `path:"name" module:"srl_nokia-acl-qos"`
	Type    E_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Type   `path:"type" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) IsYANGGoStruct() {}

// GetOrCreateEntries retrieves the value of the Entries field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) GetOrCreateEntries() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries {
	if t.Entries != nil {
		return t.Entries
	}
	t.Entries = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries{}
	return t.Entries
}

// GetEntries returns the value of the Entries struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier. If the receiver or the field Entries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) GetEntries() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries {
	if t != nil && t.Entries != nil {
		return t.Entries
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) GetType() E_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Entries.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries struct {
	Entry map[uint32]*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry `path:"entry" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) NewEntry(SequenceId uint32) (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) GetOrCreateEntry(
	SequenceId uint32,
) *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) GetEntry(SequenceId uint32) *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry struct to the
// list Entry of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) AppendEntry(
	v *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry struct {
	Action     *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action `path:"action" module:"srl_nokia-acl-qos"`
	Match      *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match  `path:"match" module:"srl_nokia-acl-qos"`
	SequenceId *uint32                                                                `path:"sequence-id" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) GetOrCreateAction() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) GetOrCreateMatch() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) GetAction() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) GetMatch() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/action YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action struct {
	DropProbability E_SrlNokiaAclQos_DropProbability                                                            `path:"drop-probability" module:"srl_nokia-acl-qos"`
	ForwardingClass SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-acl-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                                            `path:"profile" module:"srl_nokia-acl-qos"`
	Rewrite         *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite              `path:"rewrite" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateRewrite retrieves the value of the Rewrite field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) GetOrCreateRewrite() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite {
	if t.Rewrite != nil {
		return t.Rewrite
	}
	t.Rewrite = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite{}
	return t.Rewrite
}

// GetRewrite returns the value of the Rewrite struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action. If the receiver or the field Rewrite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) GetRewrite() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite {
	if t != nil && t.Rewrite != nil {
		return t.Rewrite
	}
	return nil
}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) GetDropProbability() E_SrlNokiaAclQos_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rewrite.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/action/rewrite YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite struct {
	SetDscp *uint8 `path:"set-dscp" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) IsYANGGoStruct() {
}

// GetSetDscp retrieves the value of the leaf SetDscp from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_Rewrite) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match struct {
	Ipv4      *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4      `path:"ipv4" module:"srl_nokia-acl-qos"`
	Ipv6      *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6      `path:"ipv6" module:"srl_nokia-acl-qos"`
	Transport *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport `path:"transport" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) GetOrCreateIpv4() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) GetOrCreateIpv6() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6{}
	return t.Ipv6
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) GetOrCreateTransport() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport{}
	return t.Transport
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) GetIpv4() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) GetIpv6() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) GetTransport() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Transport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4 represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4 YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4 struct {
	DestinationIp *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp  `path:"destination-ip" module:"srl_nokia-acl-qos"`
	DscpSet       []SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union `path:"dscp-set" module:"srl_nokia-acl-qos"`
	FirstFragment *bool                                                                                     `path:"first-fragment" module:"srl_nokia-acl-qos"`
	Fragment      *bool                                                                                     `path:"fragment" module:"srl_nokia-acl-qos"`
	Icmp          *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp           `path:"icmp" module:"srl_nokia-acl-qos"`
	Protocol      SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union  `path:"protocol" module:"srl_nokia-acl-qos"`
	SourceIp      *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp       `path:"source-ip" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetOrCreateDestinationIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetOrCreateIcmp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetOrCreateSourceIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp{}
	return t.SourceIp
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetDestinationIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetIcmp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetSourceIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetDscpSet() []SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetFirstFragment retrieves the value of the leaf FirstFragment from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstFragment is set, it can
// safely use t.GetFirstFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstFragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetFirstFragment() bool {
	if t == nil || t.FirstFragment == nil {
		return false
	}
	return *t.FirstFragment
}

// GetFragment retrieves the value of the leaf Fragment from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetFragment() bool {
	if t == nil || t.Fragment == nil {
		return false
	}
	return *t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) GetProtocol() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4/destination-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4/icmp YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp struct {
	Code []uint8                                                                                   `path:"code" module:"srl_nokia-acl-qos"`
	Type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union `path:"type" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) GetType() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4/source-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6 represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6 YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6 struct {
	DestinationIp *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp   `path:"destination-ip" module:"srl_nokia-acl-qos"`
	DscpSet       []SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union  `path:"dscp-set" module:"srl_nokia-acl-qos"`
	Icmp6         *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6           `path:"icmp6" module:"srl_nokia-acl-qos"`
	NextHeader    SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union `path:"next-header" module:"srl_nokia-acl-qos"`
	SourceIp      *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp        `path:"source-ip" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetOrCreateDestinationIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetOrCreateIcmp6() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6{}
	return t.Icmp6
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetOrCreateSourceIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp{}
	return t.SourceIp
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetDestinationIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetIcmp6() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetSourceIp() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetDscpSet() []SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetNextHeader retrieves the value of the leaf NextHeader from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) GetNextHeader() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6/destination-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6 represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6/icmp6 YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6 struct {
	Code []uint8                                                                                    `path:"code" module:"srl_nokia-acl-qos"`
	Type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union `path:"type" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) GetType() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6/source-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport struct {
	DestinationPort *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort `path:"destination-port" module:"srl_nokia-acl-qos"`
	SourcePort      *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort      `path:"source-port" module:"srl_nokia-acl-qos"`
	TcpFlags        *string                                                                                         `path:"tcp-flags" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) IsYANGGoStruct() {
}

// GetOrCreateDestinationPort retrieves the value of the DestinationPort field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) GetOrCreateDestinationPort() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort {
	if t.DestinationPort != nil {
		return t.DestinationPort
	}
	t.DestinationPort = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort{}
	return t.DestinationPort
}

// GetOrCreateSourcePort retrieves the value of the SourcePort field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) GetOrCreateSourcePort() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort {
	if t.SourcePort != nil {
		return t.SourcePort
	}
	t.SourcePort = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort{}
	return t.SourcePort
}

// GetDestinationPort returns the value of the DestinationPort struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport. If the receiver or the field DestinationPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) GetDestinationPort() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort {
	if t != nil && t.DestinationPort != nil {
		return t.DestinationPort
	}
	return nil
}

// GetSourcePort returns the value of the SourcePort struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport. If the receiver or the field SourcePort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) GetSourcePort() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort {
	if t != nil && t.SourcePort != nil {
		return t.SourcePort
	}
	return nil
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) GetTcpFlags() string {
	if t == nil || t.TcpFlags == nil {
		return ""
	}
	return *t.TcpFlags
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationPort.PopulateDefaults()
	t.SourcePort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/destination-port YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                                                        `path:"operator" module:"srl_nokia-acl-qos"`
	Range    *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range      `path:"range" module:"srl_nokia-acl-qos"`
	Value    SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union `path:"value" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) GetOrCreateRange() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) GetRange() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) GetValue() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/destination-port/range YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range struct {
	End   SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union   `path:"end" module:"srl_nokia-acl-qos"`
	Start SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union `path:"start" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) GetEnd() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) GetStart() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/source-port YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                                                   `path:"operator" module:"srl_nokia-acl-qos"`
	Range    *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range      `path:"range" module:"srl_nokia-acl-qos"`
	Value    SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union `path:"value" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) GetOrCreateRange() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) GetRange() *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) GetValue() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}
