/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range represents the /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/source-port/range YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range struct {
	End   SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union   `path:"end" module:"srl_nokia-acl-qos"`
	Start SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union `path:"start" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) GetEnd() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) GetStart() SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range.
func (*SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy struct {
	Entry map[uint32]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry `path:"entry" module:"srl_nokia-acl-qos"`
	Name  *string                                                             `path:"name" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) NewEntry(SequenceId uint32) (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) GetOrCreateEntry(SequenceId uint32) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) GetEntry(SequenceId uint32) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry struct to the
// list Entry of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) AppendEntry(
	v *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry struct {
	Action     *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action `path:"action" module:"srl_nokia-acl-qos"`
	Match      *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match  `path:"match" module:"srl_nokia-acl-qos"`
	SequenceId *uint32                                                         `path:"sequence-id" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) GetOrCreateAction() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) GetOrCreateMatch() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) GetAction() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) GetMatch() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/action YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action struct {
	DropProbability E_SrlNokiaAclQos_DropProbability                                                     `path:"drop-probability" module:"srl_nokia-acl-qos"`
	ForwardingClass SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-acl-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                                     `path:"profile" module:"srl_nokia-acl-qos"`
	Rewrite         *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite              `path:"rewrite" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateRewrite retrieves the value of the Rewrite field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) GetOrCreateRewrite() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite {
	if t.Rewrite != nil {
		return t.Rewrite
	}
	t.Rewrite = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite{}
	return t.Rewrite
}

// GetRewrite returns the value of the Rewrite struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action. If the receiver or the field Rewrite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) GetRewrite() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite {
	if t != nil && t.Rewrite != nil {
		return t.Rewrite
	}
	return nil
}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) GetDropProbability() E_SrlNokiaAclQos_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rewrite.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/action/rewrite YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite struct {
	SetDscp *uint8 `path:"set-dscp" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) IsYANGGoStruct() {}

// GetSetDscp retrieves the value of the leaf SetDscp from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_Rewrite) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match struct {
	DestinationIp   *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp   `path:"destination-ip" module:"srl_nokia-acl-qos"`
	DestinationPort *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort `path:"destination-port" module:"srl_nokia-acl-qos"`
	DscpSet         []SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union  `path:"dscp-set" module:"srl_nokia-acl-qos"`
	FirstFragment   *bool                                                                          `path:"first-fragment" module:"srl_nokia-acl-qos"`
	Fragment        *bool                                                                          `path:"fragment" module:"srl_nokia-acl-qos"`
	Icmp            *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp            `path:"icmp" module:"srl_nokia-acl-qos"`
	Protocol        SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union   `path:"protocol" module:"srl_nokia-acl-qos"`
	SourceIp        *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp        `path:"source-ip" module:"srl_nokia-acl-qos"`
	SourcePort      *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort      `path:"source-port" module:"srl_nokia-acl-qos"`
	TcpFlags        *string                                                                        `path:"tcp-flags" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetOrCreateDestinationIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateDestinationPort retrieves the value of the DestinationPort field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetOrCreateDestinationPort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort {
	if t.DestinationPort != nil {
		return t.DestinationPort
	}
	t.DestinationPort = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort{}
	return t.DestinationPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetOrCreateIcmp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetOrCreateSourceIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp{}
	return t.SourceIp
}

// GetOrCreateSourcePort retrieves the value of the SourcePort field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetOrCreateSourcePort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort {
	if t.SourcePort != nil {
		return t.SourcePort
	}
	t.SourcePort = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort{}
	return t.SourcePort
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetDestinationIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetDestinationPort returns the value of the DestinationPort struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match. If the receiver or the field DestinationPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetDestinationPort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort {
	if t != nil && t.DestinationPort != nil {
		return t.DestinationPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetIcmp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetSourceIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetSourcePort returns the value of the SourcePort struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match. If the receiver or the field SourcePort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetSourcePort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort {
	if t != nil && t.SourcePort != nil {
		return t.SourcePort
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetDscpSet() []SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetFirstFragment retrieves the value of the leaf FirstFragment from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstFragment is set, it can
// safely use t.GetFirstFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstFragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetFirstFragment() bool {
	if t == nil || t.FirstFragment == nil {
		return false
	}
	return *t.FirstFragment
}

// GetFragment retrieves the value of the leaf Fragment from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetFragment() bool {
	if t == nil || t.Fragment == nil {
		return false
	}
	return *t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetProtocol() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) GetTcpFlags() string {
	if t == nil || t.TcpFlags == nil {
		return ""
	}
	return *t.TcpFlags
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.DestinationPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
	t.SourcePort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/destination-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/destination-port YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                                       `path:"operator" module:"srl_nokia-acl-qos"`
	Range    *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range      `path:"range" module:"srl_nokia-acl-qos"`
	Value    SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union `path:"value" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) GetOrCreateRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) GetRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) GetValue() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/destination-port/range YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range struct {
	End   SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union   `path:"end" module:"srl_nokia-acl-qos"`
	Start SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union `path:"start" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) GetEnd() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) GetStart() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/icmp YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp struct {
	Code []uint8                                                                       `path:"code" module:"srl_nokia-acl-qos"`
	Type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union `path:"type" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) GetType() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/source-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/source-port YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                                  `path:"operator" module:"srl_nokia-acl-qos"`
	Range    *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range      `path:"range" module:"srl_nokia-acl-qos"`
	Value    SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union `path:"value" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) GetOrCreateRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) GetRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) GetValue() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range represents the /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/source-port/range YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range struct {
	End   SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union   `path:"end" module:"srl_nokia-acl-qos"`
	Start SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union `path:"start" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) GetEnd() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) GetStart() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy struct {
	Entry map[uint32]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry `path:"entry" module:"srl_nokia-acl-qos"`
	Name  *string                                                             `path:"name" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) NewEntry(SequenceId uint32) (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) GetOrCreateEntry(SequenceId uint32) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) GetEntry(SequenceId uint32) *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry struct to the
// list Entry of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) AppendEntry(
	v *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry struct {
	Action     *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action `path:"action" module:"srl_nokia-acl-qos"`
	Match      *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match  `path:"match" module:"srl_nokia-acl-qos"`
	SequenceId *uint32                                                         `path:"sequence-id" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) GetOrCreateAction() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) GetOrCreateMatch() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) GetAction() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) GetMatch() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/action YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action struct {
	DropProbability E_SrlNokiaAclQos_DropProbability                                                     `path:"drop-probability" module:"srl_nokia-acl-qos"`
	ForwardingClass SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-acl-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                                     `path:"profile" module:"srl_nokia-acl-qos"`
	Rewrite         *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite              `path:"rewrite" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateRewrite retrieves the value of the Rewrite field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) GetOrCreateRewrite() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite {
	if t.Rewrite != nil {
		return t.Rewrite
	}
	t.Rewrite = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite{}
	return t.Rewrite
}

// GetRewrite returns the value of the Rewrite struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action. If the receiver or the field Rewrite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) GetRewrite() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite {
	if t != nil && t.Rewrite != nil {
		return t.Rewrite
	}
	return nil
}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) GetDropProbability() E_SrlNokiaAclQos_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) GetForwardingClass() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rewrite.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/action/rewrite YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite struct {
	SetDscp *uint8 `path:"set-dscp" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) IsYANGGoStruct() {}

// GetSetDscp retrieves the value of the leaf SetDscp from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_Rewrite) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match struct {
	DestinationIp   *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp   `path:"destination-ip" module:"srl_nokia-acl-qos"`
	DestinationPort *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort `path:"destination-port" module:"srl_nokia-acl-qos"`
	DscpSet         []SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union  `path:"dscp-set" module:"srl_nokia-acl-qos"`
	Icmp6           *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6           `path:"icmp6" module:"srl_nokia-acl-qos"`
	NextHeader      SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union `path:"next-header" module:"srl_nokia-acl-qos"`
	SourceIp        *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp        `path:"source-ip" module:"srl_nokia-acl-qos"`
	SourcePort      *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort      `path:"source-port" module:"srl_nokia-acl-qos"`
	TcpFlags        *string                                                                        `path:"tcp-flags" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetOrCreateDestinationIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateDestinationPort retrieves the value of the DestinationPort field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetOrCreateDestinationPort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort {
	if t.DestinationPort != nil {
		return t.DestinationPort
	}
	t.DestinationPort = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort{}
	return t.DestinationPort
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetOrCreateIcmp6() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6{}
	return t.Icmp6
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetOrCreateSourceIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp{}
	return t.SourceIp
}

// GetOrCreateSourcePort retrieves the value of the SourcePort field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetOrCreateSourcePort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort {
	if t.SourcePort != nil {
		return t.SourcePort
	}
	t.SourcePort = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort{}
	return t.SourcePort
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetDestinationIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetDestinationPort returns the value of the DestinationPort struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match. If the receiver or the field DestinationPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetDestinationPort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort {
	if t != nil && t.DestinationPort != nil {
		return t.DestinationPort
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetIcmp6() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetSourceIp() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetSourcePort returns the value of the SourcePort struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match. If the receiver or the field SourcePort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetSourcePort() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort {
	if t != nil && t.SourcePort != nil {
		return t.SourcePort
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetDscpSet() []SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetNextHeader retrieves the value of the leaf NextHeader from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetNextHeader() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) GetTcpFlags() string {
	if t == nil || t.TcpFlags == nil {
		return ""
	}
	return *t.TcpFlags
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.DestinationPort.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
	t.SourcePort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/destination-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/destination-port YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                                       `path:"operator" module:"srl_nokia-acl-qos"`
	Range    *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range      `path:"range" module:"srl_nokia-acl-qos"`
	Value    SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union `path:"value" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) GetOrCreateRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) GetRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) GetValue() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/destination-port/range YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range struct {
	End   SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union   `path:"end" module:"srl_nokia-acl-qos"`
	Start SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union `path:"start" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) GetEnd() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) GetStart() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6 represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/icmp6 YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6 struct {
	Code []uint8                                                                        `path:"code" module:"srl_nokia-acl-qos"`
	Type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union `path:"type" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) GetType() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/source-ip YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl-qos"`
	Mask    *string `path:"mask" module:"srl_nokia-acl-qos"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/source-port YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                                  `path:"operator" module:"srl_nokia-acl-qos"`
	Range    *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range      `path:"range" module:"srl_nokia-acl-qos"`
	Value    SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union `path:"value" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) GetOrCreateRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) GetRange() *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) GetValue() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range represents the /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/source-port/range YANG schema element.
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range struct {
	End   SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union   `path:"end" module:"srl_nokia-acl-qos"`
	Start SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union `path:"start" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) GetEnd() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) GetStart() SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range.
func (*SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_ExplicitCongestionNotification represents the /srl_nokia-qos/qos/explicit-congestion-notification YANG schema element.
type SrlNokiaQos_Qos_ExplicitCongestionNotification struct {
	EcnDscpPolicy *string `path:"ecn-dscp-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ExplicitCongestionNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ExplicitCongestionNotification) IsYANGGoStruct() {}

// GetEcnDscpPolicy retrieves the value of the leaf EcnDscpPolicy from the SrlNokiaQos_Qos_ExplicitCongestionNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcnDscpPolicy is set, it can
// safely use t.GetEcnDscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcnDscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ExplicitCongestionNotification) GetEcnDscpPolicy() string {
	if t == nil || t.EcnDscpPolicy == nil {
		return ""
	}
	return *t.EcnDscpPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ExplicitCongestionNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ExplicitCongestionNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ExplicitCongestionNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ExplicitCongestionNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ExplicitCongestionNotification) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ExplicitCongestionNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ExplicitCongestionNotification.
func (*SrlNokiaQos_Qos_ExplicitCongestionNotification) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingClasses represents the /srl_nokia-qos/qos/forwarding-classes YANG schema element.
type SrlNokiaQos_Qos_ForwardingClasses struct {
	ForwardingClass map[string]*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass `path:"forwarding-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingClasses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingClasses) IsYANGGoStruct() {}

// NewForwardingClass creates a new entry in the ForwardingClass list of the
// SrlNokiaQos_Qos_ForwardingClasses struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_ForwardingClasses) NewForwardingClass(Name string) (*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[string]*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingClass", key)
	}

	t.ForwardingClass[key] = &SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass{
		Name: &Name,
	}

	return t.ForwardingClass[key], nil
}

// RenameForwardingClass renames an entry in the list ForwardingClass within
// the SrlNokiaQos_Qos_ForwardingClasses struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_ForwardingClasses) RenameForwardingClass(oldK, newK string) error {
	if _, ok := t.ForwardingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingClass", newK)
	}

	e, ok := t.ForwardingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingClass", oldK)
	}
	e.Name = &newK

	t.ForwardingClass[newK] = e
	delete(t.ForwardingClass, oldK)
	return nil
}

// GetOrCreateForwardingClass retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_ForwardingClasses. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_ForwardingClasses) GetOrCreateForwardingClass(Name string) *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass {
	key := Name

	if v, ok := t.ForwardingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingClass(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingClass got unexpected error: %v", err))
	}
	return v
}

// GetForwardingClass retrieves the value with the specified key from
// the ForwardingClass map field of SrlNokiaQos_Qos_ForwardingClasses. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_ForwardingClasses) GetForwardingClass(Name string) *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingClass deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_ForwardingClasses. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_ForwardingClasses) DeleteForwardingClass(Name string) {
	key := Name

	delete(t.ForwardingClass, key)
}

// AppendForwardingClass appends the supplied SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass struct to the
// list ForwardingClass of SrlNokiaQos_Qos_ForwardingClasses. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_ForwardingClasses) AppendForwardingClass(
	v *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[string]*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass)
	}

	if _, ok := t.ForwardingClass[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingClass %v", key)
	}

	t.ForwardingClass[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingClasses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingClasses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ForwardingClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingClasses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingClasses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingClasses) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingClasses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingClasses.
func (*SrlNokiaQos_Qos_ForwardingClasses) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass represents the /srl_nokia-qos/qos/forwarding-classes/forwarding-class YANG schema element.
type SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass struct {
	ForwardingClassIndex *uint8                                                    `path:"forwarding-class-index" module:"srl_nokia-qos"`
	Name                 *string                                                   `path:"name" module:"srl_nokia-qos"`
	Output               *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output `path:"output" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) IsYANGGoStruct() {}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) GetOrCreateOutput() *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output{}
	return t.Output
}

// GetOutput returns the value of the Output struct pointer
// from SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) GetOutput() *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetForwardingClassIndex retrieves the value of the leaf ForwardingClassIndex from the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClassIndex is set, it can
// safely use t.GetForwardingClassIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClassIndex == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) GetForwardingClassIndex() uint8 {
	if t == nil || t.ForwardingClassIndex == nil {
		return 0
	}
	return *t.ForwardingClassIndex
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass.
func (*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output represents the /srl_nokia-qos/qos/forwarding-classes/forwarding-class/output YANG schema element.
type SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output struct {
	MulticastQueue *string `path:"multicast-queue" module:"srl_nokia-qos"`
	Queue          *string `path:"queue" module:"srl_nokia-qos"`
	SlopePolicy    *string `path:"slope-policy" module:"srl_nokia-qos"`
	UnicastQueue   *string `path:"unicast-queue" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) IsYANGGoStruct() {}

// GetMulticastQueue retrieves the value of the leaf MulticastQueue from the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastQueue is set, it can
// safely use t.GetMulticastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastQueue == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) GetMulticastQueue() string {
	if t == nil || t.MulticastQueue == nil {
		return ""
	}
	return *t.MulticastQueue
}

// GetQueue retrieves the value of the leaf Queue from the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) GetQueue() string {
	if t == nil || t.Queue == nil {
		return ""
	}
	return *t.Queue
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetUnicastQueue retrieves the value of the leaf UnicastQueue from the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastQueue is set, it can
// safely use t.GetUnicastQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastQueue == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) GetUnicastQueue() string {
	if t == nil || t.UnicastQueue == nil {
		return ""
	}
	return *t.UnicastQueue
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output.
func (*SrlNokiaQos_Qos_ForwardingClasses_ForwardingClass_Output) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingComplexes represents the /srl_nokia-qos/qos/forwarding-complexes YANG schema element.
type SrlNokiaQos_Qos_ForwardingComplexes struct {
	Linecard map[uint8]*SrlNokiaQos_Qos_ForwardingComplexes_Linecard `path:"linecard" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingComplexes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingComplexes) IsYANGGoStruct() {}

// NewLinecard creates a new entry in the Linecard list of the
// SrlNokiaQos_Qos_ForwardingComplexes struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) NewLinecard(Slot uint8) (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Linecard == nil {
		t.Linecard = make(map[uint8]*SrlNokiaQos_Qos_ForwardingComplexes_Linecard)
	}

	key := Slot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Linecard[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Linecard", key)
	}

	t.Linecard[key] = &SrlNokiaQos_Qos_ForwardingComplexes_Linecard{
		Slot: &Slot,
	}

	return t.Linecard[key], nil
}

// RenameLinecard renames an entry in the list Linecard within
// the SrlNokiaQos_Qos_ForwardingComplexes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) RenameLinecard(oldK, newK uint8) error {
	if _, ok := t.Linecard[newK]; ok {
		return fmt.Errorf("key %v already exists in Linecard", newK)
	}

	e, ok := t.Linecard[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Linecard", oldK)
	}
	e.Slot = &newK

	t.Linecard[newK] = e
	delete(t.Linecard, oldK)
	return nil
}

// GetOrCreateLinecard retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_ForwardingComplexes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) GetOrCreateLinecard(Slot uint8) *SrlNokiaQos_Qos_ForwardingComplexes_Linecard {
	key := Slot

	if v, ok := t.Linecard[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLinecard(Slot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLinecard got unexpected error: %v", err))
	}
	return v
}

// GetLinecard retrieves the value with the specified key from
// the Linecard map field of SrlNokiaQos_Qos_ForwardingComplexes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) GetLinecard(Slot uint8) *SrlNokiaQos_Qos_ForwardingComplexes_Linecard {
	if t == nil {
		return nil
	}

	key := Slot

	if lm, ok := t.Linecard[key]; ok {
		return lm
	}
	return nil
}

// DeleteLinecard deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_ForwardingComplexes. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) DeleteLinecard(Slot uint8) {
	key := Slot

	delete(t.Linecard, key)
}

// AppendLinecard appends the supplied SrlNokiaQos_Qos_ForwardingComplexes_Linecard struct to the
// list Linecard of SrlNokiaQos_Qos_ForwardingComplexes. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_ForwardingComplexes_Linecard already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) AppendLinecard(v *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) error {
	if v.Slot == nil {
		return fmt.Errorf("invalid nil key received for Slot")
	}

	key := *v.Slot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Linecard == nil {
		t.Linecard = make(map[uint8]*SrlNokiaQos_Qos_ForwardingComplexes_Linecard)
	}

	if _, ok := t.Linecard[key]; ok {
		return fmt.Errorf("duplicate key for list Linecard %v", key)
	}

	t.Linecard[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingComplexes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Linecard {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingComplexes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingComplexes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingComplexes.
func (*SrlNokiaQos_Qos_ForwardingComplexes) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingComplexes_Linecard represents the /srl_nokia-qos/qos/forwarding-complexes/linecard YANG schema element.
type SrlNokiaQos_Qos_ForwardingComplexes_Linecard struct {
	ForwardingComplex map[E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name]*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex `path:"forwarding-complex" module:"srl_nokia-qos"`
	Slot              *uint8                                                                                                                                    `path:"slot" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingComplexes_Linecard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard) IsYANGGoStruct() {}

// NewForwardingComplex creates a new entry in the ForwardingComplex list of the
// SrlNokiaQos_Qos_ForwardingComplexes_Linecard struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) NewForwardingComplex(
	Name E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name,
) (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingComplex == nil {
		t.ForwardingComplex = make(map[E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name]*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingComplex[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingComplex", key)
	}

	t.ForwardingComplex[key] = &SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex{
		Name: Name,
	}

	return t.ForwardingComplex[key], nil
}

// RenameForwardingComplex renames an entry in the list ForwardingComplex within
// the SrlNokiaQos_Qos_ForwardingComplexes_Linecard struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) RenameForwardingComplex(
	oldK, newK E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name,
) error {
	if _, ok := t.ForwardingComplex[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingComplex", newK)
	}

	e, ok := t.ForwardingComplex[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingComplex", oldK)
	}
	e.Name = newK

	t.ForwardingComplex[newK] = e
	delete(t.ForwardingComplex, oldK)
	return nil
}

// GetOrCreateForwardingComplex retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_ForwardingComplexes_Linecard. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) GetOrCreateForwardingComplex(
	Name E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name,
) *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex {
	key := Name

	if v, ok := t.ForwardingComplex[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingComplex(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingComplex got unexpected error: %v", err))
	}
	return v
}

// GetForwardingComplex retrieves the value with the specified key from
// the ForwardingComplex map field of SrlNokiaQos_Qos_ForwardingComplexes_Linecard. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) GetForwardingComplex(
	Name E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name,
) *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingComplex[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingComplex deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_ForwardingComplexes_Linecard. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) DeleteForwardingComplex(
	Name E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name,
) {
	key := Name

	delete(t.ForwardingComplex, key)
}

// AppendForwardingComplex appends the supplied SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex struct to the
// list ForwardingComplex of SrlNokiaQos_Qos_ForwardingComplexes_Linecard. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) AppendForwardingComplex(
	v *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingComplex == nil {
		t.ForwardingComplex = make(map[E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name]*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex)
	}

	if _, ok := t.ForwardingComplex[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingComplex %v", key)
	}

	t.ForwardingComplex[key] = v
	return nil
}

// GetSlot retrieves the value of the leaf Slot from the SrlNokiaQos_Qos_ForwardingComplexes_Linecard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Slot is set, it can
// safely use t.GetSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Slot == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) GetSlot() uint8 {
	if t == nil || t.Slot == nil {
		return 0
	}
	return *t.Slot
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingComplexes_Linecard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ForwardingComplex {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_ForwardingComplexes_Linecard struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Slot == nil {
		return nil, fmt.Errorf("nil value for key Slot")
	}

	return map[string]interface{}{
		"slot": *t.Slot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingComplexes_Linecard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingComplexes_Linecard.
func (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex represents the /srl_nokia-qos/qos/forwarding-complexes/linecard/forwarding-complex YANG schema element.
type SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex struct {
	Name   E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name  `path:"name" module:"srl_nokia-qos"`
	Output *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output `path:"output" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) IsYANGGoStruct() {}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) GetOrCreateOutput() *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output{}
	return t.Output
}

// GetOutput returns the value of the Output struct pointer
// from SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) GetOutput() *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) GetName() E_SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex.
func (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output represents the /srl_nokia-qos/qos/forwarding-complexes/linecard/forwarding-complex/output YANG schema element.
type SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output struct {
	FpPoolPolicy *string `path:"fp-pool-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) IsYANGGoStruct() {}

// GetFpPoolPolicy retrieves the value of the leaf FpPoolPolicy from the SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpPoolPolicy is set, it can
// safely use t.GetFpPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpPoolPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) GetFpPoolPolicy() string {
	if t == nil || t.FpPoolPolicy == nil {
		return "default"
	}
	return *t.FpPoolPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FpPoolPolicy == nil {
		var v string = "default"
		t.FpPoolPolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output.
func (*SrlNokiaQos_Qos_ForwardingComplexes_Linecard_ForwardingComplex_Output) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_InputClassMap represents the /srl_nokia-qos/qos/input-class-map YANG schema element.
type SrlNokiaQos_Qos_InputClassMap struct {
	ForwardingClass map[SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union]*SrlNokiaQos_Qos_InputClassMap_ForwardingClass `path:"forwarding-class" module:"srl_nokia-qos"`
	Name            *string                                                                                                     `path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_InputClassMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_InputClassMap) IsYANGGoStruct() {}

// NewForwardingClass creates a new entry in the ForwardingClass list of the
// SrlNokiaQos_Qos_InputClassMap struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_InputClassMap) NewForwardingClass(Name SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union) (*SrlNokiaQos_Qos_InputClassMap_ForwardingClass, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union]*SrlNokiaQos_Qos_InputClassMap_ForwardingClass)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingClass", key)
	}

	t.ForwardingClass[key] = &SrlNokiaQos_Qos_InputClassMap_ForwardingClass{
		Name: Name,
	}

	return t.ForwardingClass[key], nil
}

// RenameForwardingClass renames an entry in the list ForwardingClass within
// the SrlNokiaQos_Qos_InputClassMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_InputClassMap) RenameForwardingClass(
	oldK, newK SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union,
) error {
	if _, ok := t.ForwardingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingClass", newK)
	}

	e, ok := t.ForwardingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingClass", oldK)
	}
	e.Name = newK

	t.ForwardingClass[newK] = e
	delete(t.ForwardingClass, oldK)
	return nil
}

// GetOrCreateForwardingClass retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_InputClassMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_InputClassMap) GetOrCreateForwardingClass(
	Name SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union,
) *SrlNokiaQos_Qos_InputClassMap_ForwardingClass {
	key := Name

	if v, ok := t.ForwardingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingClass(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingClass got unexpected error: %v", err))
	}
	return v
}

// GetForwardingClass retrieves the value with the specified key from
// the ForwardingClass map field of SrlNokiaQos_Qos_InputClassMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_InputClassMap) GetForwardingClass(Name SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union) *SrlNokiaQos_Qos_InputClassMap_ForwardingClass {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingClass deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_InputClassMap. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_InputClassMap) DeleteForwardingClass(
	Name SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union,
) {
	key := Name

	delete(t.ForwardingClass, key)
}

// AppendForwardingClass appends the supplied SrlNokiaQos_Qos_InputClassMap_ForwardingClass struct to the
// list ForwardingClass of SrlNokiaQos_Qos_InputClassMap. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_InputClassMap_ForwardingClass already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_InputClassMap) AppendForwardingClass(v *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union]*SrlNokiaQos_Qos_InputClassMap_ForwardingClass)
	}

	if _, ok := t.ForwardingClass[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingClass %v", key)
	}

	t.ForwardingClass[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_InputClassMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_InputClassMap) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_InputClassMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_InputClassMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ForwardingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_InputClassMap struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_InputClassMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_InputClassMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_InputClassMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_InputClassMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_InputClassMap) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_InputClassMap.
func (*SrlNokiaQos_Qos_InputClassMap) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_InputClassMap_ForwardingClass represents the /srl_nokia-qos/qos/input-class-map/forwarding-class YANG schema element.
type SrlNokiaQos_Qos_InputClassMap_ForwardingClass struct {
	Name     SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union `path:"name" module:"srl_nokia-qos"`
	Policers *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers  `path:"policers" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_InputClassMap_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_InputClassMap_ForwardingClass) IsYANGGoStruct() {}

// GetOrCreatePolicers retrieves the value of the Policers field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) GetOrCreatePolicers() *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers {
	if t.Policers != nil {
		return t.Policers
	}
	t.Policers = &SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers{}
	return t.Policers
}

// GetPolicers returns the value of the Policers struct pointer
// from SrlNokiaQos_Qos_InputClassMap_ForwardingClass. If the receiver or the field Policers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) GetPolicers() *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers {
	if t != nil && t.Policers != nil {
		return t.Policers
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_InputClassMap_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) GetName() SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_InputClassMap_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Policers.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_InputClassMap_ForwardingClass struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_InputClassMap_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_InputClassMap_ForwardingClass.
func (*SrlNokiaQos_Qos_InputClassMap_ForwardingClass) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers represents the /srl_nokia-qos/qos/input-class-map/forwarding-class/policers YANG schema element.
type SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers struct {
	BroadcastPolicer      *uint8 `path:"broadcast-policer" module:"srl_nokia-qos"`
	MulticastPolicer      *uint8 `path:"multicast-policer" module:"srl_nokia-qos"`
	UnicastPolicer        *uint8 `path:"unicast-policer" module:"srl_nokia-qos"`
	UnknownUnicastPolicer *uint8 `path:"unknown-unicast-policer" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) IsYANGGoStruct() {}

// GetBroadcastPolicer retrieves the value of the leaf BroadcastPolicer from the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BroadcastPolicer is set, it can
// safely use t.GetBroadcastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BroadcastPolicer == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) GetBroadcastPolicer() uint8 {
	if t == nil || t.BroadcastPolicer == nil {
		return 0
	}
	return *t.BroadcastPolicer
}

// GetMulticastPolicer retrieves the value of the leaf MulticastPolicer from the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastPolicer is set, it can
// safely use t.GetMulticastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastPolicer == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) GetMulticastPolicer() uint8 {
	if t == nil || t.MulticastPolicer == nil {
		return 0
	}
	return *t.MulticastPolicer
}

// GetUnicastPolicer retrieves the value of the leaf UnicastPolicer from the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastPolicer is set, it can
// safely use t.GetUnicastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastPolicer == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) GetUnicastPolicer() uint8 {
	if t == nil || t.UnicastPolicer == nil {
		return 0
	}
	return *t.UnicastPolicer
}

// GetUnknownUnicastPolicer retrieves the value of the leaf UnknownUnicastPolicer from the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownUnicastPolicer is set, it can
// safely use t.GetUnknownUnicastPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownUnicastPolicer == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) GetUnknownUnicastPolicer() uint8 {
	if t == nil || t.UnknownUnicastPolicer == nil {
		return 0
	}
	return *t.UnknownUnicastPolicer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers.
func (*SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Policers) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces represents the /srl_nokia-qos/qos/interfaces YANG schema element.
type SrlNokiaQos_Qos_Interfaces struct {
	Interface map[string]*SrlNokiaQos_Qos_Interfaces_Interface `path:"interface" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaQos_Qos_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Interfaces) NewInterface(InterfaceId string) (*SrlNokiaQos_Qos_Interfaces_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaQos_Qos_Interfaces_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaQos_Qos_Interfaces_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaQos_Qos_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Interfaces) GetOrCreateInterface(InterfaceId string) *SrlNokiaQos_Qos_Interfaces_Interface {
	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaQos_Qos_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces) GetInterface(InterfaceId string) *SrlNokiaQos_Qos_Interfaces_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Interfaces) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaQos_Qos_Interfaces_Interface struct to the
// list Interface of SrlNokiaQos_Qos_Interfaces. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Interfaces) AppendInterface(v *SrlNokiaQos_Qos_Interfaces_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaQos_Qos_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces.
func (*SrlNokiaQos_Qos_Interfaces) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface represents the /srl_nokia-qos/qos/interfaces/interface YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface struct {
	Input        *SrlNokiaQos_Qos_Interfaces_Interface_Input        `path:"input" module:"srl_nokia-qos" yangPresence:"true"`
	InterfaceId  *string                                            `path:"interface-id" module:"srl_nokia-qos"`
	InterfaceRef *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef `path:"interface-ref" module:"srl_nokia-qos"`
	Output       *SrlNokiaQos_Qos_Interfaces_Interface_Output       `path:"output" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetOrCreateInput() *SrlNokiaQos_Qos_Interfaces_Interface_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &SrlNokiaQos_Qos_Interfaces_Interface_Input{}
	return t.Input
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetOrCreateInterfaceRef() *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetOrCreateOutput() *SrlNokiaQos_Qos_Interfaces_Interface_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &SrlNokiaQos_Qos_Interfaces_Interface_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetInput() *SrlNokiaQos_Qos_Interfaces_Interface_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetInterfaceRef() *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetOutput() *SrlNokiaQos_Qos_Interfaces_Interface_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the SrlNokiaQos_Qos_Interfaces_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Input.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Interfaces_Interface struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface.
func (*SrlNokiaQos_Qos_Interfaces_Interface) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Input represents the /srl_nokia-qos/qos/interfaces/interface/input YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Input struct {
	Classifiers     *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers     `path:"classifiers" module:"srl_nokia-qos"`
	InputClassMap   *string                                                     `path:"input-class-map" module:"srl_nokia-qos"`
	PolicerPolicies *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies `path:"policer-policies" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input) IsYANGGoStruct() {}

// GetOrCreateClassifiers retrieves the value of the Classifiers field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) GetOrCreateClassifiers() *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers {
	if t.Classifiers != nil {
		return t.Classifiers
	}
	t.Classifiers = &SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers{}
	return t.Classifiers
}

// GetOrCreatePolicerPolicies retrieves the value of the PolicerPolicies field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) GetOrCreatePolicerPolicies() *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies {
	if t.PolicerPolicies != nil {
		return t.PolicerPolicies
	}
	t.PolicerPolicies = &SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies{}
	return t.PolicerPolicies
}

// GetClassifiers returns the value of the Classifiers struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Input. If the receiver or the field Classifiers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) GetClassifiers() *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers {
	if t != nil && t.Classifiers != nil {
		return t.Classifiers
	}
	return nil
}

// GetPolicerPolicies returns the value of the PolicerPolicies struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Input. If the receiver or the field PolicerPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) GetPolicerPolicies() *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies {
	if t != nil && t.PolicerPolicies != nil {
		return t.PolicerPolicies
	}
	return nil
}

// GetInputClassMap retrieves the value of the leaf InputClassMap from the SrlNokiaQos_Qos_Interfaces_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputClassMap is set, it can
// safely use t.GetInputClassMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputClassMap == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) GetInputClassMap() string {
	if t == nil || t.InputClassMap == nil {
		return ""
	}
	return *t.InputClassMap
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Classifiers.PopulateDefaults()
	t.PolicerPolicies.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Input.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers represents the /srl_nokia-qos/qos/interfaces/interface/input/classifiers YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers struct {
	Classifier             map[E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type]*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier `path:"classifier" module:"srl_nokia-acl-qos"`
	Default                *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default                                                                                 `path:"default" module:"srl_nokia-qos" yangPresence:"true"`
	Dot1PPolicy            *string                                                                                                                                         `path:"dot1p-policy" module:"srl_nokia-qos"`
	DscpPolicy             *string                                                                                                                                         `path:"dscp-policy" module:"srl_nokia-qos"`
	Ipv4DscpPolicy         *string                                                                                                                                         `path:"ipv4-dscp-policy" module:"srl_nokia-qos"`
	Ipv6DscpPolicy         *string                                                                                                                                         `path:"ipv6-dscp-policy" module:"srl_nokia-qos"`
	LerUseDscp             *bool                                                                                                                                           `path:"ler-use-dscp" module:"srl_nokia-qos"`
	MatchQinqDot1P         E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_MatchQinqDot1P                                                                         `path:"match-qinq-dot1p" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy *string                                                                                                                                         `path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
	TosRewriteState        E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_TosRewriteState                                                                        `path:"tos-rewrite-state" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) NewClassifier(
	Type E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type,
) (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type]*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) RenameClassifier(
	oldK, newK E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type,
) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetOrCreateClassifier(
	Type E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type,
) *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier {
	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetClassifier(
	Type E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type,
) *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier {
	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) DeleteClassifier(
	Type E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type,
) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier struct to the
// list Classifier of SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) AppendClassifier(
	v *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier,
) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type]*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// GetOrCreateDefault retrieves the value of the Default field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetOrCreateDefault() *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default {
	if t.Default != nil {
		return t.Default
	}
	t.Default = &SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default{}
	return t.Default
}

// GetDefault returns the value of the Default struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers. If the receiver or the field Default is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetDefault() *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default {
	if t != nil && t.Default != nil {
		return t.Default
	}
	return nil
}

// GetDot1PPolicy retrieves the value of the leaf Dot1PPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PPolicy is set, it can
// safely use t.GetDot1PPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetDot1PPolicy() string {
	if t == nil || t.Dot1PPolicy == nil {
		return ""
	}
	return *t.Dot1PPolicy
}

// GetDscpPolicy retrieves the value of the leaf DscpPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpPolicy is set, it can
// safely use t.GetDscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetDscpPolicy() string {
	if t == nil || t.DscpPolicy == nil {
		return ""
	}
	return *t.DscpPolicy
}

// GetIpv4DscpPolicy retrieves the value of the leaf Ipv4DscpPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4DscpPolicy is set, it can
// safely use t.GetIpv4DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetIpv4DscpPolicy() string {
	if t == nil || t.Ipv4DscpPolicy == nil {
		return ""
	}
	return *t.Ipv4DscpPolicy
}

// GetIpv6DscpPolicy retrieves the value of the leaf Ipv6DscpPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6DscpPolicy is set, it can
// safely use t.GetIpv6DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetIpv6DscpPolicy() string {
	if t == nil || t.Ipv6DscpPolicy == nil {
		return ""
	}
	return *t.Ipv6DscpPolicy
}

// GetLerUseDscp retrieves the value of the leaf LerUseDscp from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LerUseDscp is set, it can
// safely use t.GetLerUseDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LerUseDscp == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetLerUseDscp() bool {
	if t == nil || t.LerUseDscp == nil {
		return false
	}
	return *t.LerUseDscp
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetMatchQinqDot1P() E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_MatchQinqDot1P_outer
	}
	return t.MatchQinqDot1P
}

// GetMplsTrafficClassPolicy retrieves the value of the leaf MplsTrafficClassPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTrafficClassPolicy is set, it can
// safely use t.GetMplsTrafficClassPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTrafficClassPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetMplsTrafficClassPolicy() string {
	if t == nil || t.MplsTrafficClassPolicy == nil {
		return ""
	}
	return *t.MplsTrafficClassPolicy
}

// GetTosRewriteState retrieves the value of the leaf TosRewriteState from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosRewriteState is set, it can
// safely use t.GetTosRewriteState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosRewriteState == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) GetTosRewriteState() E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_TosRewriteState {
	if t == nil || t.TosRewriteState == 0 {
		return SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_TosRewriteState_trusted
	}
	return t.TosRewriteState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LerUseDscp == nil {
		var v bool = false
		t.LerUseDscp = &v
	}
	if t.MatchQinqDot1P == 0 {
		t.MatchQinqDot1P = SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_MatchQinqDot1P_outer
	}
	if t.TosRewriteState == 0 {
		t.TosRewriteState = SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_TosRewriteState_trusted
	}
	t.Default.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier represents the /srl_nokia-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier struct {
	Name *string                                                                  `path:"name" module:"srl_nokia-acl-qos"`
	Type E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type `path:"type" module:"srl_nokia-acl-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) GetType() E_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Classifier) ΛBelongingModule() string {
	return "srl_nokia-acl-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default represents the /srl_nokia-qos/qos/interfaces/interface/input/classifiers/default YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default struct {
	DropProbability E_SrlNokiaCommon_DropProbability                                                     `path:"drop-probability" module:"srl_nokia-qos"`
	ForwardingClass SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-qos"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                                     `path:"profile" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) IsYANGGoStruct() {}

// GetDropProbability retrieves the value of the leaf DropProbability from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropProbability is set, it can
// safely use t.GetDropProbability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropProbability == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) GetDropProbability() E_SrlNokiaCommon_DropProbability {
	if t == nil || t.DropProbability == 0 {
		return 0
	}
	return t.DropProbability
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) GetForwardingClass() SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return SrlNokiaCommon_ClassifyProfile_out
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Profile == 0 {
		t.Profile = SrlNokiaCommon_ClassifyProfile_out
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies represents the /srl_nokia-qos/qos/interfaces/interface/input/policer-policies YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies struct {
	PolicerPolicy *string `path:"policer-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) IsYANGGoStruct() {}

// GetPolicerPolicy retrieves the value of the leaf PolicerPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerPolicy is set, it can
// safely use t.GetPolicerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) GetPolicerPolicy() string {
	if t == nil || t.PolicerPolicy == nil {
		return ""
	}
	return *t.PolicerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Input_PolicerPolicies) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef represents the /srl_nokia-qos/qos/interfaces/interface/interface-ref YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef struct {
	Interface    *string `path:"interface" module:"srl_nokia-qos"`
	Subinterface *uint32 `path:"subinterface" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef.
func (*SrlNokiaQos_Qos_Interfaces_Interface_InterfaceRef) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output represents the /srl_nokia-qos/qos/interfaces/interface/output YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output struct {
	BufferAllocationProfile *string                                                   `path:"buffer-allocation-profile" module:"srl_nokia-qos"`
	DscpReclassifyPolicy    *string                                                   `path:"dscp-reclassify-policy" module:"srl_nokia-qos"`
	InterfacePoolPolicy     *string                                                   `path:"interface-pool-policy" module:"srl_nokia-qos"`
	OutputClassMap          *string                                                   `path:"output-class-map" module:"srl_nokia-qos"`
	Queues                  *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues       `path:"queues" module:"srl_nokia-qos" yangPresence:"true"`
	RewriteRules            *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules `path:"rewrite-rules" module:"srl_nokia-qos" yangPresence:"true"`
	Scheduler               *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler    `path:"scheduler" module:"srl_nokia-qos" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output) IsYANGGoStruct() {}

// GetOrCreateQueues retrieves the value of the Queues field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetOrCreateQueues() *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues {
	if t.Queues != nil {
		return t.Queues
	}
	t.Queues = &SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues{}
	return t.Queues
}

// GetOrCreateRewriteRules retrieves the value of the RewriteRules field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetOrCreateRewriteRules() *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules {
	if t.RewriteRules != nil {
		return t.RewriteRules
	}
	t.RewriteRules = &SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules{}
	return t.RewriteRules
}

// GetOrCreateScheduler retrieves the value of the Scheduler field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetOrCreateScheduler() *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler {
	if t.Scheduler != nil {
		return t.Scheduler
	}
	t.Scheduler = &SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler{}
	return t.Scheduler
}

// GetQueues returns the value of the Queues struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Output. If the receiver or the field Queues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetQueues() *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues {
	if t != nil && t.Queues != nil {
		return t.Queues
	}
	return nil
}

// GetRewriteRules returns the value of the RewriteRules struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Output. If the receiver or the field RewriteRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetRewriteRules() *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules {
	if t != nil && t.RewriteRules != nil {
		return t.RewriteRules
	}
	return nil
}

// GetScheduler returns the value of the Scheduler struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Output. If the receiver or the field Scheduler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetScheduler() *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler {
	if t != nil && t.Scheduler != nil {
		return t.Scheduler
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the SrlNokiaQos_Qos_Interfaces_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetDscpReclassifyPolicy retrieves the value of the leaf DscpReclassifyPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpReclassifyPolicy is set, it can
// safely use t.GetDscpReclassifyPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpReclassifyPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetDscpReclassifyPolicy() string {
	if t == nil || t.DscpReclassifyPolicy == nil {
		return ""
	}
	return *t.DscpReclassifyPolicy
}

// GetInterfacePoolPolicy retrieves the value of the leaf InterfacePoolPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePoolPolicy is set, it can
// safely use t.GetInterfacePoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePoolPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetInterfacePoolPolicy() string {
	if t == nil || t.InterfacePoolPolicy == nil {
		return ""
	}
	return *t.InterfacePoolPolicy
}

// GetOutputClassMap retrieves the value of the leaf OutputClassMap from the SrlNokiaQos_Qos_Interfaces_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputClassMap is set, it can
// safely use t.GetOutputClassMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputClassMap == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) GetOutputClassMap() string {
	if t == nil || t.OutputClassMap == nil {
		return ""
	}
	return *t.OutputClassMap
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queues.PopulateDefaults()
	t.RewriteRules.PopulateDefaults()
	t.Scheduler.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues represents the /srl_nokia-qos/qos/interfaces/interface/output/queues YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues struct {
	Queue map[SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union]*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue `path:"queue" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) NewQueue(
	QueueName SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union,
) (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union]*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue)
	}

	key := QueueName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue{
		QueueName: QueueName,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) RenameQueue(
	oldK, newK SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union,
) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueName = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) GetOrCreateQueue(
	QueueName SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union,
) *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue {
	key := QueueName

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) GetQueue(
	QueueName SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union,
) *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue {
	if t == nil {
		return nil
	}

	key := QueueName

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) DeleteQueue(
	QueueName SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union,
) {
	key := QueueName

	delete(t.Queue, key)
}

// AppendQueue appends the supplied SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue struct to the
// list Queue of SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) AppendQueue(
	v *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue,
) error {
	key := v.QueueName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union]*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue represents the /srl_nokia-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue struct {
	QueueManagementProfile *string                                                                  `path:"queue-management-profile" module:"srl_nokia-qos"`
	QueueName              SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union `path:"queue-name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) IsYANGGoStruct() {}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetQueueName retrieves the value of the leaf QueueName from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueName is set, it can
// safely use t.GetQueueName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueName == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) GetQueueName() SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union {
	if t == nil || t.QueueName == nil {
		return nil
	}
	return t.QueueName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"queue-name": t.QueueName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules represents the /srl_nokia-qos/qos/interfaces/interface/output/rewrite-rules YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules struct {
	Dot1PPolicy            *string                                                               `path:"dot1p-policy" module:"srl_nokia-qos"`
	DscpPolicy             *string                                                               `path:"dscp-policy" module:"srl_nokia-qos"`
	DscpRewrite            *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite `path:"dscp-rewrite" module:"srl_nokia-qos" yangPresence:"true"`
	Ipv4DscpPolicy         *string                                                               `path:"ipv4-dscp-policy" module:"srl_nokia-qos"`
	Ipv6DscpPolicy         *string                                                               `path:"ipv6-dscp-policy" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy *string                                                               `path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
	QinqRewriteOuterOnly   *bool                                                                 `path:"qinq-rewrite-outer-only" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) IsYANGGoStruct() {}

// GetOrCreateDscpRewrite retrieves the value of the DscpRewrite field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetOrCreateDscpRewrite() *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite {
	if t.DscpRewrite != nil {
		return t.DscpRewrite
	}
	t.DscpRewrite = &SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite{}
	return t.DscpRewrite
}

// GetDscpRewrite returns the value of the DscpRewrite struct pointer
// from SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules. If the receiver or the field DscpRewrite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetDscpRewrite() *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite {
	if t != nil && t.DscpRewrite != nil {
		return t.DscpRewrite
	}
	return nil
}

// GetDot1PPolicy retrieves the value of the leaf Dot1PPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PPolicy is set, it can
// safely use t.GetDot1PPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetDot1PPolicy() string {
	if t == nil || t.Dot1PPolicy == nil {
		return ""
	}
	return *t.Dot1PPolicy
}

// GetDscpPolicy retrieves the value of the leaf DscpPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpPolicy is set, it can
// safely use t.GetDscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetDscpPolicy() string {
	if t == nil || t.DscpPolicy == nil {
		return ""
	}
	return *t.DscpPolicy
}

// GetIpv4DscpPolicy retrieves the value of the leaf Ipv4DscpPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4DscpPolicy is set, it can
// safely use t.GetIpv4DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetIpv4DscpPolicy() string {
	if t == nil || t.Ipv4DscpPolicy == nil {
		return ""
	}
	return *t.Ipv4DscpPolicy
}

// GetIpv6DscpPolicy retrieves the value of the leaf Ipv6DscpPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6DscpPolicy is set, it can
// safely use t.GetIpv6DscpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6DscpPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetIpv6DscpPolicy() string {
	if t == nil || t.Ipv6DscpPolicy == nil {
		return ""
	}
	return *t.Ipv6DscpPolicy
}

// GetMplsTrafficClassPolicy retrieves the value of the leaf MplsTrafficClassPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTrafficClassPolicy is set, it can
// safely use t.GetMplsTrafficClassPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTrafficClassPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetMplsTrafficClassPolicy() string {
	if t == nil || t.MplsTrafficClassPolicy == nil {
		return ""
	}
	return *t.MplsTrafficClassPolicy
}

// GetQinqRewriteOuterOnly retrieves the value of the leaf QinqRewriteOuterOnly from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqRewriteOuterOnly is set, it can
// safely use t.GetQinqRewriteOuterOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqRewriteOuterOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) GetQinqRewriteOuterOnly() bool {
	if t == nil || t.QinqRewriteOuterOnly == nil {
		return true
	}
	return *t.QinqRewriteOuterOnly
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqRewriteOuterOnly == nil {
		var v bool = true
		t.QinqRewriteOuterOnly = &v
	}
	t.DscpRewrite.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite represents the /srl_nokia-qos/qos/interfaces/interface/output/rewrite-rules/dscp-rewrite YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite struct {
	ForceRewriteTrusted *bool `path:"force-rewrite-trusted" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) IsYANGGoStruct() {}

// GetForceRewriteTrusted retrieves the value of the leaf ForceRewriteTrusted from the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceRewriteTrusted is set, it can
// safely use t.GetForceRewriteTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceRewriteTrusted == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) GetForceRewriteTrusted() bool {
	if t == nil || t.ForceRewriteTrusted == nil {
		return false
	}
	return *t.ForceRewriteTrusted
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceRewriteTrusted == nil {
		var v bool = false
		t.ForceRewriteTrusted = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_RewriteRules_DscpRewrite) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler represents the /srl_nokia-qos/qos/interfaces/interface/output/scheduler YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler struct {
	QueueSchedulingPolicy      *string                                                                            `path:"queue-scheduling-policy" module:"srl_nokia-qos"`
	SchedClassSchedulingPolicy *string                                                                            `path:"sched-class-scheduling-policy" module:"srl_nokia-qos"`
	SchedulerPolicy            *string                                                                            `path:"scheduler-policy" module:"srl_nokia-qos"`
	VirtualInterface           map[string]*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface `path:"virtual-interface" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) IsYANGGoStruct() {}

// NewVirtualInterface creates a new entry in the VirtualInterface list of the
// SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) NewVirtualInterface(Name string) (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualInterface == nil {
		t.VirtualInterface = make(map[string]*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualInterface", key)
	}

	t.VirtualInterface[key] = &SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface{
		Name: &Name,
	}

	return t.VirtualInterface[key], nil
}

// RenameVirtualInterface renames an entry in the list VirtualInterface within
// the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) RenameVirtualInterface(oldK, newK string) error {
	if _, ok := t.VirtualInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualInterface", newK)
	}

	e, ok := t.VirtualInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualInterface", oldK)
	}
	e.Name = &newK

	t.VirtualInterface[newK] = e
	delete(t.VirtualInterface, oldK)
	return nil
}

// GetOrCreateVirtualInterface retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) GetOrCreateVirtualInterface(
	Name string,
) *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface {
	key := Name

	if v, ok := t.VirtualInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualInterface got unexpected error: %v", err))
	}
	return v
}

// GetVirtualInterface retrieves the value with the specified key from
// the VirtualInterface map field of SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) GetVirtualInterface(Name string) *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.VirtualInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualInterface deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) DeleteVirtualInterface(Name string) {
	key := Name

	delete(t.VirtualInterface, key)
}

// AppendVirtualInterface appends the supplied SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface struct to the
// list VirtualInterface of SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) AppendVirtualInterface(
	v *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualInterface == nil {
		t.VirtualInterface = make(map[string]*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface)
	}

	if _, ok := t.VirtualInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualInterface %v", key)
	}

	t.VirtualInterface[key] = v
	return nil
}

// GetQueueSchedulingPolicy retrieves the value of the leaf QueueSchedulingPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueSchedulingPolicy is set, it can
// safely use t.GetQueueSchedulingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueSchedulingPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) GetQueueSchedulingPolicy() string {
	if t == nil || t.QueueSchedulingPolicy == nil {
		return ""
	}
	return *t.QueueSchedulingPolicy
}

// GetSchedClassSchedulingPolicy retrieves the value of the leaf SchedClassSchedulingPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClassSchedulingPolicy is set, it can
// safely use t.GetSchedClassSchedulingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClassSchedulingPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) GetSchedClassSchedulingPolicy() string {
	if t == nil || t.SchedClassSchedulingPolicy == nil {
		return ""
	}
	return *t.SchedClassSchedulingPolicy
}

// GetSchedulerPolicy retrieves the value of the leaf SchedulerPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerPolicy is set, it can
// safely use t.GetSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) GetSchedulerPolicy() string {
	if t == nil || t.SchedulerPolicy == nil {
		return ""
	}
	return *t.SchedulerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.VirtualInterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface represents the /srl_nokia-qos/qos/interfaces/interface/output/scheduler/virtual-interface YANG schema element.
type SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface struct {
	Name                       *string `path:"name" module:"srl_nokia-qos"`
	SchedClassSchedulingPolicy *string `path:"sched-class-scheduling-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSchedClassSchedulingPolicy retrieves the value of the leaf SchedClassSchedulingPolicy from the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedClassSchedulingPolicy is set, it can
// safely use t.GetSchedClassSchedulingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedClassSchedulingPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) GetSchedClassSchedulingPolicy() string {
	if t == nil || t.SchedClassSchedulingPolicy == nil {
		return ""
	}
	return *t.SchedClassSchedulingPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface.
func (*SrlNokiaQos_Qos_Interfaces_Interface_Output_Scheduler_VirtualInterface) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_OutputClassMap represents the /srl_nokia-qos/qos/output-class-map YANG schema element.
type SrlNokiaQos_Qos_OutputClassMap struct {
	ForwardingClass map[SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union]*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass `path:"forwarding-class" module:"srl_nokia-qos"`
	Name            *string                                                                                                       `path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_OutputClassMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_OutputClassMap) IsYANGGoStruct() {}

// NewForwardingClass creates a new entry in the ForwardingClass list of the
// SrlNokiaQos_Qos_OutputClassMap struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_OutputClassMap) NewForwardingClass(
	Name SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union,
) (*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union]*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingClass", key)
	}

	t.ForwardingClass[key] = &SrlNokiaQos_Qos_OutputClassMap_ForwardingClass{
		Name: Name,
	}

	return t.ForwardingClass[key], nil
}

// RenameForwardingClass renames an entry in the list ForwardingClass within
// the SrlNokiaQos_Qos_OutputClassMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_OutputClassMap) RenameForwardingClass(
	oldK, newK SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union,
) error {
	if _, ok := t.ForwardingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingClass", newK)
	}

	e, ok := t.ForwardingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingClass", oldK)
	}
	e.Name = newK

	t.ForwardingClass[newK] = e
	delete(t.ForwardingClass, oldK)
	return nil
}

// GetOrCreateForwardingClass retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_OutputClassMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_OutputClassMap) GetOrCreateForwardingClass(
	Name SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union,
) *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass {
	key := Name

	if v, ok := t.ForwardingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingClass(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingClass got unexpected error: %v", err))
	}
	return v
}

// GetForwardingClass retrieves the value with the specified key from
// the ForwardingClass map field of SrlNokiaQos_Qos_OutputClassMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_OutputClassMap) GetForwardingClass(
	Name SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union,
) *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingClass deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_OutputClassMap. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_OutputClassMap) DeleteForwardingClass(
	Name SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union,
) {
	key := Name

	delete(t.ForwardingClass, key)
}

// AppendForwardingClass appends the supplied SrlNokiaQos_Qos_OutputClassMap_ForwardingClass struct to the
// list ForwardingClass of SrlNokiaQos_Qos_OutputClassMap. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_OutputClassMap_ForwardingClass already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_OutputClassMap) AppendForwardingClass(v *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union]*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass)
	}

	if _, ok := t.ForwardingClass[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingClass %v", key)
	}

	t.ForwardingClass[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_OutputClassMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_OutputClassMap) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_OutputClassMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_OutputClassMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ForwardingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_OutputClassMap struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_OutputClassMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_OutputClassMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_OutputClassMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_OutputClassMap) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_OutputClassMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_OutputClassMap.
func (*SrlNokiaQos_Qos_OutputClassMap) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_OutputClassMap_ForwardingClass represents the /srl_nokia-qos/qos/output-class-map/forwarding-class YANG schema element.
type SrlNokiaQos_Qos_OutputClassMap_ForwardingClass struct {
	Name        SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union `path:"name" module:"srl_nokia-qos"`
	Queue       *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue     `path:"queue" module:"srl_nokia-qos"`
	SlopePolicy *string                                                   `path:"slope-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_OutputClassMap_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) IsYANGGoStruct() {}

// GetOrCreateQueue retrieves the value of the Queue field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) GetOrCreateQueue() *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue {
	if t.Queue != nil {
		return t.Queue
	}
	t.Queue = &SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue{}
	return t.Queue
}

// GetQueue returns the value of the Queue struct pointer
// from SrlNokiaQos_Qos_OutputClassMap_ForwardingClass. If the receiver or the field Queue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) GetQueue() *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue {
	if t != nil && t.Queue != nil {
		return t.Queue
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) GetName() SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queue.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_OutputClassMap_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_OutputClassMap_ForwardingClass.
func (*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue represents the /srl_nokia-qos/qos/output-class-map/forwarding-class/queue YANG schema element.
type SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue struct {
	InterfacePool *uint8                                                            `path:"interface-pool" module:"srl_nokia-qos"`
	Name          SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union   `path:"name" module:"srl_nokia-qos"`
	ReDirectTo    E_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_ReDirectTo `path:"re-direct-to" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) IsYANGGoStruct() {}

// GetInterfacePool retrieves the value of the leaf InterfacePool from the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePool is set, it can
// safely use t.GetInterfacePool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePool == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) GetInterfacePool() uint8 {
	if t == nil || t.InterfacePool == nil {
		return 0
	}
	return *t.InterfacePool
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) GetName() SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// GetReDirectTo retrieves the value of the leaf ReDirectTo from the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReDirectTo is set, it can
// safely use t.GetReDirectTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReDirectTo == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) GetReDirectTo() E_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_ReDirectTo {
	if t == nil || t.ReDirectTo == 0 {
		return 0
	}
	return t.ReDirectTo
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue.
func (*SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies represents the /srl_nokia-qos/qos/policer-policies YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies struct {
	ParentPolicerThresholdPolicy map[string]*SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy `path:"parent-policer-threshold-policy" module:"srl_nokia-qos"`
	PolicerPolicy                map[string]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy                `path:"policer-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies) IsYANGGoStruct() {}

// NewParentPolicerThresholdPolicy creates a new entry in the ParentPolicerThresholdPolicy list of the
// SrlNokiaQos_Qos_PolicerPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerPolicies) NewParentPolicerThresholdPolicy(Name string) (*SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ParentPolicerThresholdPolicy == nil {
		t.ParentPolicerThresholdPolicy = make(map[string]*SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ParentPolicerThresholdPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ParentPolicerThresholdPolicy", key)
	}

	t.ParentPolicerThresholdPolicy[key] = &SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy{
		Name: &Name,
	}

	return t.ParentPolicerThresholdPolicy[key], nil
}

// RenameParentPolicerThresholdPolicy renames an entry in the list ParentPolicerThresholdPolicy within
// the SrlNokiaQos_Qos_PolicerPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerPolicies) RenameParentPolicerThresholdPolicy(oldK, newK string) error {
	if _, ok := t.ParentPolicerThresholdPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ParentPolicerThresholdPolicy", newK)
	}

	e, ok := t.ParentPolicerThresholdPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ParentPolicerThresholdPolicy", oldK)
	}
	e.Name = &newK

	t.ParentPolicerThresholdPolicy[newK] = e
	delete(t.ParentPolicerThresholdPolicy, oldK)
	return nil
}

// GetOrCreateParentPolicerThresholdPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerPolicies) GetOrCreateParentPolicerThresholdPolicy(Name string) *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy {
	key := Name

	if v, ok := t.ParentPolicerThresholdPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewParentPolicerThresholdPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateParentPolicerThresholdPolicy got unexpected error: %v", err))
	}
	return v
}

// GetParentPolicerThresholdPolicy retrieves the value with the specified key from
// the ParentPolicerThresholdPolicy map field of SrlNokiaQos_Qos_PolicerPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies) GetParentPolicerThresholdPolicy(Name string) *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ParentPolicerThresholdPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteParentPolicerThresholdPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerPolicies) DeleteParentPolicerThresholdPolicy(Name string) {
	key := Name

	delete(t.ParentPolicerThresholdPolicy, key)
}

// AppendParentPolicerThresholdPolicy appends the supplied SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy struct to the
// list ParentPolicerThresholdPolicy of SrlNokiaQos_Qos_PolicerPolicies. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerPolicies) AppendParentPolicerThresholdPolicy(
	v *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ParentPolicerThresholdPolicy == nil {
		t.ParentPolicerThresholdPolicy = make(map[string]*SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy)
	}

	if _, ok := t.ParentPolicerThresholdPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ParentPolicerThresholdPolicy %v", key)
	}

	t.ParentPolicerThresholdPolicy[key] = v
	return nil
}

// NewPolicerPolicy creates a new entry in the PolicerPolicy list of the
// SrlNokiaQos_Qos_PolicerPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerPolicies) NewPolicerPolicy(Name string) (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerPolicy == nil {
		t.PolicerPolicy = make(map[string]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicerPolicy", key)
	}

	t.PolicerPolicy[key] = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy{
		Name: &Name,
	}

	return t.PolicerPolicy[key], nil
}

// RenamePolicerPolicy renames an entry in the list PolicerPolicy within
// the SrlNokiaQos_Qos_PolicerPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerPolicies) RenamePolicerPolicy(oldK, newK string) error {
	if _, ok := t.PolicerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicerPolicy", newK)
	}

	e, ok := t.PolicerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicerPolicy", oldK)
	}
	e.Name = &newK

	t.PolicerPolicy[newK] = e
	delete(t.PolicerPolicy, oldK)
	return nil
}

// GetOrCreatePolicerPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerPolicies) GetOrCreatePolicerPolicy(Name string) *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy {
	key := Name

	if v, ok := t.PolicerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicerPolicy retrieves the value with the specified key from
// the PolicerPolicy map field of SrlNokiaQos_Qos_PolicerPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies) GetPolicerPolicy(Name string) *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicerPolicy deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerPolicies) DeletePolicerPolicy(Name string) {
	key := Name

	delete(t.PolicerPolicy, key)
}

// AppendPolicerPolicy appends the supplied SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy struct to the
// list PolicerPolicy of SrlNokiaQos_Qos_PolicerPolicies. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerPolicies) AppendPolicerPolicy(v *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerPolicy == nil {
		t.PolicerPolicy = make(map[string]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy)
	}

	if _, ok := t.PolicerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PolicerPolicy %v", key)
	}

	t.PolicerPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ParentPolicerThresholdPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PolicerPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies.
func (*SrlNokiaQos_Qos_PolicerPolicies) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy represents the /srl_nokia-qos/qos/policer-policies/parent-policer-threshold-policy YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy struct {
	Name                *string `path:"name" module:"srl_nokia-qos"`
	ThresholdSeparation *uint32 `path:"threshold-separation" module:"srl_nokia-qos"`
	UnfairOffset        *uint32 `path:"unfair-offset" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetThresholdSeparation retrieves the value of the leaf ThresholdSeparation from the SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdSeparation is set, it can
// safely use t.GetThresholdSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdSeparation == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) GetThresholdSeparation() uint32 {
	if t == nil || t.ThresholdSeparation == nil {
		return 18000
	}
	return *t.ThresholdSeparation
}

// GetUnfairOffset retrieves the value of the leaf UnfairOffset from the SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnfairOffset is set, it can
// safely use t.GetUnfairOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnfairOffset == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) GetUnfairOffset() uint32 {
	if t == nil || t.UnfairOffset == nil {
		return 9000
	}
	return *t.UnfairOffset
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ThresholdSeparation == nil {
		var v uint32 = 18000
		t.ThresholdSeparation = &v
	}
	if t.UnfairOffset == nil {
		var v uint32 = 9000
		t.UnfairOffset = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy.
func (*SrlNokiaQos_Qos_PolicerPolicies_ParentPolicerThresholdPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy represents the /srl_nokia-qos/qos/policer-policies/policer-policy YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy struct {
	Name          *string                                                          `path:"name" module:"srl_nokia-qos"`
	ParentPolicer *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer     `path:"parent-policer" module:"srl_nokia-qos"`
	Policer       map[uint8]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer `path:"policer" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) NewPolicer(PolicerId uint8) (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint8]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) RenamePolicer(oldK, newK uint8) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) GetOrCreatePolicer(PolicerId uint8) *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer {
	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) GetPolicer(PolicerId uint8) *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer {
	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) DeletePolicer(PolicerId uint8) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer struct to the
// list Policer of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) AppendPolicer(
	v *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer,
) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint8]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// GetOrCreateParentPolicer retrieves the value of the ParentPolicer field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) GetOrCreateParentPolicer() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer {
	if t.ParentPolicer != nil {
		return t.ParentPolicer
	}
	t.ParentPolicer = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer{}
	return t.ParentPolicer
}

// GetParentPolicer returns the value of the ParentPolicer struct pointer
// from SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy. If the receiver or the field ParentPolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) GetParentPolicer() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer {
	if t != nil && t.ParentPolicer != nil {
		return t.ParentPolicer
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ParentPolicer.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer represents the /srl_nokia-qos/qos/policer-policies/policer-policy/parent-policer YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer struct {
	Inputs                       *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs `path:"inputs" module:"srl_nokia-qos"`
	ParentPolicerThresholdPolicy *string                                                             `path:"parent-policer-threshold-policy" module:"srl_nokia-qos"`
	Rate                         *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate   `path:"rate" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) IsYANGGoStruct() {}

// GetOrCreateInputs retrieves the value of the Inputs field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) GetOrCreateInputs() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs {
	if t.Inputs != nil {
		return t.Inputs
	}
	t.Inputs = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs{}
	return t.Inputs
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) GetOrCreateRate() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate{}
	return t.Rate
}

// GetInputs returns the value of the Inputs struct pointer
// from SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer. If the receiver or the field Inputs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) GetInputs() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs {
	if t != nil && t.Inputs != nil {
		return t.Inputs
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) GetRate() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetParentPolicerThresholdPolicy retrieves the value of the leaf ParentPolicerThresholdPolicy from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentPolicerThresholdPolicy is set, it can
// safely use t.GetParentPolicerThresholdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentPolicerThresholdPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) GetParentPolicerThresholdPolicy() string {
	if t == nil || t.ParentPolicerThresholdPolicy == nil {
		return ""
	}
	return *t.ParentPolicerThresholdPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inputs.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs represents the /srl_nokia-qos/qos/policer-policies/policer-policy/parent-policer/inputs YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs struct {
	Policer map[uint8]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer `path:"policer" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) NewPolicer(
	PolicerId uint8,
) (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint8]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) RenamePolicer(oldK, newK uint8) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) GetOrCreatePolicer(
	PolicerId uint8,
) *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer {
	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) GetPolicer(
	PolicerId uint8,
) *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer {
	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) DeletePolicer(PolicerId uint8) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer struct to the
// list Policer of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) AppendPolicer(
	v *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer,
) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint8]*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer represents the /srl_nokia-qos/qos/policer-policies/policer-policy/parent-policer/inputs/policer YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer struct {
	PolicerId     *uint8 `path:"policer-id" module:"srl_nokia-qos"`
	PriorityLevel *uint8 `path:"priority-level" module:"srl_nokia-qos"`
	Weight        *uint8 `path:"weight" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) IsYANGGoStruct() {}

// GetPolicerId retrieves the value of the leaf PolicerId from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) GetPolicerId() uint8 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// GetWeight retrieves the value of the leaf Weight from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) GetWeight() uint8 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PriorityLevel == nil {
		var v uint8 = 0
		t.PriorityLevel = &v
	}
	if t.Weight == nil {
		var v uint8 = 1
		t.Weight = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Inputs_Policer) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate represents the /srl_nokia-qos/qos/policer-policies/policer-policy/parent-policer/rate YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate struct {
	AdaptationRule E_SrlNokiaCommon_AdaptationRule `path:"adaptation-rule" module:"srl_nokia-qos"`
	PeakRateKbps   *uint32                         `path:"peak-rate-kbps" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) IsYANGGoStruct() {}

// GetAdaptationRule retrieves the value of the leaf AdaptationRule from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdaptationRule is set, it can
// safely use t.GetAdaptationRule() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdaptationRule == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) GetAdaptationRule() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.AdaptationRule == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.AdaptationRule
}

// GetPeakRateKbps retrieves the value of the leaf PeakRateKbps from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRateKbps is set, it can
// safely use t.GetPeakRateKbps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRateKbps == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) GetPeakRateKbps() uint32 {
	if t == nil || t.PeakRateKbps == nil {
		return 0
	}
	return *t.PeakRateKbps
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdaptationRule == 0 {
		t.AdaptationRule = SrlNokiaCommon_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_ParentPolicer_Rate) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer represents the /srl_nokia-qos/qos/policer-policies/policer-policy/policer YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer struct {
	AdaptationRules        *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules        `path:"adaptation-rules" module:"srl_nokia-qos"`
	AlgorithmType          E_SrlNokiaQosPolicers_PolicerAlgorithmType                                    `path:"algorithm-type" module:"srl_nokia-qos"`
	CommittedBurstSize     *uint32                                                                       `path:"committed-burst-size" module:"srl_nokia-qos"`
	CommittedRateKbps      *uint32                                                                       `path:"committed-rate-kbps" module:"srl_nokia-qos"`
	ExcessBurstSize        *uint32                                                                       `path:"excess-burst-size" module:"srl_nokia-qos"`
	ExcessRateKbps         *uint32                                                                       `path:"excess-rate-kbps" module:"srl_nokia-qos"`
	MaximumBurstSize       *uint32                                                                       `path:"maximum-burst-size" module:"srl_nokia-qos"`
	PacketLengthAdjustment *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment `path:"packet-length-adjustment" module:"srl_nokia-qos"`
	PeakRateKbps           *uint32                                                                       `path:"peak-rate-kbps" module:"srl_nokia-qos"`
	PirThresholdSeparation *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation `path:"pir-threshold-separation" module:"srl_nokia-qos"`
	PolicerId              *uint8                                                                        `path:"policer-id" module:"srl_nokia-qos"`
	StatisticsMode         E_SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_StatisticsMode        `path:"statistics-mode" module:"srl_nokia-qos"`
	ViolateAction          E_SrlNokiaQosPolicers_ViolateAction                                           `path:"violate-action" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) IsYANGGoStruct() {}

// GetOrCreateAdaptationRules retrieves the value of the AdaptationRules field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetOrCreateAdaptationRules() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules {
	if t.AdaptationRules != nil {
		return t.AdaptationRules
	}
	t.AdaptationRules = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules{}
	return t.AdaptationRules
}

// GetOrCreatePacketLengthAdjustment retrieves the value of the PacketLengthAdjustment field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetOrCreatePacketLengthAdjustment() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment {
	if t.PacketLengthAdjustment != nil {
		return t.PacketLengthAdjustment
	}
	t.PacketLengthAdjustment = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment{}
	return t.PacketLengthAdjustment
}

// GetOrCreatePirThresholdSeparation retrieves the value of the PirThresholdSeparation field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetOrCreatePirThresholdSeparation() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation {
	if t.PirThresholdSeparation != nil {
		return t.PirThresholdSeparation
	}
	t.PirThresholdSeparation = &SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation{}
	return t.PirThresholdSeparation
}

// GetAdaptationRules returns the value of the AdaptationRules struct pointer
// from SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer. If the receiver or the field AdaptationRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetAdaptationRules() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules {
	if t != nil && t.AdaptationRules != nil {
		return t.AdaptationRules
	}
	return nil
}

// GetPacketLengthAdjustment returns the value of the PacketLengthAdjustment struct pointer
// from SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer. If the receiver or the field PacketLengthAdjustment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetPacketLengthAdjustment() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment {
	if t != nil && t.PacketLengthAdjustment != nil {
		return t.PacketLengthAdjustment
	}
	return nil
}

// GetPirThresholdSeparation returns the value of the PirThresholdSeparation struct pointer
// from SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer. If the receiver or the field PirThresholdSeparation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetPirThresholdSeparation() *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation {
	if t != nil && t.PirThresholdSeparation != nil {
		return t.PirThresholdSeparation
	}
	return nil
}

// GetAlgorithmType retrieves the value of the leaf AlgorithmType from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlgorithmType is set, it can
// safely use t.GetAlgorithmType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlgorithmType == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetAlgorithmType() E_SrlNokiaQosPolicers_PolicerAlgorithmType {
	if t == nil || t.AlgorithmType == 0 {
		return SrlNokiaQosPolicers_PolicerAlgorithmType_trtcm2
	}
	return t.AlgorithmType
}

// GetCommittedBurstSize retrieves the value of the leaf CommittedBurstSize from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedBurstSize is set, it can
// safely use t.GetCommittedBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetCommittedBurstSize() uint32 {
	if t == nil || t.CommittedBurstSize == nil {
		return 40000
	}
	return *t.CommittedBurstSize
}

// GetCommittedRateKbps retrieves the value of the leaf CommittedRateKbps from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedRateKbps is set, it can
// safely use t.GetCommittedRateKbps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedRateKbps == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetCommittedRateKbps() uint32 {
	if t == nil || t.CommittedRateKbps == nil {
		return 64
	}
	return *t.CommittedRateKbps
}

// GetExcessBurstSize retrieves the value of the leaf ExcessBurstSize from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcessBurstSize is set, it can
// safely use t.GetExcessBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcessBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetExcessBurstSize() uint32 {
	if t == nil || t.ExcessBurstSize == nil {
		return 40000
	}
	return *t.ExcessBurstSize
}

// GetExcessRateKbps retrieves the value of the leaf ExcessRateKbps from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcessRateKbps is set, it can
// safely use t.GetExcessRateKbps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcessRateKbps == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetExcessRateKbps() uint32 {
	if t == nil || t.ExcessRateKbps == nil {
		return 64
	}
	return *t.ExcessRateKbps
}

// GetMaximumBurstSize retrieves the value of the leaf MaximumBurstSize from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumBurstSize is set, it can
// safely use t.GetMaximumBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetMaximumBurstSize() uint32 {
	if t == nil || t.MaximumBurstSize == nil {
		return 40000
	}
	return *t.MaximumBurstSize
}

// GetPeakRateKbps retrieves the value of the leaf PeakRateKbps from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRateKbps is set, it can
// safely use t.GetPeakRateKbps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRateKbps == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetPeakRateKbps() uint32 {
	if t == nil || t.PeakRateKbps == nil {
		return 64
	}
	return *t.PeakRateKbps
}

// GetPolicerId retrieves the value of the leaf PolicerId from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetPolicerId() uint8 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatisticsMode retrieves the value of the leaf StatisticsMode from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatisticsMode is set, it can
// safely use t.GetStatisticsMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatisticsMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetStatisticsMode() E_SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_StatisticsMode {
	if t == nil || t.StatisticsMode == 0 {
		return SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_StatisticsMode_minimal
	}
	return t.StatisticsMode
}

// GetViolateAction retrieves the value of the leaf ViolateAction from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolateAction is set, it can
// safely use t.GetViolateAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolateAction == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) GetViolateAction() E_SrlNokiaQosPolicers_ViolateAction {
	if t == nil || t.ViolateAction == 0 {
		return SrlNokiaQosPolicers_ViolateAction_drop
	}
	return t.ViolateAction
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlgorithmType == 0 {
		t.AlgorithmType = SrlNokiaQosPolicers_PolicerAlgorithmType_trtcm2
	}
	if t.CommittedBurstSize == nil {
		var v uint32 = 40000
		t.CommittedBurstSize = &v
	}
	if t.CommittedRateKbps == nil {
		var v uint32 = 64
		t.CommittedRateKbps = &v
	}
	if t.ExcessBurstSize == nil {
		var v uint32 = 40000
		t.ExcessBurstSize = &v
	}
	if t.ExcessRateKbps == nil {
		var v uint32 = 64
		t.ExcessRateKbps = &v
	}
	if t.MaximumBurstSize == nil {
		var v uint32 = 40000
		t.MaximumBurstSize = &v
	}
	if t.PeakRateKbps == nil {
		var v uint32 = 64
		t.PeakRateKbps = &v
	}
	if t.StatisticsMode == 0 {
		t.StatisticsMode = SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_StatisticsMode_minimal
	}
	if t.ViolateAction == 0 {
		t.ViolateAction = SrlNokiaQosPolicers_ViolateAction_drop
	}
	t.AdaptationRules.PopulateDefaults()
	t.PacketLengthAdjustment.PopulateDefaults()
	t.PirThresholdSeparation.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules represents the /srl_nokia-qos/qos/policer-policies/policer-policy/policer/adaptation-rules YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules struct {
	CommittedBurstSize E_SrlNokiaCommon_AdaptationRule `path:"committed-burst-size" module:"srl_nokia-qos"`
	CommittedRate      E_SrlNokiaCommon_AdaptationRule `path:"committed-rate" module:"srl_nokia-qos"`
	ExcessBurstSize    E_SrlNokiaCommon_AdaptationRule `path:"excess-burst-size" module:"srl_nokia-qos"`
	ExcessRate         E_SrlNokiaCommon_AdaptationRule `path:"excess-rate" module:"srl_nokia-qos"`
	MaximumBurstSize   E_SrlNokiaCommon_AdaptationRule `path:"maximum-burst-size" module:"srl_nokia-qos"`
	PeakRate           E_SrlNokiaCommon_AdaptationRule `path:"peak-rate" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) IsYANGGoStruct() {}

// GetCommittedBurstSize retrieves the value of the leaf CommittedBurstSize from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedBurstSize is set, it can
// safely use t.GetCommittedBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) GetCommittedBurstSize() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.CommittedBurstSize == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.CommittedBurstSize
}

// GetCommittedRate retrieves the value of the leaf CommittedRate from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedRate is set, it can
// safely use t.GetCommittedRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) GetCommittedRate() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.CommittedRate == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.CommittedRate
}

// GetExcessBurstSize retrieves the value of the leaf ExcessBurstSize from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcessBurstSize is set, it can
// safely use t.GetExcessBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcessBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) GetExcessBurstSize() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.ExcessBurstSize == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.ExcessBurstSize
}

// GetExcessRate retrieves the value of the leaf ExcessRate from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcessRate is set, it can
// safely use t.GetExcessRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcessRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) GetExcessRate() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.ExcessRate == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.ExcessRate
}

// GetMaximumBurstSize retrieves the value of the leaf MaximumBurstSize from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumBurstSize is set, it can
// safely use t.GetMaximumBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) GetMaximumBurstSize() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.MaximumBurstSize == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.MaximumBurstSize
}

// GetPeakRate retrieves the value of the leaf PeakRate from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRate is set, it can
// safely use t.GetPeakRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) GetPeakRate() E_SrlNokiaCommon_AdaptationRule {
	if t == nil || t.PeakRate == 0 {
		return SrlNokiaCommon_AdaptationRule_closest
	}
	return t.PeakRate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CommittedBurstSize == 0 {
		t.CommittedBurstSize = SrlNokiaCommon_AdaptationRule_closest
	}
	if t.CommittedRate == 0 {
		t.CommittedRate = SrlNokiaCommon_AdaptationRule_closest
	}
	if t.ExcessBurstSize == 0 {
		t.ExcessBurstSize = SrlNokiaCommon_AdaptationRule_closest
	}
	if t.ExcessRate == 0 {
		t.ExcessRate = SrlNokiaCommon_AdaptationRule_closest
	}
	if t.MaximumBurstSize == 0 {
		t.MaximumBurstSize = SrlNokiaCommon_AdaptationRule_closest
	}
	if t.PeakRate == 0 {
		t.PeakRate = SrlNokiaCommon_AdaptationRule_closest
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_AdaptationRules) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment represents the /srl_nokia-qos/qos/policer-policies/policer-policy/policer/packet-length-adjustment YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment struct {
	Add      *uint32 `path:"add" module:"srl_nokia-qos"`
	Subtract *uint32 `path:"subtract" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) GetAdd() uint32 {
	if t == nil || t.Add == nil {
		return 0
	}
	return *t.Add
}

// GetSubtract retrieves the value of the leaf Subtract from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) GetSubtract() uint32 {
	if t == nil || t.Subtract == nil {
		return 0
	}
	return *t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PacketLengthAdjustment) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation represents the /srl_nokia-qos/qos/policer-policies/policer-policy/policer/pir-threshold-separation YANG schema element.
type SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation struct {
	InplusSeparated *bool `path:"inplus-separated" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) IsYANGGoStruct() {
}

// GetInplusSeparated retrieves the value of the leaf InplusSeparated from the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InplusSeparated is set, it can
// safely use t.GetInplusSeparated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InplusSeparated == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) GetInplusSeparated() bool {
	if t == nil || t.InplusSeparated == nil {
		return false
	}
	return *t.InplusSeparated
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InplusSeparated == nil {
		var v bool = false
		t.InplusSeparated = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation.
func (*SrlNokiaQos_Qos_PolicerPolicies_PolicerPolicy_Policer_PirThresholdSeparation) ΛBelongingModule() string {
	return "srl_nokia-qos"
}

// SrlNokiaQos_Qos_PolicerTemplates represents the /srl_nokia-qos/qos/policer-templates YANG schema element.
type SrlNokiaQos_Qos_PolicerTemplates struct {
	PolicerTemplate map[string]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate `path:"policer-template" module:"srl_nokia-acl-policers"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerTemplates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerTemplates) IsYANGGoStruct() {}

// NewPolicerTemplate creates a new entry in the PolicerTemplate list of the
// SrlNokiaQos_Qos_PolicerTemplates struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerTemplates) NewPolicerTemplate(Name string) (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerTemplate == nil {
		t.PolicerTemplate = make(map[string]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicerTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicerTemplate", key)
	}

	t.PolicerTemplate[key] = &SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate{
		Name: &Name,
	}

	return t.PolicerTemplate[key], nil
}

// RenamePolicerTemplate renames an entry in the list PolicerTemplate within
// the SrlNokiaQos_Qos_PolicerTemplates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerTemplates) RenamePolicerTemplate(oldK, newK string) error {
	if _, ok := t.PolicerTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicerTemplate", newK)
	}

	e, ok := t.PolicerTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicerTemplate", oldK)
	}
	e.Name = &newK

	t.PolicerTemplate[newK] = e
	delete(t.PolicerTemplate, oldK)
	return nil
}

// GetOrCreatePolicerTemplate retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerTemplates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerTemplates) GetOrCreatePolicerTemplate(Name string) *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate {
	key := Name

	if v, ok := t.PolicerTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicerTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicerTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPolicerTemplate retrieves the value with the specified key from
// the PolicerTemplate map field of SrlNokiaQos_Qos_PolicerTemplates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerTemplates) GetPolicerTemplate(Name string) *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicerTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicerTemplate deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerTemplates. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerTemplates) DeletePolicerTemplate(Name string) {
	key := Name

	delete(t.PolicerTemplate, key)
}

// AppendPolicerTemplate appends the supplied SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate struct to the
// list PolicerTemplate of SrlNokiaQos_Qos_PolicerTemplates. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerTemplates) AppendPolicerTemplate(
	v *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicerTemplate == nil {
		t.PolicerTemplate = make(map[string]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate)
	}

	if _, ok := t.PolicerTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PolicerTemplate %v", key)
	}

	t.PolicerTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerTemplates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerTemplates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicerTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerTemplates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerTemplates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerTemplates) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerTemplates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerTemplates.
func (*SrlNokiaQos_Qos_PolicerTemplates) ΛBelongingModule() string {
	return "srl_nokia-acl-policers"
}

// SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate represents the /srl_nokia-qos/qos/policer-templates/policer-template YANG schema element.
type SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate struct {
	Name           *string                                                              `path:"name" module:"srl_nokia-acl-policers"`
	Policer        map[uint32]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer `path:"policer" module:"srl_nokia-acl-policers"`
	StatisticsMode E_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_StatisticsMode    `path:"statistics-mode" module:"srl_nokia-acl-policers"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) NewPolicer(SequenceId uint32) (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint32]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer{
		SequenceId: &SequenceId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) RenamePolicer(oldK, newK uint32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.SequenceId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) GetOrCreatePolicer(SequenceId uint32) *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer {
	key := SequenceId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) GetPolicer(SequenceId uint32) *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) DeletePolicer(SequenceId uint32) {
	key := SequenceId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer struct to the
// list Policer of SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) AppendPolicer(
	v *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer,
) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[uint32]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatisticsMode retrieves the value of the leaf StatisticsMode from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatisticsMode is set, it can
// safely use t.GetStatisticsMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatisticsMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) GetStatisticsMode() E_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_StatisticsMode {
	if t == nil || t.StatisticsMode == 0 {
		return SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_StatisticsMode_violating_focus
	}
	return t.StatisticsMode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StatisticsMode == 0 {
		t.StatisticsMode = SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_StatisticsMode_violating_focus
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate.
func (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate) ΛBelongingModule() string {
	return "srl_nokia-acl-policers"
}

// SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer represents the /srl_nokia-qos/qos/policer-templates/policer-template/policer YANG schema element.
type SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer struct {
	CommittedBurstSize *uint32                                                                                                                                                         `path:"committed-burst-size" module:"srl_nokia-acl-policers"`
	CommittedRateKbps  *uint32                                                                                                                                                         `path:"committed-rate-kbps" module:"srl_nokia-acl-policers"`
	ExceedAction       *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ExceedAction                                                                                          `path:"exceed-action" module:"srl_nokia-acl-policers"`
	ForwardingClass    map[SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass `path:"forwarding-class" module:"srl_nokia-acl-policers"`
	MaximumBurstSize   *uint32                                                                                                                                                         `path:"maximum-burst-size" module:"srl_nokia-acl-policers"`
	PeakRateKbps       *uint32                                                                                                                                                         `path:"peak-rate-kbps" module:"srl_nokia-acl-policers"`
	SequenceId         *uint32                                                                                                                                                         `path:"sequence-id" module:"srl_nokia-acl-policers"`
	ViolateAction      *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ViolateAction                                                                                         `path:"violate-action" module:"srl_nokia-acl-policers"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) IsYANGGoStruct() {}

// NewForwardingClass creates a new entry in the ForwardingClass list of the
// SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) NewForwardingClass(
	Fc SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union,
) (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass)
	}

	key := Fc

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingClass", key)
	}

	t.ForwardingClass[key] = &SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass{
		Fc: Fc,
	}

	return t.ForwardingClass[key], nil
}

// RenameForwardingClass renames an entry in the list ForwardingClass within
// the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) RenameForwardingClass(
	oldK, newK SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union,
) error {
	if _, ok := t.ForwardingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingClass", newK)
	}

	e, ok := t.ForwardingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingClass", oldK)
	}
	e.Fc = newK

	t.ForwardingClass[newK] = e
	delete(t.ForwardingClass, oldK)
	return nil
}

// GetOrCreateForwardingClass retrieves the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetOrCreateForwardingClass(
	Fc SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union,
) *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass {
	key := Fc

	if v, ok := t.ForwardingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingClass(Fc)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingClass got unexpected error: %v", err))
	}
	return v
}

// GetForwardingClass retrieves the value with the specified key from
// the ForwardingClass map field of SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetForwardingClass(
	Fc SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union,
) *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass {
	if t == nil {
		return nil
	}

	key := Fc

	if lm, ok := t.ForwardingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingClass deletes the value with the specified keys from
// the receiver SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) DeleteForwardingClass(
	Fc SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union,
) {
	key := Fc

	delete(t.ForwardingClass, key)
}

// AppendForwardingClass appends the supplied SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass struct to the
// list ForwardingClass of SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer. If the key value(s) specified in
// the supplied SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass already exist in the list, an error is
// returned.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) AppendForwardingClass(
	v *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass,
) error {
	key := v.Fc

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingClass == nil {
		t.ForwardingClass = make(map[SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union]*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass)
	}

	if _, ok := t.ForwardingClass[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingClass %v", key)
	}

	t.ForwardingClass[key] = v
	return nil
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetOrCreateExceedAction() *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateViolateAction retrieves the value of the ViolateAction field
// or returns the existing field if it already exists.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetOrCreateViolateAction() *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ViolateAction {
	if t.ViolateAction != nil {
		return t.ViolateAction
	}
	t.ViolateAction = &SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ViolateAction{}
	return t.ViolateAction
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetExceedAction() *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetViolateAction returns the value of the ViolateAction struct pointer
// from SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer. If the receiver or the field ViolateAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetViolateAction() *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ViolateAction {
	if t != nil && t.ViolateAction != nil {
		return t.ViolateAction
	}
	return nil
}

// GetCommittedBurstSize retrieves the value of the leaf CommittedBurstSize from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedBurstSize is set, it can
// safely use t.GetCommittedBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetCommittedBurstSize() uint32 {
	if t == nil || t.CommittedBurstSize == nil {
		return 0
	}
	return *t.CommittedBurstSize
}

// GetCommittedRateKbps retrieves the value of the leaf CommittedRateKbps from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommittedRateKbps is set, it can
// safely use t.GetCommittedRateKbps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommittedRateKbps == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetCommittedRateKbps() uint32 {
	if t == nil || t.CommittedRateKbps == nil {
		return 0
	}
	return *t.CommittedRateKbps
}

// GetMaximumBurstSize retrieves the value of the leaf MaximumBurstSize from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumBurstSize is set, it can
// safely use t.GetMaximumBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumBurstSize == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetMaximumBurstSize() uint32 {
	if t == nil || t.MaximumBurstSize == nil {
		return 0
	}
	return *t.MaximumBurstSize
}

// GetPeakRateKbps retrieves the value of the leaf PeakRateKbps from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRateKbps is set, it can
// safely use t.GetPeakRateKbps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRateKbps == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetPeakRateKbps() uint32 {
	if t == nil || t.PeakRateKbps == nil {
		return 0
	}
	return *t.PeakRateKbps
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExceedAction.PopulateDefaults()
	t.ViolateAction.PopulateDefaults()
	for _, e := range t.ForwardingClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer struct, which is a YANG list entry.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer.
func (*SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer) ΛBelongingModule() string {
	return "srl_nokia-acl-policers"
}
