/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
)

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/icmp/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that E_SrlNokiaPacketMatchTypes_IcmpType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_IcmpType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/next-header within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/icmp6/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/icmp/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that E_SrlNokiaPacketMatchTypes_IcmpType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_IcmpType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/next-header within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/icmp6/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/mac-filter/entry/match/ethertype within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Ethertype_Enum, UnionString].
type SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Ethertype_Enum, UnionString]
	Documentation_for_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union ensures that E_SrlNokiaPacketMatchTypes_Ethertype_Enum
// implements the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union interface.
func (E_SrlNokiaPacketMatchTypes_Ethertype_Enum) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union ensures that UnionString
// implements the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union interface.
func (UnionString) Documentation_for_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union() {
}

// To_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union(
	i interface{},
) (SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Ethertype_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Ethertype_Enum, string]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/action/action/accept/accept/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/icmp/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that E_SrlNokiaPacketMatchTypes_IcmpType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_IcmpType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/action/action/accept/accept/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/next-header within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/icmp6/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/mac-filter/entry/action/action/accept/accept/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union() {
}

// To_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) To_SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union(
	i interface{},
) (SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/mac-filter/entry/match/ethertype within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Ethertype_Enum, UnionString].
type SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Ethertype_Enum, UnionString]
	Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union ensures that E_SrlNokiaPacketMatchTypes_Ethertype_Enum
// implements the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union interface.
func (E_SrlNokiaPacketMatchTypes_Ethertype_Enum) Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union ensures that UnionString
// implements the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union interface.
func (UnionString) Documentation_for_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union() {}

// To_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) To_SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union(
	i interface{},
) (SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Ethertype_Enum, string]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/icmp/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that E_SrlNokiaPacketMatchTypes_IcmpType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_IcmpType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/next-header within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/icmp6/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that UnionUint8
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, uint8]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/system-filter/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/qos/output/queue/queue-name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union ensures that UnionString
// implements the SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union interface.
func (UnionString) Documentation_for_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union() {
}

// To_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Qos_Output_Queue) To_SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueName_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/subinterface/ipv6/router-advertisement/router-role/prefix/preferred-lifetime within the YANG schema.
// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Enum, UnionUint32].
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union interface {
	// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Enum, UnionUint32]
	Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union ensures that E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Enum
// implements the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union interface.
func (E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Enum) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union ensures that UnionUint32
// implements the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union() {
}

// To_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) To_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Union, unknown union type, got: %T, want any of [E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_PreferredLifetime_Enum, uint32]", i, i)
}

// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/subinterface/ipv6/router-advertisement/router-role/prefix/valid-lifetime within the YANG schema.
// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Enum, UnionUint32].
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union interface {
	// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Enum, UnionUint32]
	Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union ensures that E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Enum
// implements the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union interface.
func (E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Enum) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union ensures that UnionUint32
// implements the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union() {
}

// To_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix) To_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Union, unknown union type, got: %T, want any of [E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_RouterAdvertisement_RouterRole_Prefix_ValidLifetime_Enum, uint32]", i, i)
}

// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/subinterface/qos/input/classifiers/default-forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union ensures that UnionString
// implements the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union() {
}

// To_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) To_SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers_DefaultForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/subinterface/vlan/encap/double-tagged/inner-vlan-id within the YANG schema.
// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Enum, UnionUint16].
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union interface {
	// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Enum, UnionUint16]
	Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union ensures that E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Enum
// implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union interface.
func (E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Enum) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union ensures that UnionUint16
// implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union() {
}

// To_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged) To_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Union, unknown union type, got: %T, want any of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_InnerVlanId_Enum, uint16]", i, i)
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/subinterface/vlan/encap/double-tagged/outer-vlan-id within the YANG schema.
// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Enum, UnionUint16].
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union interface {
	// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Enum, UnionUint16]
	Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union ensures that E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Enum
// implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union interface.
func (E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Enum) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union ensures that UnionUint16
// implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union() {
}

// To_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged) To_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Union, unknown union type, got: %T, want any of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_DoubleTagged_OuterVlanId_Enum, uint16]", i, i)
}

// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-interfaces/interface/subinterface/vlan/encap/single-tagged/vlan-id within the YANG schema.
// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Enum, UnionUint16].
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union interface {
	// Union type can be one of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Enum, UnionUint16]
	Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union()
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union ensures that E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Enum
// implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union interface.
func (E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Enum) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union() {
}

// Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union ensures that UnionUint16
// implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union() {
}

// To_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) To_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union(
	i interface{},
) (SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union, error) {
	if v, ok := i.(SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Union, unknown union type, got: %T, want any of [E_SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged_VlanId_Enum, uint16]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/aggregate-routes/route/communities/add within the YANG schema.
// Union type can be one of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, UnionString].
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union interface {
	// Union type can be one of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, UnionString]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union ensures that E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
// implements the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union interface.
func (E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) To_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union, unknown union type, got: %T, want any of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, string]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/mac-duplication/hold-down-time within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_HoldDownTime_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/dynamic-learning/age-time within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/dynamic-learning/send-refresh within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/proxy-arp/ip-duplication/hold-down-time within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/dynamic-learning/age-time within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_AgeTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_AgeTime_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/dynamic-learning/send-refresh within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_DynamicLearning_SendRefresh_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_DynamicLearning_SendRefresh_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/proxy-nd/ip-duplication/hold-down-time within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyNd_IpDuplication_HoldDownTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_ProxyArp_IpDuplication_HoldDownTime_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/bridge-table/static-mac/mac/destination within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Enum, UnionString].
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Enum, UnionString]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac) To_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_StaticMac_Mac_Destination_Enum, string]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/pushed-mpls-label-stack within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_MplsLabelWithImplicitAndExplicitNull_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_MplsLabelWithImplicitAndExplicitNull_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union ensures that E_SrlNokiaCommon_MplsLabelWithImplicitAndExplicitNull_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union interface.
func (E_SrlNokiaCommon_MplsLabelWithImplicitAndExplicitNull_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) To_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_MplsLabelWithImplicitAndExplicitNull_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match/ipv4/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) To_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/policy-forwarding/policy/rule/match/ipv4/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4) To_SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_PolicyForwarding_Policy_Rule_Match_Ipv4_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/next-hop within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_NextHopType_Enum, UnionString].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_NextHopType_Enum, UnionString]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union ensures that E_SrlNokiaCommon_NextHopType_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union interface.
func (E_SrlNokiaCommon_NextHopType_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_BridgeTable_NextHop_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_NextHopType_Enum, string]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/advertise/weight within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn_BgpInstance_Routes_RouteTable_IpPrefix_EvpnLinkBandwidth_Advertise_Weight_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/link-bandwidth/add-next-hop-count-to-received-bgp-routes within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that UnionInt32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (UnionInt32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case int32:
		return UnionInt32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, int32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/link-bandwidth/add-next-hop-count-to-received-bgp-routes within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that UnionInt32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (UnionInt32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case int32:
		return UnionInt32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, int32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/group/route-reflector/cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/link-bandwidth/add-next-hop-count-to-received-bgp-routes within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that UnionInt32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (UnionInt32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case int32:
		return UnionInt32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, int32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/link-bandwidth/add-next-hop-count-to-received-bgp-routes within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, UnionInt32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union ensures that UnionInt32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union interface.
func (UnionInt32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case int32:
		return UnionInt32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Enum, int32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/route-reflector/cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector_ClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/bgp/route-reflector/cluster-id within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector_ClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/weighted-ecmp/load-balancing-weight within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids/hold-time within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Enum, UnionUint16].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Enum, UnionUint16]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union ensures that UnionUint16
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Enum, uint16]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/ospf/instance/asbr/trace-path within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum, UnionInt32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum, UnionInt32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union ensures that UnionInt32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union interface.
func (UnionInt32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case int32:
		return UnionInt32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum, int32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/protocols/pim/spt-switchover/group/threshold within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Enum, UnionUint32].
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Enum, UnionUint32]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union ensures that UnionUint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) To_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Enum, uint32]", i, i)
}

// SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/traffic-engineering-policies/policy/head-end within the YANG schema.
// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Enum, UnionString].
type SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union interface {
	// Union type can be one of [E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Enum, UnionString]
	Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union()
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union ensures that E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Enum
// implements the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union interface.
func (E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Enum) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union() {
}

// Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union ensures that UnionString
// implements the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union interface.
func (UnionString) Documentation_for_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union() {
}

// To_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy) To_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union(
	i interface{},
) (SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union, error) {
	if v, ok := i.(SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_TrafficEngineeringPolicies_Policy_HeadEnd_Enum, string]", i, i)
}

// SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/ethcfm/domain/association/remote-mep-auto-discovery/aging-timer within the YANG schema.
// Union type can be one of [E_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum, UnionUint32].
type SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union interface {
	// Union type can be one of [E_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum, UnionUint32]
	Documentation_for_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union()
}

// Documentation_for_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union ensures that E_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum
// implements the SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union interface.
func (E_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum) Documentation_for_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union ensures that UnionUint32
// implements the SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union() {
}

// To_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery) To_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union(
	i interface{},
) (SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Union, unknown union type, got: %T, want any of [E_SrlNokiaOam_Oam_Ethcfm_Domain_Association_RemoteMepAutoDiscovery_AgingTimer_Enum, uint32]", i, i)
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union()
}

// Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union() {
}

// To_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) To_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union(
	i interface{},
) (SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union() {
}

// To_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) To_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union(
	i interface{},
) (SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/link-measurement/measurement-template/stamp/source-udp-port within the YANG schema.
// Union type can be one of [E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum, UnionUint16].
type SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union interface {
	// Union type can be one of [E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum, UnionUint16]
	Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union()
}

// Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union ensures that E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum
// implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union interface.
func (E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum) Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union ensures that UnionUint16
// implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union() {
}

// To_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp) To_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union(
	i interface{},
) (SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Union, unknown union type, got: %T, want any of [E_SrlNokiaOam_Oam_LinkMeasurement_MeasurementTemplate_Stamp_SourceUdpPort_Enum, uint16]", i, i)
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/performance-monitoring/ethcfm/session/target within the YANG schema.
// Union type can be one of [UnionString, UnionUint16].
type SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union interface {
	// Union type can be one of [UnionString, UnionUint16]
	Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union()
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union ensures that UnionString
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union interface.
func (UnionString) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union ensures that UnionUint16
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union() {
}

// To_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session) To_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union(
	i interface{},
) (SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_Target_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/performance-monitoring/ethcfm/session/eth-cfm-single-ended-dmm-test/test-id within the YANG schema.
// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, UnionUint32].
type SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union interface {
	// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, UnionUint32]
	Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union()
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union ensures that E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union interface.
func (E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union ensures that UnionUint32
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union() {
}

// To_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest) To_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union(
	i interface{},
) (SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Union, unknown union type, got: %T, want any of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, uint32]", i, i)
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/performance-monitoring/ethcfm/session/eth-cfm-single-ended-slm-test/test-id within the YANG schema.
// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, UnionUint32].
type SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union interface {
	// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, UnionUint32]
	Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union()
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union ensures that E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union interface.
func (E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union ensures that UnionUint32
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union() {
}

// To_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest) To_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union(
	i interface{},
) (SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedSlmTest_TestId_Union, unknown union type, got: %T, want any of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, uint32]", i, i)
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/performance-monitoring/ip/session/source-udp-port within the YANG schema.
// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Enum, UnionUint32].
type SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union interface {
	// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Enum, UnionUint32]
	Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union()
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union ensures that E_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Enum
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union interface.
func (E_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Enum) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union ensures that UnionUint32
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union() {
}

// To_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session) To_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union(
	i interface{},
) (SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Union, unknown union type, got: %T, want any of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_SourceUdpPort_Enum, uint32]", i, i)
}

// SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/performance-monitoring/ip/session/stamp/test-id within the YANG schema.
// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, UnionUint32].
type SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union interface {
	// Union type can be one of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, UnionUint32]
	Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union()
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union ensures that E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union interface.
func (E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union ensures that UnionUint32
// implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union() {
}

// To_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp) To_SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union(
	i interface{},
) (SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_PerformanceMonitoring_Ip_Session_Stamp_TestId_Union, unknown union type, got: %T, want any of [E_SrlNokiaOam_Oam_PerformanceMonitoring_Ethcfm_Session_EthCfmSingleEndedDmmTest_TestId_Enum, uint32]", i, i)
}

// SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-oam/oam/twamp/server/network-instance/control-packet-dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union()
}

// Documentation_for_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union() {
}

// Documentation_for_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union ensures that UnionUint8
// implements the SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union() {
}

// To_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaOam_Oam_Twamp_Server_NetworkInstance) To_SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union(
	i interface{},
) (SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union, error) {
	if v, ok := i.(SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaOam_Oam_Twamp_Server_NetworkInstance_ControlPacketDscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-platform/platform/linecard/forwarding-complex/pipeline/index within the YANG schema.
// Union type can be one of [E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Enum, UnionUint8].
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union interface {
	// Union type can be one of [E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Enum, UnionUint8]
	Documentation_for_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union()
}

// Documentation_for_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union ensures that E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Enum
// implements the SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union interface.
func (E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Enum) Documentation_for_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union() {
}

// Documentation_for_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union ensures that UnionUint8
// implements the SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union() {
}

// To_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline) To_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union(
	i interface{},
) (SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union, error) {
	if v, ok := i.(SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Union, unknown union type, got: %T, want any of [E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Pipeline_Index_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/buffer-management/buffer-allocation-profile/queues/queue/queue-name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union()
}

// Documentation_for_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union() {
}

// To_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue) To_SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union(
	i interface{},
) (SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_BufferManagement_BufferAllocationProfile_Queues_Queue_QueueName_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/dot1p-policy/dot1p/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P) To_SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Dot1PPolicy_Dot1P_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/dscp-policy/dscp/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) To_SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/dscp-reclassify-policy/dscp/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp) To_SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_DscpReclassifyPolicy_Dscp_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/mpls-traffic-class-policy/traffic-class/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) To_SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/action/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Action_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv4/icmp/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union ensures that E_SrlNokiaPacketMatchTypes_IcmpType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_IcmpType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv4_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6/next-header within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/ipv6/icmp6/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union ensures that E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Ipv6_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield-classifier/entries/entry/match/transport/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range) To_SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_MultifieldClassifier_Entries_Entry_Match_Transport_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/action/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Action_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/protocol within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/icmp/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union ensures that E_SrlNokiaPacketMatchTypes_IcmpType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_IcmpType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IcmpType_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv4-policy/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv4Policy_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/action/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Action_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/dscp-set within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DscpSet_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/next-header within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union ensures that E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union interface.
func (E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_IpProtocolType_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/destination-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/destination-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/destination-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/icmp6/type within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union ensures that E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union interface.
func (E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_Icmp6Type_Enum, uint8]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/source-port/value within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/source-port/range/end within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/classifiers/multifield/ipv6-policy/entry/match/source-port/range/start within the YANG schema.
// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16].
type SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union interface {
	// Union type can be one of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, UnionUint16]
	Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union ensures that E_SrlNokiaPacketMatchTypes_L4PortType_Enum
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union interface.
func (E_SrlNokiaPacketMatchTypes_L4PortType_Enum) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union ensures that UnionUint16
// implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union interface.
func (UnionUint16) Documentation_for_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union() {
}

// To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range) To_SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union(
	i interface{},
) (SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint16:
		return UnionUint16(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Classifiers_Multifield_Ipv6Policy_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaPacketMatchTypes_L4PortType_Enum, uint16]", i, i)
}

// SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/input-class-map/forwarding-class/name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union()
}

// Documentation_for_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union() {}

// To_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_InputClassMap_ForwardingClass) To_SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union(
	i interface{},
) (SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_InputClassMap_ForwardingClass_Name_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/interfaces/interface/input/classifiers/default/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default) To_SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Interfaces_Interface_Input_Classifiers_Default_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/interfaces/interface/output/queues/queue/queue-name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union()
}

// Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union() {
}

// To_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue) To_SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union(
	i interface{},
) (SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_Interfaces_Interface_Output_Queues_Queue_QueueName_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/output-class-map/forwarding-class/name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union()
}

// Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union() {}

// To_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass) To_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union(
	i interface{},
) (SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Name_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/output-class-map/forwarding-class/queue/name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union()
}

// Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union() {
}

// To_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue) To_SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union(
	i interface{},
) (SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_OutputClassMap_ForwardingClass_Queue_Name_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/policer-templates/policer-template/policer/forwarding-class/fc within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union()
}

// Documentation_for_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union() {
}

// To_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass) To_SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union(
	i interface{},
) (SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_PolicerTemplates_PolicerTemplate_Policer_ForwardingClass_Fc_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/resource-management/forwarding-class-resource-priority/forwarding-class/name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union()
}

// Documentation_for_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union() {
}

// To_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass) To_SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union(
	i interface{},
) (SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_ResourceManagement_ForwardingClassResourcePriority_ForwardingClass_Name_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/dot1p-policy/map/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map) To_SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_Dot1PPolicy_Map_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union() {}

// To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map) To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map) To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/drop-probability/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability) To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_DropProbability_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/profile/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile) To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Profile_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/ip-rewrite-policy/exceed/dscp-or-precedence/dscp/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed) To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Exceed_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/ip-rewrite-policy/in/dscp-or-precedence/dscp/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union() {}

// To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In) To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_In_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/ip-rewrite-policy/in-plus/dscp-or-precedence/dscp/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus) To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_InPlus_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/ip-rewrite-policy/out/dscp-or-precedence/dscp/dscp within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8].
type SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DscpName, UnionUint8]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union ensures that E_SrlNokiaCommon_DscpName
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union interface.
func (E_SrlNokiaCommon_DscpName) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union ensures that UnionUint8
// implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union interface.
func (UnionUint8) Documentation_for_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union() {}

// To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out) To_SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_IpRewritePolicy_Out_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DscpName, uint8]", i, i)
}

// SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/mpls-traffic-class-policy/map/forwarding-class within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString].
type SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultForwardingClass, UnionString]
	Documentation_for_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union()
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union ensures that E_SrlNokiaCommon_DefaultForwardingClass
// implements the SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union interface.
func (E_SrlNokiaCommon_DefaultForwardingClass) Documentation_for_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union() {
}

// To_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map) To_SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union(
	i interface{},
) (SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map_ForwardingClass_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultForwardingClass, string]", i, i)
}

// SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/scheduler-policies/queue-scheduling-policy/queue/queue-name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union()
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union() {
}

// To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue) To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union(
	i interface{},
) (SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueName_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/scheduler-policies/queue-scheduling-policy/queue/queue-depth/maximum-burst-size within the YANG schema.
// Union type can be one of [E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Enum, UnionUint32].
type SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union interface {
	// Union type can be one of [E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Enum, UnionUint32]
	Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union()
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union ensures that E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Enum
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union interface.
func (E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Enum) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union ensures that UnionUint32
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union() {
}

// To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth) To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union(
	i interface{},
) (SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Union, unknown union type, got: %T, want any of [E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Queue_QueueDepth_MaximumBurstSize_Enum, uint32]", i, i)
}

// SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/scheduler-policies/queue-scheduling-policy/scheduler/threshold-separation within the YANG schema.
// Union type can be one of [E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Enum, UnionUint64].
type SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union interface {
	// Union type can be one of [E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Enum, UnionUint64]
	Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union()
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union ensures that E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Enum
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union interface.
func (E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Enum) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union ensures that UnionUint64
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union interface.
func (UnionUint64) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union() {
}

// To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler) To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union(
	i interface{},
) (SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Union, unknown union type, got: %T, want any of [E_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_ThresholdSeparation_Enum, uint64]", i, i)
}

// SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/scheduler-policies/queue-scheduling-policy/scheduler/inputs/auto-or-explicit-input/queue-list/queue within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union()
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union() {
}

// To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs) To_SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union(
	i interface{},
) (SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_SchedulerPolicies_QueueSchedulingPolicy_Scheduler_Inputs_Queue_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/scheduler-policies/sched-class-scheduling-policy/scheduler/threshold-separation within the YANG schema.
// Union type can be one of [E_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Enum, UnionUint64].
type SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union interface {
	// Union type can be one of [E_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Enum, UnionUint64]
	Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union()
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union ensures that E_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Enum
// implements the SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union interface.
func (E_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Enum) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union ensures that UnionUint64
// implements the SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union interface.
func (UnionUint64) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union() {
}

// To_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler) To_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union(
	i interface{},
) (SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint64:
		return UnionUint64(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Union, unknown union type, got: %T, want any of [E_SrlNokiaQos_Qos_SchedulerPolicies_SchedClassSchedulingPolicy_Scheduler_ThresholdSeparation_Enum, uint64]", i, i)
}

// SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/scheduler-policies/scheduler-policy/scheduler/input/queue-name within the YANG schema.
// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString].
type SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union interface {
	// Union type can be one of [E_SrlNokiaCommon_DefaultQueueName, UnionString]
	Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union()
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union ensures that E_SrlNokiaCommon_DefaultQueueName
// implements the SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union interface.
func (E_SrlNokiaCommon_DefaultQueueName) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union() {
}

// Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union ensures that UnionString
// implements the SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union interface.
func (UnionString) Documentation_for_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union() {
}

// To_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input) To_SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union(
	i interface{},
) (SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union, error) {
	if v, ok := i.(SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_SchedulerPolicies_SchedulerPolicy_Scheduler_Input_QueueName_Union, unknown union type, got: %T, want any of [E_SrlNokiaCommon_DefaultQueueName, string]", i, i)
}

// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/community-set/member within the YANG schema.
// Union type can be one of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, UnionString].
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface {
	// Union type can be one of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, UnionString]
	Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union()
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union ensures that E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface.
func (E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union() {
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union ensures that UnionString
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface.
func (UnionString) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union() {
}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) To_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union(
	i interface{},
) (SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union, error) {
	if v, ok := i.(SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union, unknown union type, got: %T, want any of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, string]", i, i)
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/as-path/prepend/as-number within the YANG schema.
// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum, UnionUint32].
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union interface {
	// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum, UnionUint32]
	Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union()
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union ensures that E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union() {
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union ensures that UnionUint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union() {
}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union(
	i interface{},
) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union, error) {
	if v, ok := i.(SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum, uint32]", i, i)
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/med/set within the YANG schema.
// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum, UnionUint32].
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union interface {
	// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum, UnionUint32]
	Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union()
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union ensures that E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union interface.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union() {
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union ensures that UnionUint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union() {
}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union(
	i interface{},
) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union, error) {
	if v, ok := i.(SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum, uint32]", i, i)
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/as-path/prepend/as-number within the YANG schema.
// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum, UnionUint32].
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union interface {
	// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum, UnionUint32]
	Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union()
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union ensures that E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union() {
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union ensures that UnionUint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union() {
}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union(
	i interface{},
) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union, error) {
	if v, ok := i.(SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Enum, uint32]", i, i)
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/med/set within the YANG schema.
// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum, UnionUint32].
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union interface {
	// Union type can be one of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum, UnionUint32]
	Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union()
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union ensures that E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union interface.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union() {
}

// Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union ensures that UnionUint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union interface.
func (UnionUint32) Documentation_for_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union() {
}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union(
	i interface{},
) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union, error) {
	if v, ok := i.(SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Enum, uint32]", i, i)
}

// SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-system/system/authentication/keychain/key/receive-lifetime/end-time within the YANG schema.
// Union type can be one of [E_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Enum, UnionString].
type SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union interface {
	// Union type can be one of [E_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Enum, UnionString]
	Documentation_for_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union()
}

// Documentation_for_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union ensures that E_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Enum
// implements the SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union interface.
func (E_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Enum) Documentation_for_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union() {
}

// Documentation_for_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union ensures that UnionString
// implements the SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union interface.
func (UnionString) Documentation_for_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union() {
}

// To_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) To_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union(
	i interface{},
) (SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union, error) {
	if v, ok := i.(SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union, unknown union type, got: %T, want any of [E_SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Enum, string]", i, i)
}
