/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/as-path/prepend YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend struct {
	AsNumber SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union `path:"as-number" module:"srl_nokia-routing-policy"`
	RepeatN  *uint8                                                                                     `path:"repeat-n" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) IsYANGGoStruct() {
}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) GetAsNumber() SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend_AsNumber_Union {
	if t == nil || t.AsNumber == nil {
		return nil
	}
	return t.AsNumber
}

// GetRepeatN retrieves the value of the leaf RepeatN from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_AsPath_Prepend) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/communities YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities struct {
	Add     *string `path:"add" module:"srl_nokia-routing-policy"`
	Remove  *string `path:"remove" module:"srl_nokia-routing-policy"`
	Replace *string `path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetRemove retrieves the value of the leaf Remove from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) GetRemove() string {
	if t == nil || t.Remove == nil {
		return ""
	}
	return *t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Communities) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/local-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference struct {
	Set *uint32 `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) IsYANGGoStruct() {
}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) GetSet() uint32 {
	if t == nil || t.Set == nil {
		return 0
	}
	return *t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_LocalPreference) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/med YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med struct {
	Set SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) IsYANGGoStruct() {}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) GetSet() SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Med) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/bgp/origin YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin struct {
	Set E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin_Set `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) IsYANGGoStruct() {}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) GetSet() E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin_Set {
	if t == nil || t.Set == 0 {
		return 0
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/internal-tags YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/route-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference struct {
	Set *uint8 `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) IsYANGGoStruct() {}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) GetSet() uint8 {
	if t == nil || t.Set == nil {
		return 0
	}
	return *t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_RoutePreference) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement represents the /srl_nokia-routing-policy/routing-policy/policy/statement YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement struct {
	Action *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action `path:"action" module:"srl_nokia-routing-policy"`
	Match  *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match  `path:"match" module:"srl_nokia-routing-policy"`
	Name   *string                                                      `path:"name" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) GetOrCreateAction() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) GetOrCreateMatch() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) GetAction() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) GetMatch() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action struct {
	Bgp             *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp             `path:"bgp" module:"srl_nokia-routing-policy"`
	InternalTags    *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags    `path:"internal-tags" module:"srl_nokia-routing-policy"`
	PolicyResult    E_SrlNokiaPolicyTypes_PolicyResultType                                       `path:"policy-result" module:"srl_nokia-routing-policy"`
	RoutePreference *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference `path:"route-preference" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetOrCreateBgp() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp{}
	return t.Bgp
}

// GetOrCreateInternalTags retrieves the value of the InternalTags field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetOrCreateInternalTags() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags {
	if t.InternalTags != nil {
		return t.InternalTags
	}
	t.InternalTags = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags{}
	return t.InternalTags
}

// GetOrCreateRoutePreference retrieves the value of the RoutePreference field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetOrCreateRoutePreference() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference {
	if t.RoutePreference != nil {
		return t.RoutePreference
	}
	t.RoutePreference = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference{}
	return t.RoutePreference
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetBgp() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetInternalTags returns the value of the InternalTags struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action. If the receiver or the field InternalTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetInternalTags() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags {
	if t != nil && t.InternalTags != nil {
		return t.InternalTags
	}
	return nil
}

// GetRoutePreference returns the value of the RoutePreference struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action. If the receiver or the field RoutePreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetRoutePreference() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference {
	if t != nil && t.RoutePreference != nil {
		return t.RoutePreference
	}
	return nil
}

// GetPolicyResult retrieves the value of the leaf PolicyResult from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyResult is set, it can
// safely use t.GetPolicyResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyResult == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) GetPolicyResult() E_SrlNokiaPolicyTypes_PolicyResultType {
	if t == nil || t.PolicyResult == 0 {
		return 0
	}
	return t.PolicyResult
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.InternalTags.PopulateDefaults()
	t.RoutePreference.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp struct {
	AsPath          *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath          `path:"as-path" module:"srl_nokia-routing-policy"`
	Communities     *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities     `path:"communities" module:"srl_nokia-routing-policy"`
	LocalPreference *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference `path:"local-preference" module:"srl_nokia-routing-policy"`
	Med             *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med             `path:"med" module:"srl_nokia-routing-policy"`
	Origin          *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin          `path:"origin" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) IsYANGGoStruct() {}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetOrCreateAsPath() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath{}
	return t.AsPath
}

// GetOrCreateCommunities retrieves the value of the Communities field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetOrCreateCommunities() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities {
	if t.Communities != nil {
		return t.Communities
	}
	t.Communities = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities{}
	return t.Communities
}

// GetOrCreateLocalPreference retrieves the value of the LocalPreference field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetOrCreateLocalPreference() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference {
	if t.LocalPreference != nil {
		return t.LocalPreference
	}
	t.LocalPreference = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference{}
	return t.LocalPreference
}

// GetOrCreateMed retrieves the value of the Med field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetOrCreateMed() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med {
	if t.Med != nil {
		return t.Med
	}
	t.Med = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med{}
	return t.Med
}

// GetOrCreateOrigin retrieves the value of the Origin field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetOrCreateOrigin() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin {
	if t.Origin != nil {
		return t.Origin
	}
	t.Origin = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin{}
	return t.Origin
}

// GetAsPath returns the value of the AsPath struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetAsPath() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetCommunities returns the value of the Communities struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp. If the receiver or the field Communities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetCommunities() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities {
	if t != nil && t.Communities != nil {
		return t.Communities
	}
	return nil
}

// GetLocalPreference returns the value of the LocalPreference struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp. If the receiver or the field LocalPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetLocalPreference() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference {
	if t != nil && t.LocalPreference != nil {
		return t.LocalPreference
	}
	return nil
}

// GetMed returns the value of the Med struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp. If the receiver or the field Med is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetMed() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med {
	if t != nil && t.Med != nil {
		return t.Med
	}
	return nil
}

// GetOrigin returns the value of the Origin struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp. If the receiver or the field Origin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) GetOrigin() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin {
	if t != nil && t.Origin != nil {
		return t.Origin
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsPath.PopulateDefaults()
	t.Communities.PopulateDefaults()
	t.LocalPreference.PopulateDefaults()
	t.Med.PopulateDefaults()
	t.Origin.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/as-path YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath struct {
	Prepend *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend `path:"prepend" module:"srl_nokia-routing-policy"`
	Remove  *bool                                                                           `path:"remove" module:"srl_nokia-routing-policy"`
	Replace []uint32                                                                        `path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) IsYANGGoStruct() {}

// GetOrCreatePrepend retrieves the value of the Prepend field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) GetOrCreatePrepend() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend {
	if t.Prepend != nil {
		return t.Prepend
	}
	t.Prepend = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend{}
	return t.Prepend
}

// GetPrepend returns the value of the Prepend struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath. If the receiver or the field Prepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) GetPrepend() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend {
	if t != nil && t.Prepend != nil {
		return t.Prepend
	}
	return nil
}

// GetRemove retrieves the value of the leaf Remove from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) GetRemove() bool {
	if t == nil || t.Remove == nil {
		return false
	}
	return *t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) GetReplace() []uint32 {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Prepend.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/as-path/prepend YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend struct {
	AsNumber SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union `path:"as-number" module:"srl_nokia-routing-policy"`
	RepeatN  *uint8                                                                                        `path:"repeat-n" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) IsYANGGoStruct() {
}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) GetAsNumber() SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend_AsNumber_Union {
	if t == nil || t.AsNumber == nil {
		return nil
	}
	return t.AsNumber
}

// GetRepeatN retrieves the value of the leaf RepeatN from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_AsPath_Prepend) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/communities YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities struct {
	Add     *string `path:"add" module:"srl_nokia-routing-policy"`
	Remove  *string `path:"remove" module:"srl_nokia-routing-policy"`
	Replace *string `path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetRemove retrieves the value of the leaf Remove from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) GetRemove() string {
	if t == nil || t.Remove == nil {
		return ""
	}
	return *t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Communities) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/local-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference struct {
	Set *uint32 `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) IsYANGGoStruct() {
}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) GetSet() uint32 {
	if t == nil || t.Set == nil {
		return 0
	}
	return *t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_LocalPreference) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/med YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med struct {
	Set SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) IsYANGGoStruct() {}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) GetSet() SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Med) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/bgp/origin YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin struct {
	Set E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin_Set `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) IsYANGGoStruct() {}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) GetSet() E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Bgp_Origin_Set {
	if t == nil || t.Set == 0 {
		return 0
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Bgp_Origin) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/internal-tags YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/route-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference struct {
	Set *uint8 `path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) IsYANGGoStruct() {
}

// GetSet retrieves the value of the leaf Set from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) GetSet() uint8 {
	if t == nil || t.Set == nil {
		return 0
	}
	return *t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_RoutePreference) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match struct {
	Bgp          *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp          `path:"bgp" module:"srl_nokia-routing-policy"`
	Family       []E_SrlNokiaPolicyTypes_BgpFamilyType                                    `path:"family" module:"srl_nokia-routing-policy"`
	InternalTags *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags `path:"internal-tags" module:"srl_nokia-routing-policy"`
	Isis         *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis         `path:"isis" module:"srl_nokia-routing-policy"`
	Ospf         *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf         `path:"ospf" module:"srl_nokia-routing-policy"`
	PrefixSet    *string                                                                  `path:"prefix-set" module:"srl_nokia-routing-policy"`
	Protocol     E_SrlNokiaCommon_IpRouteType                                             `path:"protocol" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetOrCreateBgp() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp{}
	return t.Bgp
}

// GetOrCreateInternalTags retrieves the value of the InternalTags field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetOrCreateInternalTags() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags {
	if t.InternalTags != nil {
		return t.InternalTags
	}
	t.InternalTags = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags{}
	return t.InternalTags
}

// GetOrCreateIsis retrieves the value of the Isis field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetOrCreateIsis() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis {
	if t.Isis != nil {
		return t.Isis
	}
	t.Isis = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis{}
	return t.Isis
}

// GetOrCreateOspf retrieves the value of the Ospf field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetOrCreateOspf() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf {
	if t.Ospf != nil {
		return t.Ospf
	}
	t.Ospf = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf{}
	return t.Ospf
}

// GetBgp returns the value of the Bgp struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetBgp() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetInternalTags returns the value of the InternalTags struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match. If the receiver or the field InternalTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetInternalTags() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags {
	if t != nil && t.InternalTags != nil {
		return t.InternalTags
	}
	return nil
}

// GetIsis returns the value of the Isis struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match. If the receiver or the field Isis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetIsis() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis {
	if t != nil && t.Isis != nil {
		return t.Isis
	}
	return nil
}

// GetOspf returns the value of the Ospf struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match. If the receiver or the field Ospf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetOspf() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf {
	if t != nil && t.Ospf != nil {
		return t.Ospf
	}
	return nil
}

// GetFamily retrieves the value of the leaf Family from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetFamily() []E_SrlNokiaPolicyTypes_BgpFamilyType {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetPrefixSet retrieves the value of the leaf PrefixSet from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSet is set, it can
// safely use t.GetPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetPrefixSet() string {
	if t == nil || t.PrefixSet == nil {
		return ""
	}
	return *t.PrefixSet
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) GetProtocol() E_SrlNokiaCommon_IpRouteType {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.InternalTags.PopulateDefaults()
	t.Isis.PopulateDefaults()
	t.Ospf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp struct {
	AsPathLength *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength `path:"as-path-length" module:"srl_nokia-routing-policy"`
	AsPathSet    *string                                                                      `path:"as-path-set" module:"srl_nokia-routing-policy"`
	CommunitySet *string                                                                      `path:"community-set" module:"srl_nokia-routing-policy"`
	Evpn         *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn         `path:"evpn" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) IsYANGGoStruct() {}

// GetOrCreateAsPathLength retrieves the value of the AsPathLength field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) GetOrCreateAsPathLength() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength {
	if t.AsPathLength != nil {
		return t.AsPathLength
	}
	t.AsPathLength = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength{}
	return t.AsPathLength
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) GetOrCreateEvpn() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn{}
	return t.Evpn
}

// GetAsPathLength returns the value of the AsPathLength struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp. If the receiver or the field AsPathLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) GetAsPathLength() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength {
	if t != nil && t.AsPathLength != nil {
		return t.AsPathLength
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) GetEvpn() *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetAsPathSet retrieves the value of the leaf AsPathSet from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSet is set, it can
// safely use t.GetAsPathSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) GetAsPathSet() string {
	if t == nil || t.AsPathSet == nil {
		return ""
	}
	return *t.AsPathSet
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AsPathLength.PopulateDefaults()
	t.Evpn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp/as-path-length YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength struct {
	Operator E_SrlNokiaPolicyTypes_ComparisonOperatorType `path:"operator" module:"srl_nokia-routing-policy"`
	Unique   *bool                                        `path:"unique" module:"srl_nokia-routing-policy"`
	Value    *uint8                                       `path:"value" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) GetOperator() E_SrlNokiaPolicyTypes_ComparisonOperatorType {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetUnique retrieves the value of the leaf Unique from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unique is set, it can
// safely use t.GetUnique() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unique == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) GetUnique() bool {
	if t == nil || t.Unique == nil {
		return false
	}
	return *t.Unique
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) GetValue() uint8 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp/evpn YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn struct {
	RouteType []uint8 `path:"route-type" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) IsYANGGoStruct() {}

// GetRouteType retrieves the value of the leaf RouteType from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) GetRouteType() []uint8 {
	if t == nil || t.RouteType == nil {
		return nil
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/internal-tags YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags struct {
	TagSet []string `path:"tag-set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) GetTagSet() []string {
	if t == nil || t.TagSet == nil {
		return nil
	}
	return t.TagSet
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_InternalTags) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/isis YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis struct {
	Level     *uint8                                                                      `path:"level" module:"srl_nokia-routing-policy"`
	RouteType E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType `path:"route-type" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) IsYANGGoStruct() {}

// GetLevel retrieves the value of the leaf Level from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) GetLevel() uint8 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetRouteType retrieves the value of the leaf RouteType from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) GetRouteType() E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/ospf YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf struct {
	AreaId     *string                               `path:"area-id" module:"srl_nokia-routing-policy"`
	InstanceId *uint32                               `path:"instance-id" module:"srl_nokia-routing-policy"`
	RouteType  E_SrlNokiaPolicyTypes_PolOspfPathType `path:"route-type" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) IsYANGGoStruct() {}

// GetAreaId retrieves the value of the leaf AreaId from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetInstanceId retrieves the value of the leaf InstanceId from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetRouteType retrieves the value of the leaf RouteType from the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) GetRouteType() E_SrlNokiaPolicyTypes_PolOspfPathType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet represents the /srl_nokia-routing-policy/routing-policy/prefix-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct {
	Name   *string                                                                                                            `path:"name" module:"srl_nokia-routing-policy"`
	Prefix map[SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix `path:"prefix" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) IsYANGGoStruct() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key represents the key for list Prefix of element /srl_nokia-routing-policy/routing-policy/prefix-set.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MaskLengthRange string `path:"mask-length-range"`
}

// IsYANGGoKeyStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key key struct.
func (t SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"ip-prefix":         t.IpPrefix,
		"mask-length-range": t.MaskLengthRange,
	}, nil
}

// NewPrefix creates a new entry in the Prefix list of the
// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) NewPrefix(IpPrefix string,
	MaskLengthRange string,
) (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix)
	}

	key := SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MaskLengthRange: MaskLengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix{
		IpPrefix:        &IpPrefix,
		MaskLengthRange: &MaskLengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) RenamePrefix(
	oldK, newK SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key,
) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MaskLengthRange = &newK.MaskLengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) GetOrCreatePrefix(IpPrefix string,
	MaskLengthRange string,
) *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix {
	key := SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MaskLengthRange: MaskLengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MaskLengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) GetPrefix(IpPrefix string,
	MaskLengthRange string,
) *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix {
	if t == nil {
		return nil
	}

	key := SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MaskLengthRange: MaskLengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) DeletePrefix(IpPrefix string, MaskLengthRange string) {
	key := SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MaskLengthRange: MaskLengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix struct to the
// list Prefix of SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet. If the key value(s) specified in
// the supplied SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix already exist in the list, an error is
// returned.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) AppendPrefix(
	v *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MaskLengthRange == nil {
		return fmt.Errorf("invalid nil key for MaskLengthRange")
	}

	key := SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MaskLengthRange: *v.MaskLengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix represents the /srl_nokia-routing-policy/routing-policy/prefix-set/prefix YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix struct {
	IpPrefix        *string `path:"ip-prefix" module:"srl_nokia-routing-policy"`
	MaskLengthRange *string `path:"mask-length-range" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMaskLengthRange retrieves the value of the leaf MaskLengthRange from the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskLengthRange is set, it can
// safely use t.GetMaskLengthRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskLengthRange == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) GetMaskLengthRange() string {
	if t == nil || t.MaskLengthRange == nil {
		return ""
	}
	return *t.MaskLengthRange
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MaskLengthRange == nil {
		return nil, fmt.Errorf("nil value for key MaskLengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":         *t.IpPrefix,
		"mask-length-range": *t.MaskLengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaRoutingPolicy_RoutingPolicy_TagSet represents the /srl_nokia-routing-policy/routing-policy/tag-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_TagSet struct {
	Name *string `path:"name" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the SrlNokiaRoutingPolicy_RoutingPolicy_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaRoutingPolicy_RoutingPolicy_TagSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_TagSet struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaRoutingPolicy_RoutingPolicy_TagSet.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_TagSet) ΛBelongingModule() string {
	return "srl_nokia-routing-policy"
}

// SrlNokiaSystem_System represents the /srl_nokia-system/system YANG schema element.
type SrlNokiaSystem_System struct {
	Aaa                     *SrlNokiaSystem_System_Aaa                      `path:"aaa" module:"srl_nokia-aaa"`
	Authentication          *SrlNokiaSystem_System_Authentication           `path:"authentication" module:"srl_nokia-keychains"`
	Banner                  *SrlNokiaSystem_System_Banner                   `path:"banner" module:"srl_nokia-system-banner"`
	Boot                    *SrlNokiaSystem_System_Boot                     `path:"boot" module:"srl_nokia-boot"`
	BridgeTable             *SrlNokiaSystem_System_BridgeTable              `path:"bridge-table" module:"srl_nokia-system-bridge-table"`
	Clock                   *SrlNokiaSystem_System_Clock                    `path:"clock" module:"srl_nokia-ntp"`
	Configuration           *SrlNokiaSystem_System_Configuration            `path:"configuration" module:"srl_nokia-configuration"`
	DhcpServer              *SrlNokiaSystem_System_DhcpServer               `path:"dhcp-server" module:"srl_nokia-dhcp-server" yangPresence:"true"`
	Dns                     *SrlNokiaSystem_System_Dns                      `path:"dns" module:"srl_nokia-dns" yangPresence:"true"`
	EventHandler            *SrlNokiaSystem_System_EventHandler             `path:"event-handler" module:"srl_nokia-event-handler" yangPresence:"true"`
	FtpServer               *SrlNokiaSystem_System_FtpServer                `path:"ftp-server" module:"srl_nokia-ftp" yangPresence:"true"`
	GnmiServer              *SrlNokiaSystem_System_GnmiServer               `path:"gnmi-server" module:"srl_nokia-gnmi-server" yangPresence:"true"`
	GribiServer             *SrlNokiaSystem_System_GribiServer              `path:"gribi-server" module:"srl_nokia-gribi-server" yangPresence:"true"`
	Information             *SrlNokiaSystem_System_Information              `path:"information" module:"srl_nokia-system-info"`
	JsonRpcServer           *SrlNokiaSystem_System_JsonRpcServer            `path:"json-rpc-server" module:"srl_nokia-json-rpc" yangPresence:"true"`
	Lacp                    *SrlNokiaSystem_System_Lacp                     `path:"lacp" module:"srl_nokia-lacp"`
	License                 map[string]*SrlNokiaSystem_System_License       `path:"license" module:"srl_nokia-license"`
	Lldp                    *SrlNokiaSystem_System_Lldp                     `path:"lldp" module:"srl_nokia-lldp" yangPresence:"true"`
	LoadBalancing           *SrlNokiaSystem_System_LoadBalancing            `path:"load-balancing" module:"srl_nokia-load-balancing"`
	Logging                 *SrlNokiaSystem_System_Logging                  `path:"logging" module:"srl_nokia-logging"`
	Maintenance             *SrlNokiaSystem_System_Maintenance              `path:"maintenance" module:"srl_nokia-maintenance-mode" yangPresence:"true"`
	Management              *SrlNokiaSystem_System_Management               `path:"management" module:"srl_nokia-system"`
	Mirroring               *SrlNokiaSystem_System_Mirroring                `path:"mirroring" module:"srl_nokia-mirroring" yangPresence:"true"`
	Mpls                    *SrlNokiaSystem_System_Mpls                     `path:"mpls" module:"srl_nokia-mpls-label-management"`
	Mtu                     *SrlNokiaSystem_System_Mtu                      `path:"mtu" module:"srl_nokia-mtu"`
	Multicast               *SrlNokiaSystem_System_Multicast                `path:"multicast" module:"srl_nokia-system-multicast"`
	Name                    *SrlNokiaSystem_System_Name                     `path:"name" module:"srl_nokia-system-name"`
	NetworkInstance         *SrlNokiaSystem_System_NetworkInstance          `path:"network-instance" module:"srl_nokia-system-network-instance" yangPresence:"true"`
	Ntp                     *SrlNokiaSystem_System_Ntp                      `path:"ntp" module:"srl_nokia-ntp" yangPresence:"true"`
	P4RtServer              *SrlNokiaSystem_System_P4RtServer               `path:"p4rt-server" module:"srl_nokia-p4rt-server" yangPresence:"true"`
	PacketLinkQualification *SrlNokiaSystem_System_PacketLinkQualification  `path:"packet-link-qualification" module:"srl_nokia-packet-link-qual"`
	Protocols               *SrlNokiaSystem_System_Protocols                `path:"protocols" module:"srl_nokia-system-protocols"`
	RaGuardPolicy           map[string]*SrlNokiaSystem_System_RaGuardPolicy `path:"ra-guard-policy" module:"srl_nokia-ra_guard"`
	Sflow                   *SrlNokiaSystem_System_Sflow                    `path:"sflow" module:"srl_nokia-sflow" yangPresence:"true"`
	Snmp                    *SrlNokiaSystem_System_Snmp                     `path:"snmp" module:"srl_nokia-snmp" yangPresence:"true"`
	SshServer               *SrlNokiaSystem_System_SshServer                `path:"ssh-server" module:"srl_nokia-ssh" yangPresence:"true"`
	Sync                    *SrlNokiaSystem_System_Sync                     `path:"sync" module:"srl_nokia-sync"`
	Tls                     *SrlNokiaSystem_System_Tls                      `path:"tls" module:"srl_nokia-tls"`
	TraceOptions            []E_SrlNokiaSystem_System_TraceOptions          `path:"trace-options" module:"srl_nokia-system"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// SrlNokiaSystem_System struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System) NewLicense(Id string) (*SrlNokiaSystem_System_License, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*SrlNokiaSystem_System_License)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &SrlNokiaSystem_System_License{
		Id: &Id,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the SrlNokiaSystem_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.Id = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System) GetOrCreateLicense(Id string) *SrlNokiaSystem_System_License {
	key := Id

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of SrlNokiaSystem_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System) GetLicense(Id string) *SrlNokiaSystem_System_License {
	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System) DeleteLicense(Id string) {
	key := Id

	delete(t.License, key)
}

// AppendLicense appends the supplied SrlNokiaSystem_System_License struct to the
// list License of SrlNokiaSystem_System. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_License already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System) AppendLicense(v *SrlNokiaSystem_System_License) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*SrlNokiaSystem_System_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// NewRaGuardPolicy creates a new entry in the RaGuardPolicy list of the
// SrlNokiaSystem_System struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System) NewRaGuardPolicy(Name string) (*SrlNokiaSystem_System_RaGuardPolicy, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RaGuardPolicy == nil {
		t.RaGuardPolicy = make(map[string]*SrlNokiaSystem_System_RaGuardPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RaGuardPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RaGuardPolicy", key)
	}

	t.RaGuardPolicy[key] = &SrlNokiaSystem_System_RaGuardPolicy{
		Name: &Name,
	}

	return t.RaGuardPolicy[key], nil
}

// RenameRaGuardPolicy renames an entry in the list RaGuardPolicy within
// the SrlNokiaSystem_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System) RenameRaGuardPolicy(oldK, newK string) error {
	if _, ok := t.RaGuardPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RaGuardPolicy", newK)
	}

	e, ok := t.RaGuardPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RaGuardPolicy", oldK)
	}
	e.Name = &newK

	t.RaGuardPolicy[newK] = e
	delete(t.RaGuardPolicy, oldK)
	return nil
}

// GetOrCreateRaGuardPolicy retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System) GetOrCreateRaGuardPolicy(Name string) *SrlNokiaSystem_System_RaGuardPolicy {
	key := Name

	if v, ok := t.RaGuardPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRaGuardPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRaGuardPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRaGuardPolicy retrieves the value with the specified key from
// the RaGuardPolicy map field of SrlNokiaSystem_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System) GetRaGuardPolicy(Name string) *SrlNokiaSystem_System_RaGuardPolicy {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RaGuardPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRaGuardPolicy deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System) DeleteRaGuardPolicy(Name string) {
	key := Name

	delete(t.RaGuardPolicy, key)
}

// AppendRaGuardPolicy appends the supplied SrlNokiaSystem_System_RaGuardPolicy struct to the
// list RaGuardPolicy of SrlNokiaSystem_System. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_RaGuardPolicy already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System) AppendRaGuardPolicy(v *SrlNokiaSystem_System_RaGuardPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RaGuardPolicy == nil {
		t.RaGuardPolicy = make(map[string]*SrlNokiaSystem_System_RaGuardPolicy)
	}

	if _, ok := t.RaGuardPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RaGuardPolicy %v", key)
	}

	t.RaGuardPolicy[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateAaa() *SrlNokiaSystem_System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &SrlNokiaSystem_System_Aaa{}
	return t.Aaa
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateAuthentication() *SrlNokiaSystem_System_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaSystem_System_Authentication{}
	return t.Authentication
}

// GetOrCreateBanner retrieves the value of the Banner field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateBanner() *SrlNokiaSystem_System_Banner {
	if t.Banner != nil {
		return t.Banner
	}
	t.Banner = &SrlNokiaSystem_System_Banner{}
	return t.Banner
}

// GetOrCreateBoot retrieves the value of the Boot field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateBoot() *SrlNokiaSystem_System_Boot {
	if t.Boot != nil {
		return t.Boot
	}
	t.Boot = &SrlNokiaSystem_System_Boot{}
	return t.Boot
}

// GetOrCreateBridgeTable retrieves the value of the BridgeTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateBridgeTable() *SrlNokiaSystem_System_BridgeTable {
	if t.BridgeTable != nil {
		return t.BridgeTable
	}
	t.BridgeTable = &SrlNokiaSystem_System_BridgeTable{}
	return t.BridgeTable
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateClock() *SrlNokiaSystem_System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &SrlNokiaSystem_System_Clock{}
	return t.Clock
}

// GetOrCreateConfiguration retrieves the value of the Configuration field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateConfiguration() *SrlNokiaSystem_System_Configuration {
	if t.Configuration != nil {
		return t.Configuration
	}
	t.Configuration = &SrlNokiaSystem_System_Configuration{}
	return t.Configuration
}

// GetOrCreateDhcpServer retrieves the value of the DhcpServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateDhcpServer() *SrlNokiaSystem_System_DhcpServer {
	if t.DhcpServer != nil {
		return t.DhcpServer
	}
	t.DhcpServer = &SrlNokiaSystem_System_DhcpServer{}
	return t.DhcpServer
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateDns() *SrlNokiaSystem_System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &SrlNokiaSystem_System_Dns{}
	return t.Dns
}

// GetOrCreateEventHandler retrieves the value of the EventHandler field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateEventHandler() *SrlNokiaSystem_System_EventHandler {
	if t.EventHandler != nil {
		return t.EventHandler
	}
	t.EventHandler = &SrlNokiaSystem_System_EventHandler{}
	return t.EventHandler
}

// GetOrCreateFtpServer retrieves the value of the FtpServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateFtpServer() *SrlNokiaSystem_System_FtpServer {
	if t.FtpServer != nil {
		return t.FtpServer
	}
	t.FtpServer = &SrlNokiaSystem_System_FtpServer{}
	return t.FtpServer
}

// GetOrCreateGnmiServer retrieves the value of the GnmiServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateGnmiServer() *SrlNokiaSystem_System_GnmiServer {
	if t.GnmiServer != nil {
		return t.GnmiServer
	}
	t.GnmiServer = &SrlNokiaSystem_System_GnmiServer{}
	return t.GnmiServer
}

// GetOrCreateGribiServer retrieves the value of the GribiServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateGribiServer() *SrlNokiaSystem_System_GribiServer {
	if t.GribiServer != nil {
		return t.GribiServer
	}
	t.GribiServer = &SrlNokiaSystem_System_GribiServer{}
	return t.GribiServer
}

// GetOrCreateInformation retrieves the value of the Information field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateInformation() *SrlNokiaSystem_System_Information {
	if t.Information != nil {
		return t.Information
	}
	t.Information = &SrlNokiaSystem_System_Information{}
	return t.Information
}

// GetOrCreateJsonRpcServer retrieves the value of the JsonRpcServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateJsonRpcServer() *SrlNokiaSystem_System_JsonRpcServer {
	if t.JsonRpcServer != nil {
		return t.JsonRpcServer
	}
	t.JsonRpcServer = &SrlNokiaSystem_System_JsonRpcServer{}
	return t.JsonRpcServer
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateLacp() *SrlNokiaSystem_System_Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &SrlNokiaSystem_System_Lacp{}
	return t.Lacp
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateLldp() *SrlNokiaSystem_System_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &SrlNokiaSystem_System_Lldp{}
	return t.Lldp
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateLoadBalancing() *SrlNokiaSystem_System_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &SrlNokiaSystem_System_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateLogging() *SrlNokiaSystem_System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &SrlNokiaSystem_System_Logging{}
	return t.Logging
}

// GetOrCreateMaintenance retrieves the value of the Maintenance field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateMaintenance() *SrlNokiaSystem_System_Maintenance {
	if t.Maintenance != nil {
		return t.Maintenance
	}
	t.Maintenance = &SrlNokiaSystem_System_Maintenance{}
	return t.Maintenance
}

// GetOrCreateManagement retrieves the value of the Management field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateManagement() *SrlNokiaSystem_System_Management {
	if t.Management != nil {
		return t.Management
	}
	t.Management = &SrlNokiaSystem_System_Management{}
	return t.Management
}

// GetOrCreateMirroring retrieves the value of the Mirroring field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateMirroring() *SrlNokiaSystem_System_Mirroring {
	if t.Mirroring != nil {
		return t.Mirroring
	}
	t.Mirroring = &SrlNokiaSystem_System_Mirroring{}
	return t.Mirroring
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateMpls() *SrlNokiaSystem_System_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaSystem_System_Mpls{}
	return t.Mpls
}

// GetOrCreateMtu retrieves the value of the Mtu field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateMtu() *SrlNokiaSystem_System_Mtu {
	if t.Mtu != nil {
		return t.Mtu
	}
	t.Mtu = &SrlNokiaSystem_System_Mtu{}
	return t.Mtu
}

// GetOrCreateMulticast retrieves the value of the Multicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateMulticast() *SrlNokiaSystem_System_Multicast {
	if t.Multicast != nil {
		return t.Multicast
	}
	t.Multicast = &SrlNokiaSystem_System_Multicast{}
	return t.Multicast
}

// GetOrCreateName retrieves the value of the Name field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateName() *SrlNokiaSystem_System_Name {
	if t.Name != nil {
		return t.Name
	}
	t.Name = &SrlNokiaSystem_System_Name{}
	return t.Name
}

// GetOrCreateNetworkInstance retrieves the value of the NetworkInstance field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateNetworkInstance() *SrlNokiaSystem_System_NetworkInstance {
	if t.NetworkInstance != nil {
		return t.NetworkInstance
	}
	t.NetworkInstance = &SrlNokiaSystem_System_NetworkInstance{}
	return t.NetworkInstance
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateNtp() *SrlNokiaSystem_System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &SrlNokiaSystem_System_Ntp{}
	return t.Ntp
}

// GetOrCreateP4RtServer retrieves the value of the P4RtServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateP4RtServer() *SrlNokiaSystem_System_P4RtServer {
	if t.P4RtServer != nil {
		return t.P4RtServer
	}
	t.P4RtServer = &SrlNokiaSystem_System_P4RtServer{}
	return t.P4RtServer
}

// GetOrCreatePacketLinkQualification retrieves the value of the PacketLinkQualification field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreatePacketLinkQualification() *SrlNokiaSystem_System_PacketLinkQualification {
	if t.PacketLinkQualification != nil {
		return t.PacketLinkQualification
	}
	t.PacketLinkQualification = &SrlNokiaSystem_System_PacketLinkQualification{}
	return t.PacketLinkQualification
}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateProtocols() *SrlNokiaSystem_System_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &SrlNokiaSystem_System_Protocols{}
	return t.Protocols
}

// GetOrCreateSflow retrieves the value of the Sflow field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateSflow() *SrlNokiaSystem_System_Sflow {
	if t.Sflow != nil {
		return t.Sflow
	}
	t.Sflow = &SrlNokiaSystem_System_Sflow{}
	return t.Sflow
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateSnmp() *SrlNokiaSystem_System_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &SrlNokiaSystem_System_Snmp{}
	return t.Snmp
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateSshServer() *SrlNokiaSystem_System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &SrlNokiaSystem_System_SshServer{}
	return t.SshServer
}

// GetOrCreateSync retrieves the value of the Sync field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateSync() *SrlNokiaSystem_System_Sync {
	if t.Sync != nil {
		return t.Sync
	}
	t.Sync = &SrlNokiaSystem_System_Sync{}
	return t.Sync
}

// GetOrCreateTls retrieves the value of the Tls field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System) GetOrCreateTls() *SrlNokiaSystem_System_Tls {
	if t.Tls != nil {
		return t.Tls
	}
	t.Tls = &SrlNokiaSystem_System_Tls{}
	return t.Tls
}

// GetAaa returns the value of the Aaa struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetAaa() *SrlNokiaSystem_System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetAuthentication() *SrlNokiaSystem_System_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBanner returns the value of the Banner struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Banner is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetBanner() *SrlNokiaSystem_System_Banner {
	if t != nil && t.Banner != nil {
		return t.Banner
	}
	return nil
}

// GetBoot returns the value of the Boot struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Boot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetBoot() *SrlNokiaSystem_System_Boot {
	if t != nil && t.Boot != nil {
		return t.Boot
	}
	return nil
}

// GetBridgeTable returns the value of the BridgeTable struct pointer
// from SrlNokiaSystem_System. If the receiver or the field BridgeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetBridgeTable() *SrlNokiaSystem_System_BridgeTable {
	if t != nil && t.BridgeTable != nil {
		return t.BridgeTable
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetClock() *SrlNokiaSystem_System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetConfiguration returns the value of the Configuration struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Configuration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetConfiguration() *SrlNokiaSystem_System_Configuration {
	if t != nil && t.Configuration != nil {
		return t.Configuration
	}
	return nil
}

// GetDhcpServer returns the value of the DhcpServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field DhcpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetDhcpServer() *SrlNokiaSystem_System_DhcpServer {
	if t != nil && t.DhcpServer != nil {
		return t.DhcpServer
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetDns() *SrlNokiaSystem_System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetEventHandler returns the value of the EventHandler struct pointer
// from SrlNokiaSystem_System. If the receiver or the field EventHandler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetEventHandler() *SrlNokiaSystem_System_EventHandler {
	if t != nil && t.EventHandler != nil {
		return t.EventHandler
	}
	return nil
}

// GetFtpServer returns the value of the FtpServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field FtpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetFtpServer() *SrlNokiaSystem_System_FtpServer {
	if t != nil && t.FtpServer != nil {
		return t.FtpServer
	}
	return nil
}

// GetGnmiServer returns the value of the GnmiServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field GnmiServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetGnmiServer() *SrlNokiaSystem_System_GnmiServer {
	if t != nil && t.GnmiServer != nil {
		return t.GnmiServer
	}
	return nil
}

// GetGribiServer returns the value of the GribiServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field GribiServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetGribiServer() *SrlNokiaSystem_System_GribiServer {
	if t != nil && t.GribiServer != nil {
		return t.GribiServer
	}
	return nil
}

// GetInformation returns the value of the Information struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Information is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetInformation() *SrlNokiaSystem_System_Information {
	if t != nil && t.Information != nil {
		return t.Information
	}
	return nil
}

// GetJsonRpcServer returns the value of the JsonRpcServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field JsonRpcServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetJsonRpcServer() *SrlNokiaSystem_System_JsonRpcServer {
	if t != nil && t.JsonRpcServer != nil {
		return t.JsonRpcServer
	}
	return nil
}

// GetLacp returns the value of the Lacp struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetLacp() *SrlNokiaSystem_System_Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetLldp() *SrlNokiaSystem_System_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from SrlNokiaSystem_System. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetLoadBalancing() *SrlNokiaSystem_System_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetLogging() *SrlNokiaSystem_System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMaintenance returns the value of the Maintenance struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Maintenance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetMaintenance() *SrlNokiaSystem_System_Maintenance {
	if t != nil && t.Maintenance != nil {
		return t.Maintenance
	}
	return nil
}

// GetManagement returns the value of the Management struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Management is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetManagement() *SrlNokiaSystem_System_Management {
	if t != nil && t.Management != nil {
		return t.Management
	}
	return nil
}

// GetMirroring returns the value of the Mirroring struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Mirroring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetMirroring() *SrlNokiaSystem_System_Mirroring {
	if t != nil && t.Mirroring != nil {
		return t.Mirroring
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetMpls() *SrlNokiaSystem_System_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetMtu returns the value of the Mtu struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Mtu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetMtu() *SrlNokiaSystem_System_Mtu {
	if t != nil && t.Mtu != nil {
		return t.Mtu
	}
	return nil
}

// GetMulticast returns the value of the Multicast struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetMulticast() *SrlNokiaSystem_System_Multicast {
	if t != nil && t.Multicast != nil {
		return t.Multicast
	}
	return nil
}

// GetName returns the value of the Name struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Name is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetName() *SrlNokiaSystem_System_Name {
	if t != nil && t.Name != nil {
		return t.Name
	}
	return nil
}

// GetNetworkInstance returns the value of the NetworkInstance struct pointer
// from SrlNokiaSystem_System. If the receiver or the field NetworkInstance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetNetworkInstance() *SrlNokiaSystem_System_NetworkInstance {
	if t != nil && t.NetworkInstance != nil {
		return t.NetworkInstance
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetNtp() *SrlNokiaSystem_System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetP4RtServer returns the value of the P4RtServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field P4RtServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetP4RtServer() *SrlNokiaSystem_System_P4RtServer {
	if t != nil && t.P4RtServer != nil {
		return t.P4RtServer
	}
	return nil
}

// GetPacketLinkQualification returns the value of the PacketLinkQualification struct pointer
// from SrlNokiaSystem_System. If the receiver or the field PacketLinkQualification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetPacketLinkQualification() *SrlNokiaSystem_System_PacketLinkQualification {
	if t != nil && t.PacketLinkQualification != nil {
		return t.PacketLinkQualification
	}
	return nil
}

// GetProtocols returns the value of the Protocols struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetProtocols() *SrlNokiaSystem_System_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// GetSflow returns the value of the Sflow struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Sflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetSflow() *SrlNokiaSystem_System_Sflow {
	if t != nil && t.Sflow != nil {
		return t.Sflow
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetSnmp() *SrlNokiaSystem_System_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from SrlNokiaSystem_System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetSshServer() *SrlNokiaSystem_System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetSync returns the value of the Sync struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Sync is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetSync() *SrlNokiaSystem_System_Sync {
	if t != nil && t.Sync != nil {
		return t.Sync
	}
	return nil
}

// GetTls returns the value of the Tls struct pointer
// from SrlNokiaSystem_System. If the receiver or the field Tls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System) GetTls() *SrlNokiaSystem_System_Tls {
	if t != nil && t.Tls != nil {
		return t.Tls
	}
	return nil
}

// GetTraceOptions retrieves the value of the leaf TraceOptions from the SrlNokiaSystem_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TraceOptions is set, it can
// safely use t.GetTraceOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TraceOptions == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System) GetTraceOptions() []E_SrlNokiaSystem_System_TraceOptions {
	if t == nil || t.TraceOptions == nil {
		return nil
	}
	return t.TraceOptions
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aaa.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Banner.PopulateDefaults()
	t.Boot.PopulateDefaults()
	t.BridgeTable.PopulateDefaults()
	t.Clock.PopulateDefaults()
	t.Configuration.PopulateDefaults()
	t.DhcpServer.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.EventHandler.PopulateDefaults()
	t.FtpServer.PopulateDefaults()
	t.GnmiServer.PopulateDefaults()
	t.GribiServer.PopulateDefaults()
	t.Information.PopulateDefaults()
	t.JsonRpcServer.PopulateDefaults()
	t.Lacp.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.Logging.PopulateDefaults()
	t.Maintenance.PopulateDefaults()
	t.Management.PopulateDefaults()
	t.Mirroring.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Mtu.PopulateDefaults()
	t.Multicast.PopulateDefaults()
	t.Name.PopulateDefaults()
	t.NetworkInstance.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.P4RtServer.PopulateDefaults()
	t.PacketLinkQualification.PopulateDefaults()
	t.Protocols.PopulateDefaults()
	t.Sflow.PopulateDefaults()
	t.Snmp.PopulateDefaults()
	t.SshServer.PopulateDefaults()
	t.Sync.PopulateDefaults()
	t.Tls.PopulateDefaults()
	for _, e := range t.License {
		e.PopulateDefaults()
	}
	for _, e := range t.RaGuardPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System.
func (*SrlNokiaSystem_System) ΛBelongingModule() string {
	return "srl_nokia-system"
}

// SrlNokiaSystem_System_Aaa represents the /srl_nokia-system/system/aaa YANG schema element.
type SrlNokiaSystem_System_Aaa struct {
	Accounting     *SrlNokiaSystem_System_Aaa_Accounting             `path:"accounting" module:"srl_nokia-aaa"`
	Authentication *SrlNokiaSystem_System_Aaa_Authentication         `path:"authentication" module:"srl_nokia-aaa"`
	Authorization  *SrlNokiaSystem_System_Aaa_Authorization          `path:"authorization" module:"srl_nokia-aaa"`
	ServerGroup    map[string]*SrlNokiaSystem_System_Aaa_ServerGroup `path:"server-group" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// SrlNokiaSystem_System_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Aaa) NewServerGroup(Name string) (*SrlNokiaSystem_System_Aaa_ServerGroup, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*SrlNokiaSystem_System_Aaa_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &SrlNokiaSystem_System_Aaa_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the SrlNokiaSystem_System_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Aaa) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Aaa) GetOrCreateServerGroup(Name string) *SrlNokiaSystem_System_Aaa_ServerGroup {
	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of SrlNokiaSystem_System_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Aaa) GetServerGroup(Name string) *SrlNokiaSystem_System_Aaa_ServerGroup {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Aaa) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied SrlNokiaSystem_System_Aaa_ServerGroup struct to the
// list ServerGroup of SrlNokiaSystem_System_Aaa. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Aaa_ServerGroup already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Aaa) AppendServerGroup(v *SrlNokiaSystem_System_Aaa_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*SrlNokiaSystem_System_Aaa_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa) GetOrCreateAccounting() *SrlNokiaSystem_System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &SrlNokiaSystem_System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa) GetOrCreateAuthentication() *SrlNokiaSystem_System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaSystem_System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa) GetOrCreateAuthorization() *SrlNokiaSystem_System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &SrlNokiaSystem_System_Aaa_Authorization{}
	return t.Authorization
}

// GetAccounting returns the value of the Accounting struct pointer
// from SrlNokiaSystem_System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa) GetAccounting() *SrlNokiaSystem_System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaSystem_System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa) GetAuthentication() *SrlNokiaSystem_System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from SrlNokiaSystem_System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa) GetAuthorization() *SrlNokiaSystem_System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accounting.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	for _, e := range t.ServerGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa.
func (*SrlNokiaSystem_System_Aaa) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Accounting represents the /srl_nokia-system/system/aaa/accounting YANG schema element.
type SrlNokiaSystem_System_Aaa_Accounting struct {
	AccountingMethod []string                                                                                  `path:"accounting-method" module:"srl_nokia-aaa"`
	Event            map[E_SrlNokiaAaaTypes_AaaAccountingEventType]*SrlNokiaSystem_System_Aaa_Accounting_Event `path:"event" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Accounting) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// SrlNokiaSystem_System_Aaa_Accounting struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Aaa_Accounting) NewEvent(EventType E_SrlNokiaAaaTypes_AaaAccountingEventType) (*SrlNokiaSystem_System_Aaa_Accounting_Event, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_SrlNokiaAaaTypes_AaaAccountingEventType]*SrlNokiaSystem_System_Aaa_Accounting_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &SrlNokiaSystem_System_Aaa_Accounting_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the SrlNokiaSystem_System_Aaa_Accounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Aaa_Accounting) RenameEvent(oldK, newK E_SrlNokiaAaaTypes_AaaAccountingEventType) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_Accounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Aaa_Accounting) GetOrCreateEvent(
	EventType E_SrlNokiaAaaTypes_AaaAccountingEventType,
) *SrlNokiaSystem_System_Aaa_Accounting_Event {
	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of SrlNokiaSystem_System_Aaa_Accounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Accounting) GetEvent(EventType E_SrlNokiaAaaTypes_AaaAccountingEventType) *SrlNokiaSystem_System_Aaa_Accounting_Event {
	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_Accounting. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Aaa_Accounting) DeleteEvent(EventType E_SrlNokiaAaaTypes_AaaAccountingEventType) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied SrlNokiaSystem_System_Aaa_Accounting_Event struct to the
// list Event of SrlNokiaSystem_System_Aaa_Accounting. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Aaa_Accounting_Event already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Aaa_Accounting) AppendEvent(v *SrlNokiaSystem_System_Aaa_Accounting_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_SrlNokiaAaaTypes_AaaAccountingEventType]*SrlNokiaSystem_System_Aaa_Accounting_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the SrlNokiaSystem_System_Aaa_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingMethod is set, it can
// safely use t.GetAccountingMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingMethod == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Accounting) GetAccountingMethod() []string {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Accounting.
func (*SrlNokiaSystem_System_Aaa_Accounting) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Accounting_Event represents the /srl_nokia-system/system/aaa/accounting/event YANG schema element.
type SrlNokiaSystem_System_Aaa_Accounting_Event struct {
	EventType E_SrlNokiaAaaTypes_AaaAccountingEventType  `path:"event-type" module:"srl_nokia-aaa"`
	Record    E_SrlNokiaAaaTypes_AaaAccountingRecordType `path:"record" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Accounting_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the SrlNokiaSystem_System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) GetEventType() E_SrlNokiaAaaTypes_AaaAccountingEventType {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the SrlNokiaSystem_System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) GetRecord() E_SrlNokiaAaaTypes_AaaAccountingRecordType {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Accounting_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Aaa_Accounting_Event struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Accounting_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Accounting_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Accounting_Event.
func (*SrlNokiaSystem_System_Aaa_Accounting_Event) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication represents the /srl_nokia-system/system/aaa/authentication YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication struct {
	AdminUser            *SrlNokiaSystem_System_Aaa_Authentication_AdminUser       `path:"admin-user" module:"srl_nokia-aaa"`
	AuthenticationMethod []string                                                  `path:"authentication-method" module:"srl_nokia-aaa"`
	ExitOnReject         *bool                                                     `path:"exit-on-reject" module:"srl_nokia-aaa"`
	IdleTimeout          *uint32                                                   `path:"idle-timeout" module:"srl_nokia-aaa"`
	LinuxadminUser       *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser  `path:"linuxadmin-user" module:"srl_nokia-aaa"`
	Password             *SrlNokiaSystem_System_Aaa_Authentication_Password        `path:"password" module:"srl_nokia-aaa"`
	User                 map[string]*SrlNokiaSystem_System_Aaa_Authentication_User `path:"user" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// SrlNokiaSystem_System_Aaa_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Aaa_Authentication) NewUser(Username string) (*SrlNokiaSystem_System_Aaa_Authentication_User, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*SrlNokiaSystem_System_Aaa_Authentication_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &SrlNokiaSystem_System_Aaa_Authentication_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the SrlNokiaSystem_System_Aaa_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Aaa_Authentication) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetOrCreateUser(Username string) *SrlNokiaSystem_System_Aaa_Authentication_User {
	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of SrlNokiaSystem_System_Aaa_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetUser(Username string) *SrlNokiaSystem_System_Aaa_Authentication_User {
	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_Authentication. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Aaa_Authentication) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied SrlNokiaSystem_System_Aaa_Authentication_User struct to the
// list User of SrlNokiaSystem_System_Aaa_Authentication. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Aaa_Authentication_User already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Aaa_Authentication) AppendUser(v *SrlNokiaSystem_System_Aaa_Authentication_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*SrlNokiaSystem_System_Aaa_Authentication_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetOrCreateAdminUser() *SrlNokiaSystem_System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &SrlNokiaSystem_System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetOrCreateLinuxadminUser retrieves the value of the LinuxadminUser field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetOrCreateLinuxadminUser() *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser {
	if t.LinuxadminUser != nil {
		return t.LinuxadminUser
	}
	t.LinuxadminUser = &SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser{}
	return t.LinuxadminUser
}

// GetOrCreatePassword retrieves the value of the Password field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetOrCreatePassword() *SrlNokiaSystem_System_Aaa_Authentication_Password {
	if t.Password != nil {
		return t.Password
	}
	t.Password = &SrlNokiaSystem_System_Aaa_Authentication_Password{}
	return t.Password
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from SrlNokiaSystem_System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetAdminUser() *SrlNokiaSystem_System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetLinuxadminUser returns the value of the LinuxadminUser struct pointer
// from SrlNokiaSystem_System_Aaa_Authentication. If the receiver or the field LinuxadminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetLinuxadminUser() *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser {
	if t != nil && t.LinuxadminUser != nil {
		return t.LinuxadminUser
	}
	return nil
}

// GetPassword returns the value of the Password struct pointer
// from SrlNokiaSystem_System_Aaa_Authentication. If the receiver or the field Password is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetPassword() *SrlNokiaSystem_System_Aaa_Authentication_Password {
	if t != nil && t.Password != nil {
		return t.Password
	}
	return nil
}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the SrlNokiaSystem_System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationMethod is set, it can
// safely use t.GetAuthenticationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationMethod == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetAuthenticationMethod() []string {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// GetExitOnReject retrieves the value of the leaf ExitOnReject from the SrlNokiaSystem_System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExitOnReject is set, it can
// safely use t.GetExitOnReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExitOnReject == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetExitOnReject() bool {
	if t == nil || t.ExitOnReject == nil {
		return false
	}
	return *t.ExitOnReject
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the SrlNokiaSystem_System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication) GetIdleTimeout() uint32 {
	if t == nil || t.IdleTimeout == nil {
		return 600
	}
	return *t.IdleTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExitOnReject == nil {
		var v bool = false
		t.ExitOnReject = &v
	}
	if t.IdleTimeout == nil {
		var v uint32 = 600
		t.IdleTimeout = &v
	}
	t.AdminUser.PopulateDefaults()
	t.LinuxadminUser.PopulateDefaults()
	t.Password.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication.
func (*SrlNokiaSystem_System_Aaa_Authentication) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication_AdminUser represents the /srl_nokia-system/system/aaa/authentication/admin-user YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_AdminUser struct {
	Password      *string  `path:"password" module:"srl_nokia-aaa"`
	Role          []string `path:"role" module:"srl_nokia-aaa"`
	SpiffeIds     []string `path:"spiffe-ids" module:"srl_nokia-aaa"`
	SshKey        []string `path:"ssh-key" module:"srl_nokia-aaa"`
	SshPrincipals []string `path:"ssh-principals" module:"srl_nokia-aaa"`
	Superuser     *bool    `path:"superuser" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) GetPassword() string {
	if t == nil || t.Password == nil {
		return "$ar2$aOvsuj0ALlU=$r750fMa3ZEA/Di8dIfU2fQ=="
	}
	return *t.Password
}

// GetRole retrieves the value of the leaf Role from the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) GetRole() []string {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSpiffeIds retrieves the value of the leaf SpiffeIds from the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiffeIds is set, it can
// safely use t.GetSpiffeIds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiffeIds == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) GetSpiffeIds() []string {
	if t == nil || t.SpiffeIds == nil {
		return nil
	}
	return t.SpiffeIds
}

// GetSshKey retrieves the value of the leaf SshKey from the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) GetSshKey() []string {
	if t == nil || t.SshKey == nil {
		return nil
	}
	return t.SshKey
}

// GetSshPrincipals retrieves the value of the leaf SshPrincipals from the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshPrincipals is set, it can
// safely use t.GetSshPrincipals() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshPrincipals == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) GetSshPrincipals() []string {
	if t == nil || t.SshPrincipals == nil {
		return nil
	}
	return t.SshPrincipals
}

// GetSuperuser retrieves the value of the leaf Superuser from the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Superuser is set, it can
// safely use t.GetSuperuser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Superuser == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) GetSuperuser() bool {
	if t == nil || t.Superuser == nil {
		return true
	}
	return *t.Superuser
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication_AdminUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Password == nil {
		var v string = "$ar2$aOvsuj0ALlU=$r750fMa3ZEA/Di8dIfU2fQ=="
		t.Password = &v
	}
	if t.Superuser == nil {
		var v bool = true
		t.Superuser = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication_AdminUser.
func (*SrlNokiaSystem_System_Aaa_Authentication_AdminUser) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser represents the /srl_nokia-system/system/aaa/authentication/linuxadmin-user YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser struct {
	Password      *string  `path:"password" module:"srl_nokia-aaa"`
	SshKey        []string `path:"ssh-key" module:"srl_nokia-aaa"`
	SshPrincipals []string `path:"ssh-principals" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) GetPassword() string {
	if t == nil || t.Password == nil {
		return "$6$c66a15569d3f5952$kA2WPt9iqR5uMbaCUBNxsjKyXROQFdJtV1HX0CFY9wk7F326/yB3h.dERX9cH7YpeJ1N872hjzTb2tlaZFwwg0"
	}
	return *t.Password
}

// GetSshKey retrieves the value of the leaf SshKey from the SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) GetSshKey() []string {
	if t == nil || t.SshKey == nil {
		return nil
	}
	return t.SshKey
}

// GetSshPrincipals retrieves the value of the leaf SshPrincipals from the SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshPrincipals is set, it can
// safely use t.GetSshPrincipals() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshPrincipals == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) GetSshPrincipals() []string {
	if t == nil || t.SshPrincipals == nil {
		return nil
	}
	return t.SshPrincipals
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Password == nil {
		var v string = "$6$c66a15569d3f5952$kA2WPt9iqR5uMbaCUBNxsjKyXROQFdJtV1HX0CFY9wk7F326/yB3h.dERX9cH7YpeJ1N872hjzTb2tlaZFwwg0"
		t.Password = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser.
func (*SrlNokiaSystem_System_Aaa_Authentication_LinuxadminUser) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication_Password represents the /srl_nokia-system/system/aaa/authentication/password YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_Password struct {
	Aging              *uint16                                                            `path:"aging" module:"srl_nokia-aaa"`
	ChangeOnFirstLogin *bool                                                              `path:"change-on-first-login" module:"srl_nokia-aaa"`
	ComplexityRules    *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules `path:"complexity-rules" module:"srl_nokia-aaa"`
	HashMethod         E_SrlNokiaSystem_System_Aaa_Authentication_Password_HashMethod     `path:"hash-method" module:"srl_nokia-aaa"`
	History            *uint16                                                            `path:"history" module:"srl_nokia-aaa"`
	LockoutPolicy      *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy   `path:"lockout-policy" module:"srl_nokia-aaa"`
	RequireNtpSync     *bool                                                              `path:"require-ntp-sync" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_Password implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_Password) IsYANGGoStruct() {}

// GetOrCreateComplexityRules retrieves the value of the ComplexityRules field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetOrCreateComplexityRules() *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules {
	if t.ComplexityRules != nil {
		return t.ComplexityRules
	}
	t.ComplexityRules = &SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules{}
	return t.ComplexityRules
}

// GetOrCreateLockoutPolicy retrieves the value of the LockoutPolicy field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetOrCreateLockoutPolicy() *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy {
	if t.LockoutPolicy != nil {
		return t.LockoutPolicy
	}
	t.LockoutPolicy = &SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy{}
	return t.LockoutPolicy
}

// GetComplexityRules returns the value of the ComplexityRules struct pointer
// from SrlNokiaSystem_System_Aaa_Authentication_Password. If the receiver or the field ComplexityRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetComplexityRules() *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules {
	if t != nil && t.ComplexityRules != nil {
		return t.ComplexityRules
	}
	return nil
}

// GetLockoutPolicy returns the value of the LockoutPolicy struct pointer
// from SrlNokiaSystem_System_Aaa_Authentication_Password. If the receiver or the field LockoutPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetLockoutPolicy() *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy {
	if t != nil && t.LockoutPolicy != nil {
		return t.LockoutPolicy
	}
	return nil
}

// GetAging retrieves the value of the leaf Aging from the SrlNokiaSystem_System_Aaa_Authentication_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetAging() uint16 {
	if t == nil || t.Aging == nil {
		return 0
	}
	return *t.Aging
}

// GetChangeOnFirstLogin retrieves the value of the leaf ChangeOnFirstLogin from the SrlNokiaSystem_System_Aaa_Authentication_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChangeOnFirstLogin is set, it can
// safely use t.GetChangeOnFirstLogin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChangeOnFirstLogin == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetChangeOnFirstLogin() bool {
	if t == nil || t.ChangeOnFirstLogin == nil {
		return false
	}
	return *t.ChangeOnFirstLogin
}

// GetHashMethod retrieves the value of the leaf HashMethod from the SrlNokiaSystem_System_Aaa_Authentication_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMethod is set, it can
// safely use t.GetHashMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMethod == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetHashMethod() E_SrlNokiaSystem_System_Aaa_Authentication_Password_HashMethod {
	if t == nil || t.HashMethod == 0 {
		return SrlNokiaSystem_System_Aaa_Authentication_Password_HashMethod_ar2
	}
	return t.HashMethod
}

// GetHistory retrieves the value of the leaf History from the SrlNokiaSystem_System_Aaa_Authentication_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if History is set, it can
// safely use t.GetHistory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.History == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetHistory() uint16 {
	if t == nil || t.History == nil {
		return 0
	}
	return *t.History
}

// GetRequireNtpSync retrieves the value of the leaf RequireNtpSync from the SrlNokiaSystem_System_Aaa_Authentication_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequireNtpSync is set, it can
// safely use t.GetRequireNtpSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequireNtpSync == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) GetRequireNtpSync() bool {
	if t == nil || t.RequireNtpSync == nil {
		return true
	}
	return *t.RequireNtpSync
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication_Password
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v uint16 = 0
		t.Aging = &v
	}
	if t.ChangeOnFirstLogin == nil {
		var v bool = false
		t.ChangeOnFirstLogin = &v
	}
	if t.HashMethod == 0 {
		t.HashMethod = SrlNokiaSystem_System_Aaa_Authentication_Password_HashMethod_ar2
	}
	if t.History == nil {
		var v uint16 = 0
		t.History = &v
	}
	if t.RequireNtpSync == nil {
		var v bool = true
		t.RequireNtpSync = &v
	}
	t.ComplexityRules.PopulateDefaults()
	t.LockoutPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication_Password"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication_Password.
func (*SrlNokiaSystem_System_Aaa_Authentication_Password) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules represents the /srl_nokia-system/system/aaa/authentication/password/complexity-rules YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules struct {
	AllowUsername           *bool   `path:"allow-username" module:"srl_nokia-aaa"`
	MaximumLength           *uint16 `path:"maximum-length" module:"srl_nokia-aaa"`
	MinimumLength           *uint16 `path:"minimum-length" module:"srl_nokia-aaa"`
	MinimumLowercase        *uint16 `path:"minimum-lowercase" module:"srl_nokia-aaa"`
	MinimumNumeric          *uint16 `path:"minimum-numeric" module:"srl_nokia-aaa"`
	MinimumSpecialCharacter *uint16 `path:"minimum-special-character" module:"srl_nokia-aaa"`
	MinimumUppercase        *uint16 `path:"minimum-uppercase" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) IsYANGGoStruct() {}

// GetAllowUsername retrieves the value of the leaf AllowUsername from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUsername is set, it can
// safely use t.GetAllowUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUsername == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetAllowUsername() bool {
	if t == nil || t.AllowUsername == nil {
		return true
	}
	return *t.AllowUsername
}

// GetMaximumLength retrieves the value of the leaf MaximumLength from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumLength is set, it can
// safely use t.GetMaximumLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumLength == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetMaximumLength() uint16 {
	if t == nil || t.MaximumLength == nil {
		return 1023
	}
	return *t.MaximumLength
}

// GetMinimumLength retrieves the value of the leaf MinimumLength from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumLength is set, it can
// safely use t.GetMinimumLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumLength == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetMinimumLength() uint16 {
	if t == nil || t.MinimumLength == nil {
		return 1
	}
	return *t.MinimumLength
}

// GetMinimumLowercase retrieves the value of the leaf MinimumLowercase from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumLowercase is set, it can
// safely use t.GetMinimumLowercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumLowercase == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetMinimumLowercase() uint16 {
	if t == nil || t.MinimumLowercase == nil {
		return 0
	}
	return *t.MinimumLowercase
}

// GetMinimumNumeric retrieves the value of the leaf MinimumNumeric from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumNumeric is set, it can
// safely use t.GetMinimumNumeric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumNumeric == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetMinimumNumeric() uint16 {
	if t == nil || t.MinimumNumeric == nil {
		return 0
	}
	return *t.MinimumNumeric
}

// GetMinimumSpecialCharacter retrieves the value of the leaf MinimumSpecialCharacter from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumSpecialCharacter is set, it can
// safely use t.GetMinimumSpecialCharacter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumSpecialCharacter == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetMinimumSpecialCharacter() uint16 {
	if t == nil || t.MinimumSpecialCharacter == nil {
		return 0
	}
	return *t.MinimumSpecialCharacter
}

// GetMinimumUppercase retrieves the value of the leaf MinimumUppercase from the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumUppercase is set, it can
// safely use t.GetMinimumUppercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumUppercase == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) GetMinimumUppercase() uint16 {
	if t == nil || t.MinimumUppercase == nil {
		return 0
	}
	return *t.MinimumUppercase
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUsername == nil {
		var v bool = true
		t.AllowUsername = &v
	}
	if t.MaximumLength == nil {
		var v uint16 = 1023
		t.MaximumLength = &v
	}
	if t.MinimumLength == nil {
		var v uint16 = 1
		t.MinimumLength = &v
	}
	if t.MinimumLowercase == nil {
		var v uint16 = 0
		t.MinimumLowercase = &v
	}
	if t.MinimumNumeric == nil {
		var v uint16 = 0
		t.MinimumNumeric = &v
	}
	if t.MinimumSpecialCharacter == nil {
		var v uint16 = 0
		t.MinimumSpecialCharacter = &v
	}
	if t.MinimumUppercase == nil {
		var v uint16 = 0
		t.MinimumUppercase = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules.
func (*SrlNokiaSystem_System_Aaa_Authentication_Password_ComplexityRules) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy represents the /srl_nokia-system/system/aaa/authentication/password/lockout-policy YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy struct {
	Attempts *uint16 `path:"attempts" module:"srl_nokia-aaa"`
	Lockout  *uint16 `path:"lockout" module:"srl_nokia-aaa"`
	Time     *uint16 `path:"time" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) IsYANGGoStruct() {}

// GetAttempts retrieves the value of the leaf Attempts from the SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attempts is set, it can
// safely use t.GetAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attempts == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) GetAttempts() uint16 {
	if t == nil || t.Attempts == nil {
		return 0
	}
	return *t.Attempts
}

// GetLockout retrieves the value of the leaf Lockout from the SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lockout is set, it can
// safely use t.GetLockout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lockout == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) GetLockout() uint16 {
	if t == nil || t.Lockout == nil {
		return 15
	}
	return *t.Lockout
}

// GetTime retrieves the value of the leaf Time from the SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) GetTime() uint16 {
	if t == nil || t.Time == nil {
		return 1
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Attempts == nil {
		var v uint16 = 0
		t.Attempts = &v
	}
	if t.Lockout == nil {
		var v uint16 = 15
		t.Lockout = &v
	}
	if t.Time == nil {
		var v uint16 = 1
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy.
func (*SrlNokiaSystem_System_Aaa_Authentication_Password_LockoutPolicy) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authentication_User represents the /srl_nokia-system/system/aaa/authentication/user YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_User struct {
	Password      *string  `path:"password" module:"srl_nokia-aaa"`
	Role          []string `path:"role" module:"srl_nokia-aaa"`
	SpiffeIds     []string `path:"spiffe-ids" module:"srl_nokia-aaa"`
	SshKey        []string `path:"ssh-key" module:"srl_nokia-aaa"`
	SshPrincipals []string `path:"ssh-principals" module:"srl_nokia-aaa"`
	Superuser     *bool    `path:"superuser" module:"srl_nokia-aaa"`
	Username      *string  `path:"username" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_User) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRole retrieves the value of the leaf Role from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetRole() []string {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSpiffeIds retrieves the value of the leaf SpiffeIds from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiffeIds is set, it can
// safely use t.GetSpiffeIds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiffeIds == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetSpiffeIds() []string {
	if t == nil || t.SpiffeIds == nil {
		return nil
	}
	return t.SpiffeIds
}

// GetSshKey retrieves the value of the leaf SshKey from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetSshKey() []string {
	if t == nil || t.SshKey == nil {
		return nil
	}
	return t.SshKey
}

// GetSshPrincipals retrieves the value of the leaf SshPrincipals from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshPrincipals is set, it can
// safely use t.GetSshPrincipals() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshPrincipals == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetSshPrincipals() []string {
	if t == nil || t.SshPrincipals == nil {
		return nil
	}
	return t.SshPrincipals
}

// GetSuperuser retrieves the value of the leaf Superuser from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Superuser is set, it can
// safely use t.GetSuperuser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Superuser == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetSuperuser() bool {
	if t == nil || t.Superuser == nil {
		return false
	}
	return *t.Superuser
}

// GetUsername retrieves the value of the leaf Username from the SrlNokiaSystem_System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authentication_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Superuser == nil {
		var v bool = false
		t.Superuser = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Aaa_Authentication_User struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authentication_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authentication_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authentication_User.
func (*SrlNokiaSystem_System_Aaa_Authentication_User) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authorization represents the /srl_nokia-system/system/aaa/authorization YANG schema element.
type SrlNokiaSystem_System_Aaa_Authorization struct {
	Role map[string]*SrlNokiaSystem_System_Aaa_Authorization_Role `path:"role" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authorization) IsYANGGoStruct() {}

// NewRole creates a new entry in the Role list of the
// SrlNokiaSystem_System_Aaa_Authorization struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Aaa_Authorization) NewRole(Rolename string) (*SrlNokiaSystem_System_Aaa_Authorization_Role, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Role == nil {
		t.Role = make(map[string]*SrlNokiaSystem_System_Aaa_Authorization_Role)
	}

	key := Rolename

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Role[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Role", key)
	}

	t.Role[key] = &SrlNokiaSystem_System_Aaa_Authorization_Role{
		Rolename: &Rolename,
	}

	return t.Role[key], nil
}

// RenameRole renames an entry in the list Role within
// the SrlNokiaSystem_System_Aaa_Authorization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Aaa_Authorization) RenameRole(oldK, newK string) error {
	if _, ok := t.Role[newK]; ok {
		return fmt.Errorf("key %v already exists in Role", newK)
	}

	e, ok := t.Role[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Role", oldK)
	}
	e.Rolename = &newK

	t.Role[newK] = e
	delete(t.Role, oldK)
	return nil
}

// GetOrCreateRole retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_Authorization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Aaa_Authorization) GetOrCreateRole(Rolename string) *SrlNokiaSystem_System_Aaa_Authorization_Role {
	key := Rolename

	if v, ok := t.Role[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRole(Rolename)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRole got unexpected error: %v", err))
	}
	return v
}

// GetRole retrieves the value with the specified key from
// the Role map field of SrlNokiaSystem_System_Aaa_Authorization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authorization) GetRole(Rolename string) *SrlNokiaSystem_System_Aaa_Authorization_Role {
	if t == nil {
		return nil
	}

	key := Rolename

	if lm, ok := t.Role[key]; ok {
		return lm
	}
	return nil
}

// DeleteRole deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_Authorization. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Aaa_Authorization) DeleteRole(Rolename string) {
	key := Rolename

	delete(t.Role, key)
}

// AppendRole appends the supplied SrlNokiaSystem_System_Aaa_Authorization_Role struct to the
// list Role of SrlNokiaSystem_System_Aaa_Authorization. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Aaa_Authorization_Role already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Aaa_Authorization) AppendRole(v *SrlNokiaSystem_System_Aaa_Authorization_Role) error {
	if v.Rolename == nil {
		return fmt.Errorf("invalid nil key received for Rolename")
	}

	key := *v.Rolename

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Role == nil {
		t.Role = make(map[string]*SrlNokiaSystem_System_Aaa_Authorization_Role)
	}

	if _, ok := t.Role[key]; ok {
		return fmt.Errorf("duplicate key for list Role %v", key)
	}

	t.Role[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Role {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authorization.
func (*SrlNokiaSystem_System_Aaa_Authorization) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authorization_Role represents the /srl_nokia-system/system/aaa/authorization/role YANG schema element.
type SrlNokiaSystem_System_Aaa_Authorization_Role struct {
	Cli       *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli         `path:"cli" module:"srl_nokia-aaa"`
	Rolename  *string                                                   `path:"rolename" module:"srl_nokia-aaa"`
	Services  []E_SrlNokiaSystem_System_Aaa_Authorization_Role_Services `path:"services" module:"srl_nokia-aaa"`
	Superuser *bool                                                     `path:"superuser" module:"srl_nokia-aaa"`
	Tacacs    *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs      `path:"tacacs" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authorization_Role implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authorization_Role) IsYANGGoStruct() {}

// GetOrCreateCli retrieves the value of the Cli field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetOrCreateCli() *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli {
	if t.Cli != nil {
		return t.Cli
	}
	t.Cli = &SrlNokiaSystem_System_Aaa_Authorization_Role_Cli{}
	return t.Cli
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetOrCreateTacacs() *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs{}
	return t.Tacacs
}

// GetCli returns the value of the Cli struct pointer
// from SrlNokiaSystem_System_Aaa_Authorization_Role. If the receiver or the field Cli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetCli() *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli {
	if t != nil && t.Cli != nil {
		return t.Cli
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from SrlNokiaSystem_System_Aaa_Authorization_Role. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetTacacs() *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetRolename retrieves the value of the leaf Rolename from the SrlNokiaSystem_System_Aaa_Authorization_Role
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rolename is set, it can
// safely use t.GetRolename() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rolename == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetRolename() string {
	if t == nil || t.Rolename == nil {
		return ""
	}
	return *t.Rolename
}

// GetServices retrieves the value of the leaf Services from the SrlNokiaSystem_System_Aaa_Authorization_Role
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Services is set, it can
// safely use t.GetServices() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Services == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetServices() []E_SrlNokiaSystem_System_Aaa_Authorization_Role_Services {
	if t == nil || t.Services == nil {
		return nil
	}
	return t.Services
}

// GetSuperuser retrieves the value of the leaf Superuser from the SrlNokiaSystem_System_Aaa_Authorization_Role
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Superuser is set, it can
// safely use t.GetSuperuser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Superuser == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) GetSuperuser() bool {
	if t == nil || t.Superuser == nil {
		return false
	}
	return *t.Superuser
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authorization_Role
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Superuser == nil {
		var v bool = false
		t.Superuser = &v
	}
	t.Cli.PopulateDefaults()
	t.Tacacs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Aaa_Authorization_Role struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Rolename == nil {
		return nil, fmt.Errorf("nil value for key Rolename")
	}

	return map[string]interface{}{
		"rolename": *t.Rolename,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authorization_Role"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authorization_Role.
func (*SrlNokiaSystem_System_Aaa_Authorization_Role) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authorization_Role_Cli represents the /srl_nokia-system/system/aaa/authorization/role/cli YANG schema element.
type SrlNokiaSystem_System_Aaa_Authorization_Role_Cli struct {
	AllowCommandList  []string `path:"allow-command-list" module:"srl_nokia-aaa"`
	DenyCommandList   []string `path:"deny-command-list" module:"srl_nokia-aaa"`
	LoadGlobalPlugins *bool    `path:"load-global-plugins" module:"srl_nokia-aaa"`
	LoadUserPlugins   *bool    `path:"load-user-plugins" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authorization_Role_Cli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) IsYANGGoStruct() {}

// GetAllowCommandList retrieves the value of the leaf AllowCommandList from the SrlNokiaSystem_System_Aaa_Authorization_Role_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowCommandList is set, it can
// safely use t.GetAllowCommandList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowCommandList == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) GetAllowCommandList() []string {
	if t == nil || t.AllowCommandList == nil {
		return nil
	}
	return t.AllowCommandList
}

// GetDenyCommandList retrieves the value of the leaf DenyCommandList from the SrlNokiaSystem_System_Aaa_Authorization_Role_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DenyCommandList is set, it can
// safely use t.GetDenyCommandList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DenyCommandList == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) GetDenyCommandList() []string {
	if t == nil || t.DenyCommandList == nil {
		return nil
	}
	return t.DenyCommandList
}

// GetLoadGlobalPlugins retrieves the value of the leaf LoadGlobalPlugins from the SrlNokiaSystem_System_Aaa_Authorization_Role_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadGlobalPlugins is set, it can
// safely use t.GetLoadGlobalPlugins() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadGlobalPlugins == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) GetLoadGlobalPlugins() bool {
	if t == nil || t.LoadGlobalPlugins == nil {
		return true
	}
	return *t.LoadGlobalPlugins
}

// GetLoadUserPlugins retrieves the value of the leaf LoadUserPlugins from the SrlNokiaSystem_System_Aaa_Authorization_Role_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadUserPlugins is set, it can
// safely use t.GetLoadUserPlugins() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadUserPlugins == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) GetLoadUserPlugins() bool {
	if t == nil || t.LoadUserPlugins == nil {
		return true
	}
	return *t.LoadUserPlugins
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authorization_Role_Cli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoadGlobalPlugins == nil {
		var v bool = true
		t.LoadGlobalPlugins = &v
	}
	if t.LoadUserPlugins == nil {
		var v bool = true
		t.LoadUserPlugins = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authorization_Role_Cli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authorization_Role_Cli.
func (*SrlNokiaSystem_System_Aaa_Authorization_Role_Cli) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs represents the /srl_nokia-system/system/aaa/authorization/role/tacacs YANG schema element.
type SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs struct {
	PrivLvl *uint8 `path:"priv-lvl" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) IsYANGGoStruct() {}

// GetPrivLvl retrieves the value of the leaf PrivLvl from the SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivLvl is set, it can
// safely use t.GetPrivLvl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivLvl == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) GetPrivLvl() uint8 {
	if t == nil || t.PrivLvl == nil {
		return 0
	}
	return *t.PrivLvl
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs.
func (*SrlNokiaSystem_System_Aaa_Authorization_Role_Tacacs) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_ServerGroup represents the /srl_nokia-system/system/aaa/server-group YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup struct {
	Name                 *string                                                  `path:"name" module:"srl_nokia-aaa"`
	PrivLvlAuthorization *bool                                                    `path:"priv-lvl-authorization" module:"srl_nokia-aaa"`
	Server               map[string]*SrlNokiaSystem_System_Aaa_ServerGroup_Server `path:"server" module:"srl_nokia-aaa"`
	Timeout              *uint16                                                  `path:"timeout" module:"srl_nokia-aaa"`
	Type                 E_SrlNokiaAaaTypes_AaaServerType                         `path:"type" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// SrlNokiaSystem_System_Aaa_ServerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) NewServer(Address string) (*SrlNokiaSystem_System_Aaa_ServerGroup_Server, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*SrlNokiaSystem_System_Aaa_ServerGroup_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &SrlNokiaSystem_System_Aaa_ServerGroup_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the SrlNokiaSystem_System_Aaa_ServerGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_ServerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) GetOrCreateServer(Address string) *SrlNokiaSystem_System_Aaa_ServerGroup_Server {
	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of SrlNokiaSystem_System_Aaa_ServerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) GetServer(Address string) *SrlNokiaSystem_System_Aaa_ServerGroup_Server {
	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Aaa_ServerGroup. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied SrlNokiaSystem_System_Aaa_ServerGroup_Server struct to the
// list Server of SrlNokiaSystem_System_Aaa_ServerGroup. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Aaa_ServerGroup_Server already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) AppendServer(v *SrlNokiaSystem_System_Aaa_ServerGroup_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*SrlNokiaSystem_System_Aaa_ServerGroup_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrivLvlAuthorization retrieves the value of the leaf PrivLvlAuthorization from the SrlNokiaSystem_System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivLvlAuthorization is set, it can
// safely use t.GetPrivLvlAuthorization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivLvlAuthorization == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) GetPrivLvlAuthorization() bool {
	if t == nil || t.PrivLvlAuthorization == nil {
		return false
	}
	return *t.PrivLvlAuthorization
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaSystem_System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 10
	}
	return *t.Timeout
}

// GetType retrieves the value of the leaf Type from the SrlNokiaSystem_System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) GetType() E_SrlNokiaAaaTypes_AaaServerType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_ServerGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrivLvlAuthorization == nil {
		var v bool = false
		t.PrivLvlAuthorization = &v
	}
	if t.Timeout == nil {
		var v uint16 = 10
		t.Timeout = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Aaa_ServerGroup struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_ServerGroup.
func (*SrlNokiaSystem_System_Aaa_ServerGroup) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_ServerGroup_Server represents the /srl_nokia-system/system/aaa/server-group/server YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup_Server struct {
	Address         *string                                              `path:"address" module:"srl_nokia-aaa"`
	Name            *string                                              `path:"name" module:"srl_nokia-aaa"`
	NetworkInstance *string                                              `path:"network-instance" module:"srl_nokia-aaa"`
	Radius          *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius `path:"radius" module:"srl_nokia-aaa"`
	Tacacs          *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs `path:"tacacs" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetOrCreateRadius() *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius{}
	return t.Radius
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetOrCreateTacacs() *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs{}
	return t.Tacacs
}

// GetRadius returns the value of the Radius struct pointer
// from SrlNokiaSystem_System_Aaa_ServerGroup_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetRadius() *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from SrlNokiaSystem_System_Aaa_ServerGroup_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetTacacs() *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaSystem_System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the SrlNokiaSystem_System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_ServerGroup_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Radius.PopulateDefaults()
	t.Tacacs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Aaa_ServerGroup_Server struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_ServerGroup_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_ServerGroup_Server.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius represents the /srl_nokia-system/system/aaa/server-group/server/radius YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius struct {
	AcctPort           *uint16 `path:"acct-port" module:"srl_nokia-aaa"`
	AuthPort           *uint16 `path:"auth-port" module:"srl_nokia-aaa"`
	RetransmitAttempts *uint8  `path:"retransmit-attempts" module:"srl_nokia-aaa"`
	SecretKey          *string `path:"secret-key" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) IsYANGGoStruct() {}

// GetAcctPort retrieves the value of the leaf AcctPort from the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitAttempts is set, it can
// safely use t.GetRetransmitAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitAttempts == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 3
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctPort == nil {
		var v uint16 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v uint16 = 1812
		t.AuthPort = &v
	}
	if t.RetransmitAttempts == nil {
		var v uint8 = 3
		t.RetransmitAttempts = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Radius) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs represents the /srl_nokia-system/system/aaa/server-group/server/tacacs YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs struct {
	Port      *uint16 `path:"port" module:"srl_nokia-aaa"`
	SecretKey *string `path:"secret-key" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}

// GetPort retrieves the value of the leaf Port from the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v uint16 = 49
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) ΛBelongingModule() string {
	return "srl_nokia-aaa"
}

// SrlNokiaSystem_System_Authentication represents the /srl_nokia-system/system/authentication YANG schema element.
type SrlNokiaSystem_System_Authentication struct {
	Keychain map[string]*SrlNokiaSystem_System_Authentication_Keychain `path:"keychain" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication) IsYANGGoStruct() {}

// NewKeychain creates a new entry in the Keychain list of the
// SrlNokiaSystem_System_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Authentication) NewKeychain(Name string) (*SrlNokiaSystem_System_Authentication_Keychain, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*SrlNokiaSystem_System_Authentication_Keychain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &SrlNokiaSystem_System_Authentication_Keychain{
		Name: &Name,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the SrlNokiaSystem_System_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Authentication) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.Name = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Authentication) GetOrCreateKeychain(Name string) *SrlNokiaSystem_System_Authentication_Keychain {
	key := Name

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of SrlNokiaSystem_System_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Authentication) GetKeychain(Name string) *SrlNokiaSystem_System_Authentication_Keychain {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Authentication. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Authentication) DeleteKeychain(Name string) {
	key := Name

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied SrlNokiaSystem_System_Authentication_Keychain struct to the
// list Keychain of SrlNokiaSystem_System_Authentication. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Authentication_Keychain already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Authentication) AppendKeychain(v *SrlNokiaSystem_System_Authentication_Keychain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*SrlNokiaSystem_System_Authentication_Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Keychain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Authentication.
func (*SrlNokiaSystem_System_Authentication) ΛBelongingModule() string {
	return "srl_nokia-keychains"
}

// SrlNokiaSystem_System_Authentication_Keychain represents the /srl_nokia-system/system/authentication/keychain YANG schema element.
type SrlNokiaSystem_System_Authentication_Keychain struct {
	AdminState  E_SrlNokiaCommon_AdminState                                  `path:"admin-state" module:"srl_nokia-keychains"`
	Description *string                                                      `path:"description" module:"srl_nokia-keychains"`
	Key         map[uint8]*SrlNokiaSystem_System_Authentication_Keychain_Key `path:"key" module:"srl_nokia-keychains"`
	Name        *string                                                      `path:"name" module:"srl_nokia-keychains"`
	Tolerance   *uint32                                                      `path:"tolerance" module:"srl_nokia-keychains"`
	Type        E_SrlNokiaKeychains_KeychainType                             `path:"type" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication_Keychain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication_Keychain) IsYANGGoStruct() {}

// NewKey creates a new entry in the Key list of the
// SrlNokiaSystem_System_Authentication_Keychain struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Authentication_Keychain) NewKey(Index uint8) (*SrlNokiaSystem_System_Authentication_Keychain_Key, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[uint8]*SrlNokiaSystem_System_Authentication_Keychain_Key)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Key[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Key", key)
	}

	t.Key[key] = &SrlNokiaSystem_System_Authentication_Keychain_Key{
		Index: &Index,
	}

	return t.Key[key], nil
}

// RenameKey renames an entry in the list Key within
// the SrlNokiaSystem_System_Authentication_Keychain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Authentication_Keychain) RenameKey(oldK, newK uint8) error {
	if _, ok := t.Key[newK]; ok {
		return fmt.Errorf("key %v already exists in Key", newK)
	}

	e, ok := t.Key[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Key", oldK)
	}
	e.Index = &newK

	t.Key[newK] = e
	delete(t.Key, oldK)
	return nil
}

// GetOrCreateKey retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Authentication_Keychain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetOrCreateKey(Index uint8) *SrlNokiaSystem_System_Authentication_Keychain_Key {
	key := Index

	if v, ok := t.Key[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKey(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKey got unexpected error: %v", err))
	}
	return v
}

// GetKey retrieves the value with the specified key from
// the Key map field of SrlNokiaSystem_System_Authentication_Keychain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetKey(Index uint8) *SrlNokiaSystem_System_Authentication_Keychain_Key {
	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Key[key]; ok {
		return lm
	}
	return nil
}

// DeleteKey deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Authentication_Keychain. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Authentication_Keychain) DeleteKey(Index uint8) {
	key := Index

	delete(t.Key, key)
}

// AppendKey appends the supplied SrlNokiaSystem_System_Authentication_Keychain_Key struct to the
// list Key of SrlNokiaSystem_System_Authentication_Keychain. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Authentication_Keychain_Key already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Authentication_Keychain) AppendKey(
	v *SrlNokiaSystem_System_Authentication_Keychain_Key,
) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[uint8]*SrlNokiaSystem_System_Authentication_Keychain_Key)
	}

	if _, ok := t.Key[key]; ok {
		return fmt.Errorf("duplicate key for list Key %v", key)
	}

	t.Key[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_Authentication_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaSystem_System_Authentication_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Authentication_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTolerance retrieves the value of the leaf Tolerance from the SrlNokiaSystem_System_Authentication_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetTolerance() uint32 {
	if t == nil || t.Tolerance == nil {
		return 0
	}
	return *t.Tolerance
}

// GetType retrieves the value of the leaf Type from the SrlNokiaSystem_System_Authentication_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain) GetType() E_SrlNokiaKeychains_KeychainType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Authentication_Keychain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Authentication_Keychain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.Tolerance == nil {
		var v uint32 = 0
		t.Tolerance = &v
	}
	for _, e := range t.Key {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Authentication_Keychain struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Authentication_Keychain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication_Keychain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication_Keychain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Authentication_Keychain.
func (*SrlNokiaSystem_System_Authentication_Keychain) ΛBelongingModule() string {
	return "srl_nokia-keychains"
}

// SrlNokiaSystem_System_Authentication_Keychain_Key represents the /srl_nokia-system/system/authentication/keychain/key YANG schema element.
type SrlNokiaSystem_System_Authentication_Keychain_Key struct {
	Algorithm         E_SrlNokiaKeychains_AlgorithmType                                  `path:"algorithm" module:"srl_nokia-keychains"`
	AuthenticationKey *string                                                            `path:"authentication-key" module:"srl_nokia-keychains"`
	Index             *uint8                                                             `path:"index" module:"srl_nokia-keychains"`
	ReceiveLifetime   *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime `path:"receive-lifetime" module:"srl_nokia-keychains"`
	SendLifetime      *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime    `path:"send-lifetime" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication_Keychain_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key) IsYANGGoStruct() {}

// GetOrCreateReceiveLifetime retrieves the value of the ReceiveLifetime field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetOrCreateReceiveLifetime() *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime {
	if t.ReceiveLifetime != nil {
		return t.ReceiveLifetime
	}
	t.ReceiveLifetime = &SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime{}
	return t.ReceiveLifetime
}

// GetOrCreateSendLifetime retrieves the value of the SendLifetime field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetOrCreateSendLifetime() *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime {
	if t.SendLifetime != nil {
		return t.SendLifetime
	}
	t.SendLifetime = &SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime{}
	return t.SendLifetime
}

// GetReceiveLifetime returns the value of the ReceiveLifetime struct pointer
// from SrlNokiaSystem_System_Authentication_Keychain_Key. If the receiver or the field ReceiveLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetReceiveLifetime() *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime {
	if t != nil && t.ReceiveLifetime != nil {
		return t.ReceiveLifetime
	}
	return nil
}

// GetSendLifetime returns the value of the SendLifetime struct pointer
// from SrlNokiaSystem_System_Authentication_Keychain_Key. If the receiver or the field SendLifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetSendLifetime() *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime {
	if t != nil && t.SendLifetime != nil {
		return t.SendLifetime
	}
	return nil
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the SrlNokiaSystem_System_Authentication_Keychain_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetAlgorithm() E_SrlNokiaKeychains_AlgorithmType {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the SrlNokiaSystem_System_Authentication_Keychain_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaSystem_System_Authentication_Keychain_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) GetIndex() uint8 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Authentication_Keychain_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ReceiveLifetime.PopulateDefaults()
	t.SendLifetime.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Authentication_Keychain_Key struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication_Keychain_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Authentication_Keychain_Key.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key) ΛBelongingModule() string {
	return "srl_nokia-keychains"
}

// SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime represents the /srl_nokia-system/system/authentication/keychain/key/receive-lifetime YANG schema element.
type SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime struct {
	EndTime   SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union `path:"end-time" module:"srl_nokia-keychains"`
	StartTime *string                                                                         `path:"start-time" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) IsYANGGoStruct() {}

// GetEndTime retrieves the value of the leaf EndTime from the SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTime is set, it can
// safely use t.GetEndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) GetEndTime() SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime_EndTime_Union {
	if t == nil || t.EndTime == nil {
		return nil
	}
	return t.EndTime
}

// GetStartTime retrieves the value of the leaf StartTime from the SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) GetStartTime() string {
	if t == nil || t.StartTime == nil {
		return ""
	}
	return *t.StartTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key_ReceiveLifetime) ΛBelongingModule() string {
	return "srl_nokia-keychains"
}

// SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime represents the /srl_nokia-system/system/authentication/keychain/key/send-lifetime YANG schema element.
type SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime struct {
	SendAndReceive *bool   `path:"send-and-receive" module:"srl_nokia-keychains"`
	StartTime      *string `path:"start-time" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) IsYANGGoStruct() {}

// GetSendAndReceive retrieves the value of the leaf SendAndReceive from the SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendAndReceive is set, it can
// safely use t.GetSendAndReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendAndReceive == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) GetSendAndReceive() bool {
	if t == nil || t.SendAndReceive == nil {
		return false
	}
	return *t.SendAndReceive
}

// GetStartTime retrieves the value of the leaf StartTime from the SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) GetStartTime() string {
	if t == nil || t.StartTime == nil {
		return ""
	}
	return *t.StartTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key_SendLifetime) ΛBelongingModule() string {
	return "srl_nokia-keychains"
}

// SrlNokiaSystem_System_Banner represents the /srl_nokia-system/system/banner YANG schema element.
type SrlNokiaSystem_System_Banner struct {
	LoginBanner *string `path:"login-banner" module:"srl_nokia-system-banner"`
	MotdBanner  *string `path:"motd-banner" module:"srl_nokia-system-banner"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Banner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Banner) IsYANGGoStruct() {}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the SrlNokiaSystem_System_Banner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Banner) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the SrlNokiaSystem_System_Banner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MotdBanner is set, it can
// safely use t.GetMotdBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MotdBanner == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Banner) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Banner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Banner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Banner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Banner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Banner) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Banner) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Banner.
func (*SrlNokiaSystem_System_Banner) ΛBelongingModule() string {
	return "srl_nokia-system-banner"
}

// SrlNokiaSystem_System_Boot represents the /srl_nokia-system/system/boot YANG schema element.
type SrlNokiaSystem_System_Boot struct {
	Autoboot *SrlNokiaSystem_System_Boot_Autoboot `path:"autoboot" module:"srl_nokia-boot"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Boot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Boot) IsYANGGoStruct() {}

// GetOrCreateAutoboot retrieves the value of the Autoboot field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_Boot) GetOrCreateAutoboot() *SrlNokiaSystem_System_Boot_Autoboot {
	if t.Autoboot != nil {
		return t.Autoboot
	}
	t.Autoboot = &SrlNokiaSystem_System_Boot_Autoboot{}
	return t.Autoboot
}

// GetAutoboot returns the value of the Autoboot struct pointer
// from SrlNokiaSystem_System_Boot. If the receiver or the field Autoboot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_Boot) GetAutoboot() *SrlNokiaSystem_System_Boot_Autoboot {
	if t != nil && t.Autoboot != nil {
		return t.Autoboot
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Boot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Boot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Autoboot.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Boot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Boot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Boot) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Boot) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Boot.
func (*SrlNokiaSystem_System_Boot) ΛBelongingModule() string {
	return "srl_nokia-boot"
}

// SrlNokiaSystem_System_Boot_Autoboot represents the /srl_nokia-system/system/boot/autoboot YANG schema element.
type SrlNokiaSystem_System_Boot_Autoboot struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-boot"`
	Attempts   *uint8                      `path:"attempts" module:"srl_nokia-boot"`
	ClientId   E_SrlNokiaBoot_ClientId     `path:"client-id" module:"srl_nokia-boot"`
	Interface  *string                     `path:"interface" module:"srl_nokia-boot"`
	Mode       []string                    `path:"mode" module:"srl_nokia-boot"`
	Timeout    *uint32                     `path:"timeout" module:"srl_nokia-boot"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Boot_Autoboot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Boot_Autoboot) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_Boot_Autoboot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Boot_Autoboot) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAttempts retrieves the value of the leaf Attempts from the SrlNokiaSystem_System_Boot_Autoboot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Attempts is set, it can
// safely use t.GetAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Attempts == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Boot_Autoboot) GetAttempts() uint8 {
	if t == nil || t.Attempts == nil {
		return 0
	}
	return *t.Attempts
}

// GetClientId retrieves the value of the leaf ClientId from the SrlNokiaSystem_System_Boot_Autoboot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientId is set, it can
// safely use t.GetClientId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientId == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Boot_Autoboot) GetClientId() E_SrlNokiaBoot_ClientId {
	if t == nil || t.ClientId == 0 {
		return 0
	}
	return t.ClientId
}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaSystem_System_Boot_Autoboot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Boot_Autoboot) GetInterface() string {
	if t == nil || t.Interface == nil {
		return "mgmt0"
	}
	return *t.Interface
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaSystem_System_Boot_Autoboot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Boot_Autoboot) GetMode() []string {
	if t == nil || t.Mode == nil {
		return nil
	}
	return t.Mode
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaSystem_System_Boot_Autoboot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Boot_Autoboot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Boot_Autoboot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Boot_Autoboot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interface == nil {
		var v string = "mgmt0"
		t.Interface = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Boot_Autoboot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Boot_Autoboot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Boot_Autoboot) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Boot_Autoboot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Boot_Autoboot.
func (*SrlNokiaSystem_System_Boot_Autoboot) ΛBelongingModule() string {
	return "srl_nokia-boot"
}

// SrlNokiaSystem_System_BridgeTable represents the /srl_nokia-system/system/bridge-table YANG schema element.
type SrlNokiaSystem_System_BridgeTable struct {
	MacLearning *SrlNokiaSystem_System_BridgeTable_MacLearning `path:"mac-learning" module:"srl_nokia-system-bridge-table"`
	MacLimit    *SrlNokiaSystem_System_BridgeTable_MacLimit    `path:"mac-limit" module:"srl_nokia-system-bridge-table"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_BridgeTable) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_BridgeTable) GetOrCreateMacLearning() *SrlNokiaSystem_System_BridgeTable_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &SrlNokiaSystem_System_BridgeTable_MacLearning{}
	return t.MacLearning
}

// GetOrCreateMacLimit retrieves the value of the MacLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_BridgeTable) GetOrCreateMacLimit() *SrlNokiaSystem_System_BridgeTable_MacLimit {
	if t.MacLimit != nil {
		return t.MacLimit
	}
	t.MacLimit = &SrlNokiaSystem_System_BridgeTable_MacLimit{}
	return t.MacLimit
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from SrlNokiaSystem_System_BridgeTable. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_BridgeTable) GetMacLearning() *SrlNokiaSystem_System_BridgeTable_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetMacLimit returns the value of the MacLimit struct pointer
// from SrlNokiaSystem_System_BridgeTable. If the receiver or the field MacLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_BridgeTable) GetMacLimit() *SrlNokiaSystem_System_BridgeTable_MacLimit {
	if t != nil && t.MacLimit != nil {
		return t.MacLimit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_BridgeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_BridgeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacLearning.PopulateDefaults()
	t.MacLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_BridgeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_BridgeTable.
func (*SrlNokiaSystem_System_BridgeTable) ΛBelongingModule() string {
	return "srl_nokia-system-bridge-table"
}

// SrlNokiaSystem_System_BridgeTable_MacLearning represents the /srl_nokia-system/system/bridge-table/mac-learning YANG schema element.
type SrlNokiaSystem_System_BridgeTable_MacLearning struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_BridgeTable_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_BridgeTable_MacLearning) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_BridgeTable_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_BridgeTable_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_BridgeTable_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_BridgeTable_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_BridgeTable_MacLearning) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_BridgeTable_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_BridgeTable_MacLearning.
func (*SrlNokiaSystem_System_BridgeTable_MacLearning) ΛBelongingModule() string {
	return "srl_nokia-system-bridge-table"
}

// SrlNokiaSystem_System_BridgeTable_MacLimit represents the /srl_nokia-system/system/bridge-table/mac-limit YANG schema element.
type SrlNokiaSystem_System_BridgeTable_MacLimit struct{}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_BridgeTable_MacLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_BridgeTable_MacLimit) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_BridgeTable_MacLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_BridgeTable_MacLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_BridgeTable_MacLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_BridgeTable_MacLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_BridgeTable_MacLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_BridgeTable_MacLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_BridgeTable_MacLimit.
func (*SrlNokiaSystem_System_BridgeTable_MacLimit) ΛBelongingModule() string {
	return "srl_nokia-system-bridge-table"
}

// SrlNokiaSystem_System_Clock represents the /srl_nokia-system/system/clock YANG schema element.
type SrlNokiaSystem_System_Clock struct {
	Timezone E_SrlNokiaTimezone_TzdataTimezone `path:"timezone" module:"srl_nokia-ntp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Clock) IsYANGGoStruct() {}

// GetTimezone retrieves the value of the leaf Timezone from the SrlNokiaSystem_System_Clock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timezone is set, it can
// safely use t.GetTimezone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timezone == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Clock) GetTimezone() E_SrlNokiaTimezone_TzdataTimezone {
	if t == nil || t.Timezone == 0 {
		return 0
	}
	return t.Timezone
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Clock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Clock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Clock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Clock.
func (*SrlNokiaSystem_System_Clock) ΛBelongingModule() string {
	return "srl_nokia-ntp"
}

// SrlNokiaSystem_System_Configuration represents the /srl_nokia-system/system/configuration YANG schema element.
type SrlNokiaSystem_System_Configuration struct {
	AutoCheckpoint *bool                                                `path:"auto-checkpoint" module:"srl_nokia-configuration"`
	IdleTimeout    *uint16                                              `path:"idle-timeout" module:"srl_nokia-configuration"`
	MaxCandidates  *uint8                                               `path:"max-candidates" module:"srl_nokia-configuration"`
	MaxCheckpoints *uint8                                               `path:"max-checkpoints" module:"srl_nokia-configuration"`
	Role           map[string]*SrlNokiaSystem_System_Configuration_Role `path:"role" module:"srl_nokia-configuration-role"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Configuration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Configuration) IsYANGGoStruct() {}

// NewRole creates a new entry in the Role list of the
// SrlNokiaSystem_System_Configuration struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Configuration) NewRole(Name string) (*SrlNokiaSystem_System_Configuration_Role, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Role == nil {
		t.Role = make(map[string]*SrlNokiaSystem_System_Configuration_Role)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Role[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Role", key)
	}

	t.Role[key] = &SrlNokiaSystem_System_Configuration_Role{
		Name: &Name,
	}

	return t.Role[key], nil
}

// RenameRole renames an entry in the list Role within
// the SrlNokiaSystem_System_Configuration struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Configuration) RenameRole(oldK, newK string) error {
	if _, ok := t.Role[newK]; ok {
		return fmt.Errorf("key %v already exists in Role", newK)
	}

	e, ok := t.Role[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Role", oldK)
	}
	e.Name = &newK

	t.Role[newK] = e
	delete(t.Role, oldK)
	return nil
}

// GetOrCreateRole retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Configuration. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Configuration) GetOrCreateRole(Name string) *SrlNokiaSystem_System_Configuration_Role {
	key := Name

	if v, ok := t.Role[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRole(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRole got unexpected error: %v", err))
	}
	return v
}

// GetRole retrieves the value with the specified key from
// the Role map field of SrlNokiaSystem_System_Configuration. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Configuration) GetRole(Name string) *SrlNokiaSystem_System_Configuration_Role {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Role[key]; ok {
		return lm
	}
	return nil
}

// DeleteRole deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Configuration. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Configuration) DeleteRole(Name string) {
	key := Name

	delete(t.Role, key)
}

// AppendRole appends the supplied SrlNokiaSystem_System_Configuration_Role struct to the
// list Role of SrlNokiaSystem_System_Configuration. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Configuration_Role already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Configuration) AppendRole(v *SrlNokiaSystem_System_Configuration_Role) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Role == nil {
		t.Role = make(map[string]*SrlNokiaSystem_System_Configuration_Role)
	}

	if _, ok := t.Role[key]; ok {
		return fmt.Errorf("duplicate key for list Role %v", key)
	}

	t.Role[key] = v
	return nil
}

// GetAutoCheckpoint retrieves the value of the leaf AutoCheckpoint from the SrlNokiaSystem_System_Configuration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoCheckpoint is set, it can
// safely use t.GetAutoCheckpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoCheckpoint == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration) GetAutoCheckpoint() bool {
	if t == nil || t.AutoCheckpoint == nil {
		return false
	}
	return *t.AutoCheckpoint
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the SrlNokiaSystem_System_Configuration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration) GetIdleTimeout() uint16 {
	if t == nil || t.IdleTimeout == nil {
		return 10080
	}
	return *t.IdleTimeout
}

// GetMaxCandidates retrieves the value of the leaf MaxCandidates from the SrlNokiaSystem_System_Configuration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxCandidates is set, it can
// safely use t.GetMaxCandidates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxCandidates == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration) GetMaxCandidates() uint8 {
	if t == nil || t.MaxCandidates == nil {
		return 10
	}
	return *t.MaxCandidates
}

// GetMaxCheckpoints retrieves the value of the leaf MaxCheckpoints from the SrlNokiaSystem_System_Configuration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxCheckpoints is set, it can
// safely use t.GetMaxCheckpoints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxCheckpoints == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration) GetMaxCheckpoints() uint8 {
	if t == nil || t.MaxCheckpoints == nil {
		return 10
	}
	return *t.MaxCheckpoints
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Configuration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Configuration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoCheckpoint == nil {
		var v bool = false
		t.AutoCheckpoint = &v
	}
	if t.IdleTimeout == nil {
		var v uint16 = 10080
		t.IdleTimeout = &v
	}
	if t.MaxCandidates == nil {
		var v uint8 = 10
		t.MaxCandidates = &v
	}
	if t.MaxCheckpoints == nil {
		var v uint8 = 10
		t.MaxCheckpoints = &v
	}
	for _, e := range t.Role {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Configuration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Configuration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Configuration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Configuration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Configuration.
func (*SrlNokiaSystem_System_Configuration) ΛBelongingModule() string {
	return "srl_nokia-configuration"
}

// SrlNokiaSystem_System_Configuration_Role represents the /srl_nokia-system/system/configuration/role YANG schema element.
type SrlNokiaSystem_System_Configuration_Role struct {
	Name *string                                                   `path:"name" module:"srl_nokia-configuration-role"`
	Rule map[string]*SrlNokiaSystem_System_Configuration_Role_Rule `path:"rule" module:"srl_nokia-configuration-role"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Configuration_Role implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Configuration_Role) IsYANGGoStruct() {}

// NewRule creates a new entry in the Rule list of the
// SrlNokiaSystem_System_Configuration_Role struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Configuration_Role) NewRule(PathReference string) (*SrlNokiaSystem_System_Configuration_Role_Rule, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[string]*SrlNokiaSystem_System_Configuration_Role_Rule)
	}

	key := PathReference

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Rule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Rule", key)
	}

	t.Rule[key] = &SrlNokiaSystem_System_Configuration_Role_Rule{
		PathReference: &PathReference,
	}

	return t.Rule[key], nil
}

// RenameRule renames an entry in the list Rule within
// the SrlNokiaSystem_System_Configuration_Role struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_Configuration_Role) RenameRule(oldK, newK string) error {
	if _, ok := t.Rule[newK]; ok {
		return fmt.Errorf("key %v already exists in Rule", newK)
	}

	e, ok := t.Rule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Rule", oldK)
	}
	e.PathReference = &newK

	t.Rule[newK] = e
	delete(t.Rule, oldK)
	return nil
}

// GetOrCreateRule retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_Configuration_Role. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_Configuration_Role) GetOrCreateRule(PathReference string) *SrlNokiaSystem_System_Configuration_Role_Rule {
	key := PathReference

	if v, ok := t.Rule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRule(PathReference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRule got unexpected error: %v", err))
	}
	return v
}

// GetRule retrieves the value with the specified key from
// the Rule map field of SrlNokiaSystem_System_Configuration_Role. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_Configuration_Role) GetRule(PathReference string) *SrlNokiaSystem_System_Configuration_Role_Rule {
	if t == nil {
		return nil
	}

	key := PathReference

	if lm, ok := t.Rule[key]; ok {
		return lm
	}
	return nil
}

// DeleteRule deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_Configuration_Role. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_Configuration_Role) DeleteRule(PathReference string) {
	key := PathReference

	delete(t.Rule, key)
}

// AppendRule appends the supplied SrlNokiaSystem_System_Configuration_Role_Rule struct to the
// list Rule of SrlNokiaSystem_System_Configuration_Role. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_Configuration_Role_Rule already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_Configuration_Role) AppendRule(v *SrlNokiaSystem_System_Configuration_Role_Rule) error {
	if v.PathReference == nil {
		return fmt.Errorf("invalid nil key received for PathReference")
	}

	key := *v.PathReference

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Rule == nil {
		t.Rule = make(map[string]*SrlNokiaSystem_System_Configuration_Role_Rule)
	}

	if _, ok := t.Rule[key]; ok {
		return fmt.Errorf("duplicate key for list Rule %v", key)
	}

	t.Rule[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_Configuration_Role
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration_Role) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Configuration_Role
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Configuration_Role) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Rule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Configuration_Role struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Configuration_Role) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Configuration_Role) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Configuration_Role"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Configuration_Role) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Configuration_Role) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Configuration_Role.
func (*SrlNokiaSystem_System_Configuration_Role) ΛBelongingModule() string {
	return "srl_nokia-configuration-role"
}

// SrlNokiaSystem_System_Configuration_Role_Rule represents the /srl_nokia-system/system/configuration/role/rule YANG schema element.
type SrlNokiaSystem_System_Configuration_Role_Rule struct {
	Action        E_SrlNokiaConfigurationRole_PathAction `path:"action" module:"srl_nokia-configuration-role"`
	PathReference *string                                `path:"path-reference" module:"srl_nokia-configuration-role"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Configuration_Role_Rule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Configuration_Role_Rule) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the SrlNokiaSystem_System_Configuration_Role_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) GetAction() E_SrlNokiaConfigurationRole_PathAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetPathReference retrieves the value of the leaf PathReference from the SrlNokiaSystem_System_Configuration_Role_Rule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathReference is set, it can
// safely use t.GetPathReference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathReference == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) GetPathReference() string {
	if t == nil || t.PathReference == nil {
		return ""
	}
	return *t.PathReference
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_Configuration_Role_Rule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Configuration_Role_Rule struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathReference == nil {
		return nil, fmt.Errorf("nil value for key PathReference")
	}

	return map[string]interface{}{
		"path-reference": *t.PathReference,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Configuration_Role_Rule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Configuration_Role_Rule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_Configuration_Role_Rule.
func (*SrlNokiaSystem_System_Configuration_Role_Rule) ΛBelongingModule() string {
	return "srl_nokia-configuration-role"
}

// SrlNokiaSystem_System_DhcpServer represents the /srl_nokia-system/system/dhcp-server YANG schema element.
type SrlNokiaSystem_System_DhcpServer struct {
	AdminState      E_SrlNokiaCommon_AdminState                                  `path:"admin-state" module:"srl_nokia-dhcp-server"`
	NetworkInstance map[string]*SrlNokiaSystem_System_DhcpServer_NetworkInstance `path:"network-instance" module:"srl_nokia-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_DhcpServer) IsYANGGoStruct() {}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// SrlNokiaSystem_System_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_DhcpServer) NewNetworkInstance(Name string) (*SrlNokiaSystem_System_DhcpServer_NetworkInstance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*SrlNokiaSystem_System_DhcpServer_NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &SrlNokiaSystem_System_DhcpServer_NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// RenameNetworkInstance renames an entry in the list NetworkInstance within
// the SrlNokiaSystem_System_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_DhcpServer) RenameNetworkInstance(oldK, newK string) error {
	if _, ok := t.NetworkInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInstance", newK)
	}

	e, ok := t.NetworkInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInstance", oldK)
	}
	e.Name = &newK

	t.NetworkInstance[newK] = e
	delete(t.NetworkInstance, oldK)
	return nil
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_DhcpServer) GetOrCreateNetworkInstance(Name string) *SrlNokiaSystem_System_DhcpServer_NetworkInstance {
	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of SrlNokiaSystem_System_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer) GetNetworkInstance(Name string) *SrlNokiaSystem_System_DhcpServer_NetworkInstance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_DhcpServer) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied SrlNokiaSystem_System_DhcpServer_NetworkInstance struct to the
// list NetworkInstance of SrlNokiaSystem_System_DhcpServer. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_DhcpServer_NetworkInstance already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_DhcpServer) AppendNetworkInstance(
	v *SrlNokiaSystem_System_DhcpServer_NetworkInstance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*SrlNokiaSystem_System_DhcpServer_NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_DhcpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_DhcpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	for _, e := range t.NetworkInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_DhcpServer.
func (*SrlNokiaSystem_System_DhcpServer) ΛBelongingModule() string {
	return "srl_nokia-dhcp-server"
}

// SrlNokiaSystem_System_DhcpServer_NetworkInstance represents the /srl_nokia-system/system/dhcp-server/network-instance YANG schema element.
type SrlNokiaSystem_System_DhcpServer_NetworkInstance struct {
	Dhcpv4 *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4 `path:"dhcpv4" module:"srl_nokia-dhcp-server"`
	Dhcpv6 *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv6 `path:"dhcpv6" module:"srl_nokia-dhcp-server"`
	Name   *string                                                  `path:"name" module:"srl_nokia-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_DhcpServer_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance) IsYANGGoStruct() {}

// GetOrCreateDhcpv4 retrieves the value of the Dhcpv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) GetOrCreateDhcpv4() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4 {
	if t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	t.Dhcpv4 = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4{}
	return t.Dhcpv4
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) GetOrCreateDhcpv6() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcpv4 returns the value of the Dhcpv4 struct pointer
// from SrlNokiaSystem_System_DhcpServer_NetworkInstance. If the receiver or the field Dhcpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) GetDhcpv4() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4 {
	if t != nil && t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from SrlNokiaSystem_System_DhcpServer_NetworkInstance. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) GetDhcpv6() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the SrlNokiaSystem_System_DhcpServer_NetworkInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_DhcpServer_NetworkInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcpv4.PopulateDefaults()
	t.Dhcpv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_DhcpServer_NetworkInstance struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_DhcpServer_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_DhcpServer_NetworkInstance.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance) ΛBelongingModule() string {
	return "srl_nokia-dhcp-server"
}

// SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4 represents the /srl_nokia-system/system/dhcp-server/network-instance/dhcpv4 YANG schema element.
type SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4 struct {
	AdminState       E_SrlNokiaCommon_AdminState                                               `path:"admin-state" module:"srl_nokia-dhcp-server"`
	Options          *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options          `path:"options" module:"srl_nokia-dhcp-server"`
	StaticAllocation *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation `path:"static-allocation" module:"srl_nokia-dhcp-server"`
	TraceOptions     *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_TraceOptions     `path:"trace-options" module:"srl_nokia-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) IsYANGGoStruct() {}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetOrCreateOptions() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options{}
	return t.Options
}

// GetOrCreateStaticAllocation retrieves the value of the StaticAllocation field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetOrCreateStaticAllocation() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation {
	if t.StaticAllocation != nil {
		return t.StaticAllocation
	}
	t.StaticAllocation = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation{}
	return t.StaticAllocation
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetOrCreateTraceOptions() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_TraceOptions{}
	return t.TraceOptions
}

// GetOptions returns the value of the Options struct pointer
// from SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetOptions() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetStaticAllocation returns the value of the StaticAllocation struct pointer
// from SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4. If the receiver or the field StaticAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetStaticAllocation() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation {
	if t != nil && t.StaticAllocation != nil {
		return t.StaticAllocation
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetTraceOptions() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	t.Options.PopulateDefaults()
	t.StaticAllocation.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4) ΛBelongingModule() string {
	return "srl_nokia-dhcp-server"
}

// SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options represents the /srl_nokia-system/system/dhcp-server/network-instance/dhcpv4/options YANG schema element.
type SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options struct {
	BootfileName      *string  `path:"bootfile-name" module:"srl_nokia-dhcp-server"`
	DnsServer         []string `path:"dns-server" module:"srl_nokia-dhcp-server"`
	DomainName        *string  `path:"domain-name" module:"srl_nokia-dhcp-server"`
	Hostname          *string  `path:"hostname" module:"srl_nokia-dhcp-server"`
	NtpServer         []string `path:"ntp-server" module:"srl_nokia-dhcp-server"`
	Router            *string  `path:"router" module:"srl_nokia-dhcp-server"`
	ServerId          *string  `path:"server-id" module:"srl_nokia-dhcp-server"`
	TftpServerAddress []string `path:"tftp-server-address" module:"srl_nokia-dhcp-server"`
	TftpServerName    *string  `path:"tftp-server-name" module:"srl_nokia-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) IsYANGGoStruct() {}

// GetBootfileName retrieves the value of the leaf BootfileName from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootfileName is set, it can
// safely use t.GetBootfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootfileName == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetBootfileName() string {
	if t == nil || t.BootfileName == nil {
		return ""
	}
	return *t.BootfileName
}

// GetDnsServer retrieves the value of the leaf DnsServer from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServer is set, it can
// safely use t.GetDnsServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServer == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetDnsServer() []string {
	if t == nil || t.DnsServer == nil {
		return nil
	}
	return t.DnsServer
}

// GetDomainName retrieves the value of the leaf DomainName from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetNtpServer retrieves the value of the leaf NtpServer from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpServer is set, it can
// safely use t.GetNtpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpServer == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetNtpServer() []string {
	if t == nil || t.NtpServer == nil {
		return nil
	}
	return t.NtpServer
}

// GetRouter retrieves the value of the leaf Router from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Router is set, it can
// safely use t.GetRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Router == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetRouter() string {
	if t == nil || t.Router == nil {
		return ""
	}
	return *t.Router
}

// GetServerId retrieves the value of the leaf ServerId from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerId is set, it can
// safely use t.GetServerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerId == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetServerId() string {
	if t == nil || t.ServerId == nil {
		return ""
	}
	return *t.ServerId
}

// GetTftpServerAddress retrieves the value of the leaf TftpServerAddress from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TftpServerAddress is set, it can
// safely use t.GetTftpServerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TftpServerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetTftpServerAddress() []string {
	if t == nil || t.TftpServerAddress == nil {
		return nil
	}
	return t.TftpServerAddress
}

// GetTftpServerName retrieves the value of the leaf TftpServerName from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TftpServerName is set, it can
// safely use t.GetTftpServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TftpServerName == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) GetTftpServerName() string {
	if t == nil || t.TftpServerName == nil {
		return ""
	}
	return *t.TftpServerName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_Options) ΛBelongingModule() string {
	return "srl_nokia-dhcp-server"
}

// SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation represents the /srl_nokia-system/system/dhcp-server/network-instance/dhcpv4/static-allocation YANG schema element.
type SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation struct {
	Host map[string]*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host `path:"host" module:"srl_nokia-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) IsYANGGoStruct() {}

// NewHost creates a new entry in the Host list of the
// SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) NewHost(
	Mac string,
) (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[string]*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Host[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Host", key)
	}

	t.Host[key] = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host{
		Mac: &Mac,
	}

	return t.Host[key], nil
}

// RenameHost renames an entry in the list Host within
// the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) RenameHost(oldK, newK string) error {
	if _, ok := t.Host[newK]; ok {
		return fmt.Errorf("key %v already exists in Host", newK)
	}

	e, ok := t.Host[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Host", oldK)
	}
	e.Mac = &newK

	t.Host[newK] = e
	delete(t.Host, oldK)
	return nil
}

// GetOrCreateHost retrieves the value with the specified keys from
// the receiver SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) GetOrCreateHost(
	Mac string,
) *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host {
	key := Mac

	if v, ok := t.Host[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHost(Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHost got unexpected error: %v", err))
	}
	return v
}

// GetHost retrieves the value with the specified key from
// the Host map field of SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) GetHost(
	Mac string,
) *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host {
	if t == nil {
		return nil
	}

	key := Mac

	if lm, ok := t.Host[key]; ok {
		return lm
	}
	return nil
}

// DeleteHost deletes the value with the specified keys from
// the receiver SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) DeleteHost(Mac string) {
	key := Mac

	delete(t.Host, key)
}

// AppendHost appends the supplied SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host struct to the
// list Host of SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation. If the key value(s) specified in
// the supplied SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host already exist in the list, an error is
// returned.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) AppendHost(
	v *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host,
) error {
	if v.Mac == nil {
		return fmt.Errorf("invalid nil key received for Mac")
	}

	key := *v.Mac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Host == nil {
		t.Host = make(map[string]*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host)
	}

	if _, ok := t.Host[key]; ok {
		return fmt.Errorf("duplicate key for list Host %v", key)
	}

	t.Host[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Host {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation) ΛBelongingModule() string {
	return "srl_nokia-dhcp-server"
}

// SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host represents the /srl_nokia-system/system/dhcp-server/network-instance/dhcpv4/static-allocation/host YANG schema element.
type SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host struct {
	IpAddress *string                                                                                `path:"ip-address" module:"srl_nokia-dhcp-server"`
	Mac       *string                                                                                `path:"mac" module:"srl_nokia-dhcp-server"`
	Options   *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host_Options `path:"options" module:"srl_nokia-dhcp-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) IsYANGGoStruct() {
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) GetOrCreateOptions() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) GetOptions() *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetIpAddress retrieves the value of the leaf IpAddress from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMac retrieves the value of the leaf Mac from the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Options.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host.
func (*SrlNokiaSystem_System_DhcpServer_NetworkInstance_Dhcpv4_StaticAllocation_Host) ΛBelongingModule() string {
	return "srl_nokia-dhcp-server"
}
