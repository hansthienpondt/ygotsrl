/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization struct {
	Disable       YANGEmpty `path:"disable" module:"srl_nokia-ospf"`
	EndOfLib      *bool     `path:"end-of-lib" module:"srl_nokia-ospf"`
	HoldDownTimer *uint16   `path:"hold-down-timer" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) IsYANGGoStruct() {
}

// GetDisable retrieves the value of the leaf Disable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Disable is set, it can
// safely use t.GetDisable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Disable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) GetDisable() YANGEmpty {
	if t == nil || t.Disable == false {
		return false
	}
	return t.Disable
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace `path:"trace" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) IsYANGGoStruct() {
}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace struct {
	Adjacencies YANGEmpty                                                                                                 `path:"adjacencies" module:"srl_nokia-ospf"`
	Interfaces  YANGEmpty                                                                                                 `path:"interfaces" module:"srl_nokia-ospf"`
	Packet      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// GetAdjacencies retrieves the value of the leaf Adjacencies from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjacencies is set, it can
// safely use t.GetAdjacencies() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjacencies == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetAdjacencies() YANGEmpty {
	if t == nil || t.Adjacencies == false {
		return false
	}
	return t.Adjacencies
}

// GetInterfaces retrieves the value of the leaf Interfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interfaces is set, it can
// safely use t.GetInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) GetInterfaces() YANGEmpty {
	if t == nil || t.Interfaces == false {
		return false
	}
	return t.Interfaces
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/interface/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet struct {
	Detail   YANGEmpty                                                                                                           `path:"detail" module:"srl_nokia-ospf"`
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-ospf"`
	Type     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) GetDetail() YANGEmpty {
	if t == nil || t.Detail == false {
		return false
	}
	return t.Detail
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/nssa YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa struct {
	AreaRange             map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange  `path:"area-range" module:"srl_nokia-ospf"`
	OriginateDefaultRoute *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"srl_nokia-ospf" yangPresence:"true"`
	RedistributeExternal  *bool                                                                                            `path:"redistribute-external" module:"srl_nokia-ospf"`
	Summaries             *bool                                                                                            `path:"summaries" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) NewAreaRange(
	IpPrefixMask string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetOrCreateAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange {
	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetAreaRange(
	IpPrefixMask string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange {
	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange struct to the
// list AreaRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) AppendAreaRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange,
) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetOrCreateOriginateDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetOriginateDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/nssa/area-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"srl_nokia-ospf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_AreaRange) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/nssa/originate-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"srl_nokia-ospf"`
	TypeNssa       *bool `path:"type-nssa" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {
}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return true
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = true
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Nssa_OriginateDefaultRoute) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/area/stub YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub struct {
	DefaultMetric *uint16 `path:"default-metric" module:"srl_nokia-ospf"`
	Summaries     *bool   `path:"summaries" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) GetDefaultMetric() uint16 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint16 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Stub) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/asbr YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr struct {
	TracePath SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union `path:"trace-path" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) IsYANGGoStruct() {}

// GetTracePath retrieves the value of the leaf TracePath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracePath is set, it can
// safely use t.GetTracePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracePath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) GetTracePath() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Union {
	if t == nil || t.TracePath == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum_none
	}
	return t.TracePath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TracePath == nil {
		t.TracePath = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr_TracePath_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Asbr) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/export-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"srl_nokia-ospf"`
	Number     *uint32 `path:"number" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) IsYANGGoStruct() {
}

// GetLogPercent retrieves the value of the leaf LogPercent from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExportLimit) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/external-db-overflow YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"srl_nokia-ospf"`
	Limit    *uint32 `path:"limit" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_ExternalDbOverflow) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"srl_nokia-ospf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) IsYANGGoStruct() {
}

// GetHelperMode retrieves the value of the leaf HelperMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return false
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return false
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = false
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = false
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization struct {
	EndOfLib      *bool   `path:"end-of-lib" module:"srl_nokia-ospf"`
	HoldDownTimer *uint16 `path:"hold-down-timer" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) IsYANGGoStruct() {
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 60
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndOfLib == nil {
		var v bool = false
		t.EndOfLib = &v
	}
	if t.HoldDownTimer == nil {
		var v uint16 = 60
		t.HoldDownTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/overload YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload struct {
	Active               *bool                                                                                    `path:"active" module:"srl_nokia-ospf"`
	OverloadIncludeExt_1 *bool                                                                                    `path:"overload-include-ext-1" module:"srl_nokia-ospf"`
	OverloadIncludeExt_2 *bool                                                                                    `path:"overload-include-ext-2" module:"srl_nokia-ospf"`
	OverloadIncludeStub  *bool                                                                                    `path:"overload-include-stub" module:"srl_nokia-ospf"`
	OverloadOnBoot       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot `path:"overload-on-boot" module:"srl_nokia-ospf" yangPresence:"true"`
	RtrAdvLsaLimit       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit `path:"rtr-adv-lsa-limit" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) IsYANGGoStruct() {}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOrCreateOverloadOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateRtrAdvLsaLimit retrieves the value of the RtrAdvLsaLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOrCreateRtrAdvLsaLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit {
	if t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	t.RtrAdvLsaLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit{}
	return t.RtrAdvLsaLimit
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetRtrAdvLsaLimit returns the value of the RtrAdvLsaLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload. If the receiver or the field RtrAdvLsaLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetRtrAdvLsaLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit {
	if t != nil && t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	return nil
}

// GetActive retrieves the value of the leaf Active from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetOverloadIncludeExt_1 retrieves the value of the leaf OverloadIncludeExt_1 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_1 is set, it can
// safely use t.GetOverloadIncludeExt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_1 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadIncludeExt_1() bool {
	if t == nil || t.OverloadIncludeExt_1 == nil {
		return false
	}
	return *t.OverloadIncludeExt_1
}

// GetOverloadIncludeExt_2 retrieves the value of the leaf OverloadIncludeExt_2 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_2 is set, it can
// safely use t.GetOverloadIncludeExt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_2 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadIncludeExt_2() bool {
	if t == nil || t.OverloadIncludeExt_2 == nil {
		return false
	}
	return *t.OverloadIncludeExt_2
}

// GetOverloadIncludeStub retrieves the value of the leaf OverloadIncludeStub from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeStub is set, it can
// safely use t.GetOverloadIncludeStub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeStub == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) GetOverloadIncludeStub() bool {
	if t == nil || t.OverloadIncludeStub == nil {
		return false
	}
	return *t.OverloadIncludeStub
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Active == nil {
		var v bool = false
		t.Active = &v
	}
	if t.OverloadIncludeExt_1 == nil {
		var v bool = false
		t.OverloadIncludeExt_1 = &v
	}
	if t.OverloadIncludeExt_2 == nil {
		var v bool = false
		t.OverloadIncludeExt_2 = &v
	}
	if t.OverloadIncludeStub == nil {
		var v bool = false
		t.OverloadIncludeStub = &v
	}
	t.OverloadOnBoot.PopulateDefaults()
	t.RtrAdvLsaLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/overload/overload-on-boot YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) IsYANGGoStruct() {
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 60
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 60
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_OverloadOnBoot) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/overload/rtr-adv-lsa-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit struct {
	LogOnly          *bool   `path:"log-only" module:"srl_nokia-ospf"`
	MaxLsaCount      *uint32 `path:"max-lsa-count" module:"srl_nokia-ospf"`
	OverloadTimeout  *uint16 `path:"overload-timeout" module:"srl_nokia-ospf"`
	WarningThreshold *uint8  `path:"warning-threshold" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) IsYANGGoStruct() {
}

// GetLogOnly retrieves the value of the leaf LogOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetOverloadTimeout() uint16 {
	if t == nil || t.OverloadTimeout == nil {
		return 0
	}
	return *t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) GetWarningThreshold() uint8 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WarningThreshold == nil {
		var v uint8 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Overload_RtrAdvLsaLimit) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/te-database-install YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall struct {
	BgpLs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs `path:"bgp-ls" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) IsYANGGoStruct() {
}

// GetOrCreateBgpLs retrieves the value of the BgpLs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) GetOrCreateBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs {
	if t.BgpLs != nil {
		return t.BgpLs
	}
	t.BgpLs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs{}
	return t.BgpLs
}

// GetBgpLs returns the value of the BgpLs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall. If the receiver or the field BgpLs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) GetBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs {
	if t != nil && t.BgpLs != nil {
		return t.BgpLs
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/te-database-install/bgp-ls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs struct {
	BgpLsIdentifier *uint32 `path:"bgp-ls-identifier" module:"srl_nokia-ospf"`
	IgpIdentifier   *uint64 `path:"igp-identifier" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) IsYANGGoStruct() {
}

// GetBgpLsIdentifier retrieves the value of the leaf BgpLsIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsIdentifier is set, it can
// safely use t.GetBgpLsIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) GetBgpLsIdentifier() uint32 {
	if t == nil || t.BgpLsIdentifier == nil {
		return 0
	}
	return *t.BgpLsIdentifier
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TeDatabaseInstall_BgpLs) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers struct {
	IncrementalSpfWait *uint32                                                                             `path:"incremental-spf-wait" module:"srl_nokia-ospf"`
	LsaAccumulate      *uint32                                                                             `path:"lsa-accumulate" module:"srl_nokia-ospf"`
	LsaArrival         *uint32                                                                             `path:"lsa-arrival" module:"srl_nokia-ospf"`
	LsaGenerate        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate `path:"lsa-generate" module:"srl_nokia-ospf"`
	RedistributeDelay  *uint32                                                                             `path:"redistribute-delay" module:"srl_nokia-ospf"`
	SpfWait            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait     `path:"spf-wait" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetOrCreateLsaGenerate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetOrCreateSpfWait() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetLsaGenerate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetSpfWait() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/timers/lsa-generate YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"srl_nokia-ospf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"srl_nokia-ospf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) IsYANGGoStruct() {
}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_LsaGenerate) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/timers/spf-wait YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"srl_nokia-ospf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"srl_nokia-ospf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) IsYANGGoStruct() {
}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Timers_SpfWait) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace `path:"trace" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) IsYANGGoStruct() {
}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace struct {
	Adjacencies     YANGEmpty                                                                                  `path:"adjacencies" module:"srl_nokia-ospf"`
	GracefulRestart YANGEmpty                                                                                  `path:"graceful-restart" module:"srl_nokia-ospf"`
	Interfaces      YANGEmpty                                                                                  `path:"interfaces" module:"srl_nokia-ospf"`
	Lsdb            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb   `path:"lsdb" module:"srl_nokia-ospf" yangPresence:"true"`
	Misc            YANGEmpty                                                                                  `path:"misc" module:"srl_nokia-ospf"`
	Packet          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-ospf" yangPresence:"true"`
	Routes          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes `path:"routes" module:"srl_nokia-ospf" yangPresence:"true"`
	Spf             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf    `path:"spf" module:"srl_nokia-ospf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) IsYANGGoStruct() {
}

// GetOrCreateLsdb retrieves the value of the Lsdb field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreateLsdb() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb {
	if t.Lsdb != nil {
		return t.Lsdb
	}
	t.Lsdb = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb{}
	return t.Lsdb
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreateRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes{}
	return t.Routes
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetOrCreateSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf{}
	return t.Spf
}

// GetLsdb returns the value of the Lsdb struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Lsdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetLsdb() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb {
	if t != nil && t.Lsdb != nil {
		return t.Lsdb
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetRoutes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetSpf() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// GetAdjacencies retrieves the value of the leaf Adjacencies from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjacencies is set, it can
// safely use t.GetAdjacencies() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjacencies == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetAdjacencies() YANGEmpty {
	if t == nil || t.Adjacencies == false {
		return false
	}
	return t.Adjacencies
}

// GetGracefulRestart retrieves the value of the leaf GracefulRestart from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulRestart is set, it can
// safely use t.GetGracefulRestart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulRestart == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetGracefulRestart() YANGEmpty {
	if t == nil || t.GracefulRestart == false {
		return false
	}
	return t.GracefulRestart
}

// GetInterfaces retrieves the value of the leaf Interfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interfaces is set, it can
// safely use t.GetInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetInterfaces() YANGEmpty {
	if t == nil || t.Interfaces == false {
		return false
	}
	return t.Interfaces
}

// GetMisc retrieves the value of the leaf Misc from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Misc is set, it can
// safely use t.GetMisc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Misc == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) GetMisc() YANGEmpty {
	if t == nil || t.Misc == false {
		return false
	}
	return t.Misc
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Lsdb.PopulateDefaults()
	t.Packet.PopulateDefaults()
	t.Routes.PopulateDefaults()
	t.Spf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/lsdb YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb struct {
	LinkStateId *string                                                                                        `path:"link-state-id" module:"srl_nokia-ospf"`
	RouterId    *string                                                                                        `path:"router-id" module:"srl_nokia-ospf"`
	Type        E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb_Type `path:"type" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) IsYANGGoStruct() {
}

// GetLinkStateId retrieves the value of the leaf LinkStateId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkStateId is set, it can
// safely use t.GetLinkStateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkStateId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) GetLinkStateId() string {
	if t == nil || t.LinkStateId == nil {
		return ""
	}
	return *t.LinkStateId
}

// GetRouterId retrieves the value of the leaf RouterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Lsdb) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet struct {
	Detail   YANGEmpty                                                                                                           `path:"detail" module:"srl_nokia-ospf"`
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-ospf"`
	Type     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) GetDetail() YANGEmpty {
	if t == nil || t.Detail == false {
		return false
	}
	return t.Detail
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_Area_Interface_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes struct {
	DestAddress *string `path:"dest-address" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) IsYANGGoStruct() {
}

// GetDestAddress retrieves the value of the leaf DestAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestAddress is set, it can
// safely use t.GetDestAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) GetDestAddress() string {
	if t == nil || t.DestAddress == nil {
		return ""
	}
	return *t.DestAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Routes) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/trace-options/trace/spf YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf struct {
	DestAddress *string `path:"dest-address" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) IsYANGGoStruct() {
}

// GetDestAddress retrieves the value of the leaf DestAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestAddress is set, it can
// safely use t.GetDestAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) GetDestAddress() string {
	if t == nil || t.DestAddress == nil {
		return ""
	}
	return *t.DestAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TraceOptions_Trace_Spf) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering represents the /srl_nokia-network-instance/network-instance/protocols/ospf/instance/traffic-engineering YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering struct {
	Advertisement                    *bool `path:"advertisement" module:"srl_nokia-ospf"`
	LegacyLinkAttributeAdvertisement *bool `path:"legacy-link-attribute-advertisement" module:"srl_nokia-ospf"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) IsYANGGoStruct() {
}

// GetAdvertisement retrieves the value of the leaf Advertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertisement is set, it can
// safely use t.GetAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) GetAdvertisement() bool {
	if t == nil || t.Advertisement == nil {
		return false
	}
	return *t.Advertisement
}

// GetLegacyLinkAttributeAdvertisement retrieves the value of the leaf LegacyLinkAttributeAdvertisement from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LegacyLinkAttributeAdvertisement is set, it can
// safely use t.GetLegacyLinkAttributeAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LegacyLinkAttributeAdvertisement == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) GetLegacyLinkAttributeAdvertisement() bool {
	if t == nil || t.LegacyLinkAttributeAdvertisement == nil {
		return true
	}
	return *t.LegacyLinkAttributeAdvertisement
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertisement == nil {
		var v bool = false
		t.Advertisement = &v
	}
	if t.LegacyLinkAttributeAdvertisement == nil {
		var v bool = true
		t.LegacyLinkAttributeAdvertisement = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Ospf_Instance_TrafficEngineering) ΛBelongingModule() string {
	return "srl_nokia-ospf"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim represents the /srl_nokia-network-instance/network-instance/protocols/pim YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim struct {
	AdminState       E_SrlNokiaCommon_AdminState                                                 `path:"admin-state" module:"srl_nokia-pim"`
	EcmpBalance      *bool                                                                       `path:"ecmp-balance" module:"srl_nokia-pim"`
	EcmpBalanceHold  *uint32                                                                     `path:"ecmp-balance-hold" module:"srl_nokia-pim"`
	EcmpHashing      *bool                                                                       `path:"ecmp-hashing" module:"srl_nokia-pim"`
	Interface        map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface `path:"interface" module:"srl_nokia-pim"`
	Ipv4             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4                 `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6                 `path:"ipv6" module:"srl_nokia-pim"`
	RendezvousPoints *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints     `path:"rendezvous-points" module:"srl_nokia-pim"`
	SptSwitchover    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover        `path:"spt-switchover" module:"srl_nokia-pim"`
	Ssm              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm                  `path:"ssm" module:"srl_nokia-pim"`
	TraceOptions     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions         `path:"trace-options" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) NewInterface(InterfaceName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetInterface(InterfaceName string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateIpv6() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6{}
	return t.Ipv6
}

// GetOrCreateRendezvousPoints retrieves the value of the RendezvousPoints field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateRendezvousPoints() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints {
	if t.RendezvousPoints != nil {
		return t.RendezvousPoints
	}
	t.RendezvousPoints = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints{}
	return t.RendezvousPoints
}

// GetOrCreateSptSwitchover retrieves the value of the SptSwitchover field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateSptSwitchover() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover {
	if t.SptSwitchover != nil {
		return t.SptSwitchover
	}
	t.SptSwitchover = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover{}
	return t.SptSwitchover
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm{}
	return t.Ssm
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions{}
	return t.TraceOptions
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetIpv4() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetIpv6() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetRendezvousPoints returns the value of the RendezvousPoints struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field RendezvousPoints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetRendezvousPoints() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints {
	if t != nil && t.RendezvousPoints != nil {
		return t.RendezvousPoints
	}
	return nil
}

// GetSptSwitchover returns the value of the SptSwitchover struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field SptSwitchover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetSptSwitchover() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover {
	if t != nil && t.SptSwitchover != nil {
		return t.SptSwitchover
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetSsm() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEcmpBalance retrieves the value of the leaf EcmpBalance from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpBalance is set, it can
// safely use t.GetEcmpBalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpBalance == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetEcmpBalance() bool {
	if t == nil || t.EcmpBalance == nil {
		return false
	}
	return *t.EcmpBalance
}

// GetEcmpBalanceHold retrieves the value of the leaf EcmpBalanceHold from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpBalanceHold is set, it can
// safely use t.GetEcmpBalanceHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpBalanceHold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetEcmpBalanceHold() uint32 {
	if t == nil || t.EcmpBalanceHold == nil {
		return 1
	}
	return *t.EcmpBalanceHold
}

// GetEcmpHashing retrieves the value of the leaf EcmpHashing from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpHashing is set, it can
// safely use t.GetEcmpHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpHashing == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) GetEcmpHashing() bool {
	if t == nil || t.EcmpHashing == nil {
		return false
	}
	return *t.EcmpHashing
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EcmpBalance == nil {
		var v bool = false
		t.EcmpBalance = &v
	}
	if t.EcmpBalanceHold == nil {
		var v uint32 = 1
		t.EcmpBalanceHold = &v
	}
	if t.EcmpHashing == nil {
		var v bool = false
		t.EcmpHashing = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.RendezvousPoints.PopulateDefaults()
	t.SptSwitchover.PopulateDefaults()
	t.Ssm.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface represents the /srl_nokia-network-instance/network-instance/protocols/pim/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-pim"`
	AssertInterval      *uint32                     `path:"assert-interval" module:"srl_nokia-pim"`
	DrPriority          *uint32                     `path:"dr-priority" module:"srl_nokia-pim"`
	HelloInterval       *uint32                     `path:"hello-interval" module:"srl_nokia-pim"`
	HelloMultiplier     *uint32                     `path:"hello-multiplier" module:"srl_nokia-pim"`
	ImprovedAssert      *bool                       `path:"improved-assert" module:"srl_nokia-pim"`
	InterfaceName       *string                     `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4AdminState      E_SrlNokiaCommon_AdminState `path:"ipv4-admin-state" module:"srl_nokia-pim"`
	Ipv6AdminState      E_SrlNokiaCommon_AdminState `path:"ipv6-admin-state" module:"srl_nokia-pim"`
	MaximumNumberGroups *uint32                     `path:"maximum-number-groups" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetAssertInterval retrieves the value of the leaf AssertInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssertInterval is set, it can
// safely use t.GetAssertInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssertInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetAssertInterval() uint32 {
	if t == nil || t.AssertInterval == nil {
		return 60
	}
	return *t.AssertInterval
}

// GetDrPriority retrieves the value of the leaf DrPriority from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrPriority is set, it can
// safely use t.GetDrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrPriority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetDrPriority() uint32 {
	if t == nil || t.DrPriority == nil {
		return 1
	}
	return *t.DrPriority
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 30
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetHelloMultiplier() uint32 {
	if t == nil || t.HelloMultiplier == nil {
		return 35
	}
	return *t.HelloMultiplier
}

// GetImprovedAssert retrieves the value of the leaf ImprovedAssert from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImprovedAssert is set, it can
// safely use t.GetImprovedAssert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImprovedAssert == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetImprovedAssert() bool {
	if t == nil || t.ImprovedAssert == nil {
		return true
	}
	return *t.ImprovedAssert
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4AdminState retrieves the value of the leaf Ipv4AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4AdminState is set, it can
// safely use t.GetIpv4AdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetIpv4AdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.Ipv4AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.Ipv4AdminState
}

// GetIpv6AdminState retrieves the value of the leaf Ipv6AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6AdminState is set, it can
// safely use t.GetIpv6AdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetIpv6AdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.Ipv6AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.Ipv6AdminState
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.AssertInterval == nil {
		var v uint32 = 60
		t.AssertInterval = &v
	}
	if t.DrPriority == nil {
		var v uint32 = 1
		t.DrPriority = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 30
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint32 = 35
		t.HelloMultiplier = &v
	}
	if t.ImprovedAssert == nil {
		var v bool = true
		t.ImprovedAssert = &v
	}
	if t.Ipv4AdminState == 0 {
		t.Ipv4AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.Ipv6AdminState == 0 {
		t.Ipv6AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Interface) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 represents the /srl_nokia-network-instance/network-instance/protocols/pim/ipv4 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv4) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 represents the /srl_nokia-network-instance/network-instance/protocols/pim/ipv6 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ipv6) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints struct {
	Static *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static `path:"static" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) GetOrCreateStatic() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) GetStatic() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points/static YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static struct {
	RendezvousPoint map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint `path:"rendezvous-point" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) IsYANGGoStruct() {
}

// NewRendezvousPoint creates a new entry in the RendezvousPoint list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) NewRendezvousPoint(
	Address string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RendezvousPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RendezvousPoint", key)
	}

	t.RendezvousPoint[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint{
		Address: &Address,
	}

	return t.RendezvousPoint[key], nil
}

// RenameRendezvousPoint renames an entry in the list RendezvousPoint within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) RenameRendezvousPoint(oldK, newK string) error {
	if _, ok := t.RendezvousPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RendezvousPoint", newK)
	}

	e, ok := t.RendezvousPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RendezvousPoint", oldK)
	}
	e.Address = &newK

	t.RendezvousPoint[newK] = e
	delete(t.RendezvousPoint, oldK)
	return nil
}

// GetOrCreateRendezvousPoint retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) GetOrCreateRendezvousPoint(
	Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint {
	key := Address

	if v, ok := t.RendezvousPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRendezvousPoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRendezvousPoint got unexpected error: %v", err))
	}
	return v
}

// GetRendezvousPoint retrieves the value with the specified key from
// the RendezvousPoint map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) GetRendezvousPoint(
	Address string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint {
	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.RendezvousPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRendezvousPoint deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) DeleteRendezvousPoint(Address string) {
	key := Address

	delete(t.RendezvousPoint, key)
}

// AppendRendezvousPoint appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct to the
// list RendezvousPoint of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) AppendRendezvousPoint(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint,
) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint)
	}

	if _, ok := t.RendezvousPoint[key]; ok {
		return fmt.Errorf("duplicate key for list RendezvousPoint %v", key)
	}

	t.RendezvousPoint[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RendezvousPoint {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points/static/rendezvous-point YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct {
	Address *string                                                                                                         `path:"address" module:"srl_nokia-pim"`
	Group   map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group `path:"group" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) NewGroup(
	Prefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group{
		Prefix: &Prefix,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Prefix = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) GetOrCreateGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group {
	key := Prefix

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) GetGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) DeleteGroup(Prefix string) {
	key := Prefix

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group represents the /srl_nokia-network-instance/network-instance/protocols/pim/rendezvous-points/static/rendezvous-point/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group struct {
	Prefix *string `path:"prefix" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) IsYANGGoStruct() {
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_RendezvousPoints_Static_RendezvousPoint_Group) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover represents the /srl_nokia-network-instance/network-instance/protocols/pim/spt-switchover YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover struct {
	Group map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group `path:"group" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) NewGroup(
	Prefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group{
		Prefix: &Prefix,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Prefix = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) GetOrCreateGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group {
	key := Prefix

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) GetGroup(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) DeleteGroup(Prefix string) {
	key := Prefix

	delete(t.Group, key)
}

// AppendGroup appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group struct to the
// list Group of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) AppendGroup(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group represents the /srl_nokia-network-instance/network-instance/protocols/pim/spt-switchover/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group struct {
	Prefix    *string                                                                                   `path:"prefix" module:"srl_nokia-pim"`
	Threshold SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union `path:"threshold" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetThreshold retrieves the value of the leaf Threshold from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) GetThreshold() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group_Threshold_Union {
	if t == nil || t.Threshold == nil {
		return nil
	}
	return t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_SptSwitchover_Group) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm represents the /srl_nokia-network-instance/network-instance/protocols/pim/ssm YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm struct {
	SsmRanges *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges `path:"ssm-ranges" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) IsYANGGoStruct() {}

// GetOrCreateSsmRanges retrieves the value of the SsmRanges field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) GetOrCreateSsmRanges() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges {
	if t.SsmRanges != nil {
		return t.SsmRanges
	}
	t.SsmRanges = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges{}
	return t.SsmRanges
}

// GetSsmRanges returns the value of the SsmRanges struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm. If the receiver or the field SsmRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) GetSsmRanges() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges {
	if t != nil && t.SsmRanges != nil {
		return t.SsmRanges
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SsmRanges.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges represents the /srl_nokia-network-instance/network-instance/protocols/pim/ssm/ssm-ranges YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges struct {
	GroupRange map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange `path:"group-range" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) NewGroupRange(
	IpPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange{
		IpPrefix: &IpPrefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.IpPrefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) GetOrCreateGroupRange(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange {
	key := IpPrefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) GetGroupRange(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange {
	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) DeleteGroupRange(IpPrefix string) {
	key := IpPrefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange struct to the
// list GroupRange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) AppendGroupRange(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange represents the /srl_nokia-network-instance/network-instance/protocols/pim/ssm/ssm-ranges/group-range YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange struct {
	IpPrefix *string `path:"ip-prefix" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_Ssm_SsmRanges_GroupRange) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace `path:"trace" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace struct {
	Events *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events `path:"events" module:"srl_nokia-pim" yangPresence:"true"`
	Packet *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet `path:"packet" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) IsYANGGoStruct() {}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetOrCreateEvents() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events{}
	return t.Events
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetEvents returns the value of the Events struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetEvents() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Events.PopulateDefaults()
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events struct {
	AllEventTypes *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes `path:"all-event-types" module:"srl_nokia-pim" yangPresence:"true"`
	EventTypes    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes    `path:"event-types" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) IsYANGGoStruct() {
}

// GetOrCreateAllEventTypes retrieves the value of the AllEventTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetOrCreateAllEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes {
	if t.AllEventTypes != nil {
		return t.AllEventTypes
	}
	t.AllEventTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes{}
	return t.AllEventTypes
}

// GetOrCreateEventTypes retrieves the value of the EventTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetOrCreateEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes {
	if t.EventTypes != nil {
		return t.EventTypes
	}
	t.EventTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes{}
	return t.EventTypes
}

// GetAllEventTypes returns the value of the AllEventTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events. If the receiver or the field AllEventTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetAllEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes {
	if t != nil && t.AllEventTypes != nil {
		return t.AllEventTypes
	}
	return nil
}

// GetEventTypes returns the value of the EventTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events. If the receiver or the field EventTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) GetEventTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes {
	if t != nil && t.EventTypes != nil {
		return t.EventTypes
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AllEventTypes.PopulateDefaults()
	t.EventTypes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/all-event-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	InterfaceName *string `path:"interface-name" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_AllEventTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes struct {
	Adjacency     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency     `path:"adjacency" module:"srl_nokia-pim" yangPresence:"true"`
	Assert        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert        `path:"assert" module:"srl_nokia-pim" yangPresence:"true"`
	DataException *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException `path:"data-exception" module:"srl_nokia-pim" yangPresence:"true"`
	Database      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database      `path:"database" module:"srl_nokia-pim" yangPresence:"true"`
	Interface     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface     `path:"interface" module:"srl_nokia-pim" yangPresence:"true"`
	JoinPrune     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune     `path:"join-prune" module:"srl_nokia-pim" yangPresence:"true"`
	Messaging     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging     `path:"messaging" module:"srl_nokia-pim" yangPresence:"true"`
	PimRouteTable *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable `path:"pim-route-table" module:"srl_nokia-pim" yangPresence:"true"`
	Register      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register      `path:"register" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) IsYANGGoStruct() {
}

// GetOrCreateAdjacency retrieves the value of the Adjacency field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateAdjacency() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency {
	if t.Adjacency != nil {
		return t.Adjacency
	}
	t.Adjacency = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency{}
	return t.Adjacency
}

// GetOrCreateAssert retrieves the value of the Assert field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateAssert() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert {
	if t.Assert != nil {
		return t.Assert
	}
	t.Assert = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert{}
	return t.Assert
}

// GetOrCreateDataException retrieves the value of the DataException field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateDataException() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException {
	if t.DataException != nil {
		return t.DataException
	}
	t.DataException = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException{}
	return t.DataException
}

// GetOrCreateDatabase retrieves the value of the Database field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateDatabase() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database {
	if t.Database != nil {
		return t.Database
	}
	t.Database = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database{}
	return t.Database
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface{}
	return t.Interface
}

// GetOrCreateJoinPrune retrieves the value of the JoinPrune field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateJoinPrune() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune {
	if t.JoinPrune != nil {
		return t.JoinPrune
	}
	t.JoinPrune = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune{}
	return t.JoinPrune
}

// GetOrCreateMessaging retrieves the value of the Messaging field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateMessaging() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging {
	if t.Messaging != nil {
		return t.Messaging
	}
	t.Messaging = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging{}
	return t.Messaging
}

// GetOrCreatePimRouteTable retrieves the value of the PimRouteTable field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreatePimRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable {
	if t.PimRouteTable != nil {
		return t.PimRouteTable
	}
	t.PimRouteTable = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable{}
	return t.PimRouteTable
}

// GetOrCreateRegister retrieves the value of the Register field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetOrCreateRegister() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register {
	if t.Register != nil {
		return t.Register
	}
	t.Register = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register{}
	return t.Register
}

// GetAdjacency returns the value of the Adjacency struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Adjacency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetAdjacency() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency {
	if t != nil && t.Adjacency != nil {
		return t.Adjacency
	}
	return nil
}

// GetAssert returns the value of the Assert struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Assert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetAssert() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert {
	if t != nil && t.Assert != nil {
		return t.Assert
	}
	return nil
}

// GetDataException returns the value of the DataException struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field DataException is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetDataException() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException {
	if t != nil && t.DataException != nil {
		return t.DataException
	}
	return nil
}

// GetDatabase returns the value of the Database struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Database is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetDatabase() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database {
	if t != nil && t.Database != nil {
		return t.Database
	}
	return nil
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetJoinPrune returns the value of the JoinPrune struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field JoinPrune is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetJoinPrune() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune {
	if t != nil && t.JoinPrune != nil {
		return t.JoinPrune
	}
	return nil
}

// GetMessaging returns the value of the Messaging struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Messaging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetMessaging() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging {
	if t != nil && t.Messaging != nil {
		return t.Messaging
	}
	return nil
}

// GetPimRouteTable returns the value of the PimRouteTable struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field PimRouteTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetPimRouteTable() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable {
	if t != nil && t.PimRouteTable != nil {
		return t.PimRouteTable
	}
	return nil
}

// GetRegister returns the value of the Register struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes. If the receiver or the field Register is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) GetRegister() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register {
	if t != nil && t.Register != nil {
		return t.Register
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Adjacency.PopulateDefaults()
	t.Assert.PopulateDefaults()
	t.DataException.PopulateDefaults()
	t.Database.PopulateDefaults()
	t.Interface.PopulateDefaults()
	t.JoinPrune.PopulateDefaults()
	t.Messaging.PopulateDefaults()
	t.PimRouteTable.PopulateDefaults()
	t.Register.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/adjacency YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Adjacency) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/assert YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Assert) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/data-exception YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_DataException) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/database YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Database) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	InterfaceName *string `path:"interface-name" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Interface) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/join-prune YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_JoinPrune) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/messaging YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging struct{}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Messaging) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/pim-route-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable struct {
	Detail *bool `path:"detail" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_PimRouteTable) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/events/event-types/register YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register struct {
	Detail        *bool   `path:"detail" module:"srl_nokia-pim"`
	GroupAddress  *string `path:"group-address" module:"srl_nokia-pim"`
	SourceAddress *string `path:"source-address" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) IsYANGGoStruct() {
}

// GetDetail retrieves the value of the leaf Detail from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Detail is set, it can
// safely use t.GetDetail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Detail == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) GetDetail() bool {
	if t == nil || t.Detail == nil {
		return false
	}
	return *t.Detail
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Detail == nil {
		var v bool = false
		t.Detail = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Events_EventTypes_Register) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet struct {
	AllPacketTypes *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes `path:"all-packet-types" module:"srl_nokia-pim" yangPresence:"true"`
	PacketTypes    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes    `path:"packet-types" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetOrCreateAllPacketTypes retrieves the value of the AllPacketTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetOrCreateAllPacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes {
	if t.AllPacketTypes != nil {
		return t.AllPacketTypes
	}
	t.AllPacketTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes{}
	return t.AllPacketTypes
}

// GetOrCreatePacketTypes retrieves the value of the PacketTypes field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetOrCreatePacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes {
	if t.PacketTypes != nil {
		return t.PacketTypes
	}
	t.PacketTypes = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes{}
	return t.PacketTypes
}

// GetAllPacketTypes returns the value of the AllPacketTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet. If the receiver or the field AllPacketTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetAllPacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes {
	if t != nil && t.AllPacketTypes != nil {
		return t.AllPacketTypes
	}
	return nil
}

// GetPacketTypes returns the value of the PacketTypes struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet. If the receiver or the field PacketTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) GetPacketTypes() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes {
	if t != nil && t.PacketTypes != nil {
		return t.PacketTypes
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AllPacketTypes.PopulateDefaults()
	t.PacketTypes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/all-packet-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_AllPacketTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes struct {
	Assert       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert       `path:"assert" module:"srl_nokia-pim" yangPresence:"true"`
	Hello        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello        `path:"hello" module:"srl_nokia-pim" yangPresence:"true"`
	JoinPrune    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune    `path:"join-prune" module:"srl_nokia-pim" yangPresence:"true"`
	Register     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register     `path:"register" module:"srl_nokia-pim" yangPresence:"true"`
	RegisterStop *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop `path:"register-stop" module:"srl_nokia-pim" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) IsYANGGoStruct() {
}

// GetOrCreateAssert retrieves the value of the Assert field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateAssert() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert {
	if t.Assert != nil {
		return t.Assert
	}
	t.Assert = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert{}
	return t.Assert
}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateHello() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello{}
	return t.Hello
}

// GetOrCreateJoinPrune retrieves the value of the JoinPrune field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateJoinPrune() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune {
	if t.JoinPrune != nil {
		return t.JoinPrune
	}
	t.JoinPrune = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune{}
	return t.JoinPrune
}

// GetOrCreateRegister retrieves the value of the Register field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateRegister() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register {
	if t.Register != nil {
		return t.Register
	}
	t.Register = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register{}
	return t.Register
}

// GetOrCreateRegisterStop retrieves the value of the RegisterStop field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetOrCreateRegisterStop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop {
	if t.RegisterStop != nil {
		return t.RegisterStop
	}
	t.RegisterStop = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop{}
	return t.RegisterStop
}

// GetAssert returns the value of the Assert struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Assert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetAssert() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert {
	if t != nil && t.Assert != nil {
		return t.Assert
	}
	return nil
}

// GetHello returns the value of the Hello struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetHello() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetJoinPrune returns the value of the JoinPrune struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field JoinPrune is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetJoinPrune() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune {
	if t != nil && t.JoinPrune != nil {
		return t.JoinPrune
	}
	return nil
}

// GetRegister returns the value of the Register struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field Register is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetRegister() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register {
	if t != nil && t.Register != nil {
		return t.Register
	}
	return nil
}

// GetRegisterStop returns the value of the RegisterStop struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes. If the receiver or the field RegisterStop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) GetRegisterStop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop {
	if t != nil && t.RegisterStop != nil {
		return t.RegisterStop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Assert.PopulateDefaults()
	t.Hello.PopulateDefaults()
	t.JoinPrune.PopulateDefaults()
	t.Register.PopulateDefaults()
	t.RegisterStop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/assert YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Assert) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/hello YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Hello) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/join-prune YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_JoinPrune) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/register YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_Register) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop represents the /srl_nokia-network-instance/network-instance/protocols/pim/trace-options/trace/packet/packet-types/register-stop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop struct {
	AllInterfaces YANGEmpty `path:"all-interfaces" module:"srl_nokia-pim"`
	Egress        *bool     `path:"egress" module:"srl_nokia-pim"`
	Ingress       *bool     `path:"ingress" module:"srl_nokia-pim"`
	InterfaceName *string   `path:"interface-name" module:"srl_nokia-pim"`
	Ipv4          *bool     `path:"ipv4" module:"srl_nokia-pim"`
	Ipv6          *bool     `path:"ipv6" module:"srl_nokia-pim"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) GetAllInterfaces() YANGEmpty {
	if t == nil || t.AllInterfaces == false {
		return false
	}
	return t.AllInterfaces
}

// GetEgress retrieves the value of the leaf Egress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return true
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return true
	}
	return *t.Ingress
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = true
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = true
		t.Ingress = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Pim_TraceOptions_Trace_Packet_PacketTypes_RegisterStop) ΛBelongingModule() string {
	return "srl_nokia-pim"
}

// SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting represents the /srl_nokia-network-instance/network-instance/segment-routing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting struct {
	Mpls *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls `path:"mpls" module:"srl_nokia-segment-routing" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) IsYANGGoStruct() {}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting) ΛBelongingModule() string {
	return "srl_nokia-segment-routing"
}

// SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls represents the /srl_nokia-network-instance/network-instance/segment-routing/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls struct {
	GlobalBlock    *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock              `path:"global-block" module:"srl_nokia-segment-routing"`
	LocalPrefixSid map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid `path:"local-prefix-sid" module:"srl_nokia-segment-routing"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) IsYANGGoStruct() {}

// NewLocalPrefixSid creates a new entry in the LocalPrefixSid list of the
// SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) NewLocalPrefixSid(
	PrefixSidIndex uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalPrefixSid == nil {
		t.LocalPrefixSid = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid)
	}

	key := PrefixSidIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalPrefixSid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalPrefixSid", key)
	}

	t.LocalPrefixSid[key] = &SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid{
		PrefixSidIndex: &PrefixSidIndex,
	}

	return t.LocalPrefixSid[key], nil
}

// RenameLocalPrefixSid renames an entry in the list LocalPrefixSid within
// the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) RenameLocalPrefixSid(oldK, newK uint8) error {
	if _, ok := t.LocalPrefixSid[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalPrefixSid", newK)
	}

	e, ok := t.LocalPrefixSid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalPrefixSid", oldK)
	}
	e.PrefixSidIndex = &newK

	t.LocalPrefixSid[newK] = e
	delete(t.LocalPrefixSid, oldK)
	return nil
}

// GetOrCreateLocalPrefixSid retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) GetOrCreateLocalPrefixSid(
	PrefixSidIndex uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid {
	key := PrefixSidIndex

	if v, ok := t.LocalPrefixSid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalPrefixSid(PrefixSidIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalPrefixSid got unexpected error: %v", err))
	}
	return v
}

// GetLocalPrefixSid retrieves the value with the specified key from
// the LocalPrefixSid map field of SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) GetLocalPrefixSid(
	PrefixSidIndex uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid {
	if t == nil {
		return nil
	}

	key := PrefixSidIndex

	if lm, ok := t.LocalPrefixSid[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalPrefixSid deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) DeleteLocalPrefixSid(PrefixSidIndex uint8) {
	key := PrefixSidIndex

	delete(t.LocalPrefixSid, key)
}

// AppendLocalPrefixSid appends the supplied SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid struct to the
// list LocalPrefixSid of SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) AppendLocalPrefixSid(
	v *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid,
) error {
	if v.PrefixSidIndex == nil {
		return fmt.Errorf("invalid nil key received for PrefixSidIndex")
	}

	key := *v.PrefixSidIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalPrefixSid == nil {
		t.LocalPrefixSid = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid)
	}

	if _, ok := t.LocalPrefixSid[key]; ok {
		return fmt.Errorf("duplicate key for list LocalPrefixSid %v", key)
	}

	t.LocalPrefixSid[key] = v
	return nil
}

// GetOrCreateGlobalBlock retrieves the value of the GlobalBlock field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) GetOrCreateGlobalBlock() *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock {
	if t.GlobalBlock != nil {
		return t.GlobalBlock
	}
	t.GlobalBlock = &SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock{}
	return t.GlobalBlock
}

// GetGlobalBlock returns the value of the GlobalBlock struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls. If the receiver or the field GlobalBlock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) GetGlobalBlock() *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock {
	if t != nil && t.GlobalBlock != nil {
		return t.GlobalBlock
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GlobalBlock.PopulateDefaults()
	for _, e := range t.LocalPrefixSid {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls) ΛBelongingModule() string {
	return "srl_nokia-segment-routing"
}

// SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock represents the /srl_nokia-network-instance/network-instance/segment-routing/mpls/global-block YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock struct {
	LabelRange *string `path:"label-range" module:"srl_nokia-segment-routing"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) IsYANGGoStruct() {}

// GetLabelRange retrieves the value of the leaf LabelRange from the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelRange is set, it can
// safely use t.GetLabelRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelRange == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) GetLabelRange() string {
	if t == nil || t.LabelRange == nil {
		return ""
	}
	return *t.LabelRange
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_GlobalBlock) ΛBelongingModule() string {
	return "srl_nokia-segment-routing"
}

// SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid represents the /srl_nokia-network-instance/network-instance/segment-routing/mpls/local-prefix-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid struct {
	Interface      *string `path:"interface" module:"srl_nokia-segment-routing"`
	Ipv4LabelIndex *uint32 `path:"ipv4-label-index" module:"srl_nokia-segment-routing"`
	Ipv6LabelIndex *uint32 `path:"ipv6-label-index" module:"srl_nokia-segment-routing"`
	NodeSid        *bool   `path:"node-sid" module:"srl_nokia-segment-routing"`
	PrefixSidIndex *uint8  `path:"prefix-sid-index" module:"srl_nokia-segment-routing"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetIpv4LabelIndex retrieves the value of the leaf Ipv4LabelIndex from the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4LabelIndex is set, it can
// safely use t.GetIpv4LabelIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4LabelIndex == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) GetIpv4LabelIndex() uint32 {
	if t == nil || t.Ipv4LabelIndex == nil {
		return 0
	}
	return *t.Ipv4LabelIndex
}

// GetIpv6LabelIndex retrieves the value of the leaf Ipv6LabelIndex from the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6LabelIndex is set, it can
// safely use t.GetIpv6LabelIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6LabelIndex == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) GetIpv6LabelIndex() uint32 {
	if t == nil || t.Ipv6LabelIndex == nil {
		return 0
	}
	return *t.Ipv6LabelIndex
}

// GetNodeSid retrieves the value of the leaf NodeSid from the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return true
	}
	return *t.NodeSid
}

// GetPrefixSidIndex retrieves the value of the leaf PrefixSidIndex from the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSidIndex is set, it can
// safely use t.GetPrefixSidIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSidIndex == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) GetPrefixSidIndex() uint8 {
	if t == nil || t.PrefixSidIndex == nil {
		return 0
	}
	return *t.PrefixSidIndex
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NodeSid == nil {
		var v bool = true
		t.NodeSid = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixSidIndex == nil {
		return nil, fmt.Errorf("nil value for key PrefixSidIndex")
	}

	return map[string]interface{}{
		"prefix-sid-index": *t.PrefixSidIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_SegmentRouting_Mpls_LocalPrefixSid) ΛBelongingModule() string {
	return "srl_nokia-segment-routing"
}

// SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes represents the /srl_nokia-network-instance/network-instance/static-routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes struct {
	AdminState E_SrlNokiaCommon_AdminState                                            `path:"admin-state" module:"srl_nokia-static-routes"`
	Route      map[string]*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route `path:"route" module:"srl_nokia-static-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) IsYANGGoStruct() {}

// NewRoute creates a new entry in the Route list of the
// SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) NewRoute(Prefix string) (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route{
		Prefix: &Prefix,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) RenameRoute(oldK, newK string) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) GetOrCreateRoute(Prefix string) *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route {
	key := Prefix

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) GetRoute(Prefix string) *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) DeleteRoute(Prefix string) {
	key := Prefix

	delete(t.Route, key)
}

// AppendRoute appends the supplied SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route struct to the
// list Route of SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) AppendRoute(
	v *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes.
func (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) ΛBelongingModule() string {
	return "srl_nokia-static-routes"
}
