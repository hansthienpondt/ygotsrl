/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType                                                                                                    `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode               E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Ipv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast struct {
	AdvertiseIpv6NextHops     *bool                                                                                             `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	Convergence               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	InterAsVpn                *bool                                                                                             `path:"inter-as-vpn" module:"srl_nokia-bgp"`
	NextHopResolution         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
	NextHopSelfRouteReflector *bool                                                                                             `path:"next-hop-self-route-reflector" module:"srl_nokia-bgp"`
	RapidUpdate               *bool                                                                                             `path:"rapid-update" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops       *bool                                                                                             `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) IsYANGGoStruct() {
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence{}
	return t.Convergence
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetInterAsVpn retrieves the value of the leaf InterAsVpn from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterAsVpn is set, it can
// safely use t.GetInterAsVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterAsVpn == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetInterAsVpn() bool {
	if t == nil || t.InterAsVpn == nil {
		return false
	}
	return *t.InterAsVpn
}

// GetNextHopSelfRouteReflector retrieves the value of the leaf NextHopSelfRouteReflector from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelfRouteReflector is set, it can
// safely use t.GetNextHopSelfRouteReflector() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelfRouteReflector == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetNextHopSelfRouteReflector() bool {
	if t == nil || t.NextHopSelfRouteReflector == nil {
		return false
	}
	return *t.NextHopSelfRouteReflector
}

// GetRapidUpdate retrieves the value of the leaf RapidUpdate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidUpdate is set, it can
// safely use t.GetRapidUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidUpdate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetRapidUpdate() bool {
	if t == nil || t.RapidUpdate == nil {
		return false
	}
	return *t.RapidUpdate
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseIpv6NextHops == nil {
		var v bool = false
		t.AdvertiseIpv6NextHops = &v
	}
	if t.InterAsVpn == nil {
		var v bool = false
		t.InterAsVpn = &v
	}
	if t.NextHopSelfRouteReflector == nil {
		var v bool = false
		t.NextHopSelfRouteReflector = &v
	}
	if t.RapidUpdate == nil {
		var v bool = false
		t.RapidUpdate = &v
	}
	if t.ReceiveIpv6NextHops == nil {
		var v bool = false
		t.ReceiveIpv6NextHops = &v
	}
	t.Convergence.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution/ipv4-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution/ipv6-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv4Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast struct {
	Convergence               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence       `path:"convergence" module:"srl_nokia-bgp"`
	InterAsVpn                *bool                                                                                             `path:"inter-as-vpn" module:"srl_nokia-bgp"`
	NextHopResolution         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution `path:"next-hop-resolution" module:"srl_nokia-bgp"`
	NextHopSelfRouteReflector *bool                                                                                             `path:"next-hop-self-route-reflector" module:"srl_nokia-bgp"`
	RapidUpdate               *bool                                                                                             `path:"rapid-update" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) IsYANGGoStruct() {
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetOrCreateConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence{}
	return t.Convergence
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetOrCreateNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution{}
	return t.NextHopResolution
}

// GetConvergence returns the value of the Convergence struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetConvergence() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetNextHopResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetInterAsVpn retrieves the value of the leaf InterAsVpn from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterAsVpn is set, it can
// safely use t.GetInterAsVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterAsVpn == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetInterAsVpn() bool {
	if t == nil || t.InterAsVpn == nil {
		return false
	}
	return *t.InterAsVpn
}

// GetNextHopSelfRouteReflector retrieves the value of the leaf NextHopSelfRouteReflector from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelfRouteReflector is set, it can
// safely use t.GetNextHopSelfRouteReflector() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelfRouteReflector == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetNextHopSelfRouteReflector() bool {
	if t == nil || t.NextHopSelfRouteReflector == nil {
		return false
	}
	return *t.NextHopSelfRouteReflector
}

// GetRapidUpdate retrieves the value of the leaf RapidUpdate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidUpdate is set, it can
// safely use t.GetRapidUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidUpdate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) GetRapidUpdate() bool {
	if t == nil || t.RapidUpdate == nil {
		return false
	}
	return *t.RapidUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterAsVpn == nil {
		var v bool = false
		t.InterAsVpn = &v
	}
	if t.NextHopSelfRouteReflector == nil {
		var v bool = false
		t.NextHopSelfRouteReflector = &v
	}
	if t.RapidUpdate == nil {
		var v bool = false
		t.RapidUpdate = &v
	}
	t.Convergence.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence struct {
	MaxWaitToAdvertise *uint16 `path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) IsYANGGoStruct() {
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) GetMaxWaitToAdvertise() uint16 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint16 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution struct {
	Ipv4NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops `path:"ipv4-next-hops" module:"srl_nokia-bgp"`
	Ipv6NextHops *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops `path:"ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) IsYANGGoStruct() {
}

// GetOrCreateIpv4NextHops retrieves the value of the Ipv4NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) GetOrCreateIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops {
	if t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	t.Ipv4NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops{}
	return t.Ipv4NextHops
}

// GetOrCreateIpv6NextHops retrieves the value of the Ipv6NextHops field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) GetOrCreateIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops {
	if t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	t.Ipv6NextHops = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops{}
	return t.Ipv6NextHops
}

// GetIpv4NextHops returns the value of the Ipv4NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution. If the receiver or the field Ipv4NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) GetIpv4NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops {
	if t != nil && t.Ipv4NextHops != nil {
		return t.Ipv4NextHops
	}
	return nil
}

// GetIpv6NextHops returns the value of the Ipv6NextHops struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution. If the receiver or the field Ipv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) GetIpv6NextHops() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops {
	if t != nil && t.Ipv6NextHops != nil {
		return t.Ipv6NextHops
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NextHops.PopulateDefaults()
	t.Ipv6NextHops.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution/ipv4-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution/ipv6-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops struct {
	RouteResolution  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution  `path:"route-resolution" module:"srl_nokia-bgp"`
	TunnelResolution *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution `path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) IsYANGGoStruct() {
}

// GetOrCreateRouteResolution retrieves the value of the RouteResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t.RouteResolution != nil {
		return t.RouteResolution
	}
	t.RouteResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution{}
	return t.RouteResolution
}

// GetOrCreateTunnelResolution retrieves the value of the TunnelResolution field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) GetOrCreateTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	t.TunnelResolution = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution{}
	return t.TunnelResolution
}

// GetRouteResolution returns the value of the RouteResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field RouteResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) GetRouteResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution {
	if t != nil && t.RouteResolution != nil {
		return t.RouteResolution
	}
	return nil
}

// GetTunnelResolution returns the value of the TunnelResolution struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops. If the receiver or the field TunnelResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) GetTunnelResolution() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution {
	if t != nil && t.TunnelResolution != nil {
		return t.TunnelResolution
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteResolution.PopulateDefaults()
	t.TunnelResolution.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution/ipv6-next-hops/route-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution struct {
	AdminState          E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	IgnoreDefaultRoutes *bool                       `path:"ignore-default-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetIgnoreDefaultRoutes retrieves the value of the leaf IgnoreDefaultRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoutes is set, it can
// safely use t.GetIgnoreDefaultRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) GetIgnoreDefaultRoutes() bool {
	if t == nil || t.IgnoreDefaultRoutes == nil {
		return true
	}
	return *t.IgnoreDefaultRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.IgnoreDefaultRoutes == nil {
		var v bool = true
		t.IgnoreDefaultRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_RouteResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution struct {
	AllowedTunnelTypes []E_SrlNokiaCommon_TunnelType `path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) IsYANGGoStruct() {
}

// GetAllowedTunnelTypes retrieves the value of the leaf AllowedTunnelTypes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedTunnelTypes is set, it can
// safely use t.GetAllowedTunnelTypes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedTunnelTypes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) GetAllowedTunnelTypes() []E_SrlNokiaCommon_TunnelType {
	if t == nil || t.AllowedTunnelTypes == nil {
		return nil
	}
	return t.AllowedTunnelTypes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_L3VpnIpv6Unicast_NextHopResolution_Ipv6NextHops_TunnelResolution) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/afi-safi/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath struct {
	AllowMultipleAs *bool   `path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1 *uint32 `path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2 *uint32 `path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleAs is set, it can
// safely use t.GetAllowMultipleAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return true
	}
	return *t.AllowMultipleAs
}

// GetMaxPathsLevel_1 retrieves the value of the leaf MaxPathsLevel_1 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPathsLevel_1 is set, it can
// safely use t.GetMaxPathsLevel_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPathsLevel_1 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) GetMaxPathsLevel_1() uint32 {
	if t == nil || t.MaxPathsLevel_1 == nil {
		return 1
	}
	return *t.MaxPathsLevel_1
}

// GetMaxPathsLevel_2 retrieves the value of the leaf MaxPathsLevel_2 from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPathsLevel_2 is set, it can
// safely use t.GetMaxPathsLevel_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPathsLevel_2 == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) GetMaxPathsLevel_2() uint32 {
	if t == nil || t.MaxPathsLevel_2 == nil {
		return 1
	}
	return *t.MaxPathsLevel_2
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowMultipleAs == nil {
		var v bool = true
		t.AllowMultipleAs = &v
	}
	if t.MaxPathsLevel_1 == nil {
		var v uint32 = 1
		t.MaxPathsLevel_1 = &v
	}
	if t.MaxPathsLevel_2 == nil {
		var v uint32 = 1
		t.MaxPathsLevel_2 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AfiSafi_Multipath) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions struct {
	AllowOwnAs      *uint8                                                                               `path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs `path:"remove-private-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) IsYANGGoStruct() {}

// GetOrCreateRemovePrivateAs retrieves the value of the RemovePrivateAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) GetOrCreateRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs {
	if t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	t.RemovePrivateAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs{}
	return t.RemovePrivateAs
}

// GetRemovePrivateAs returns the value of the RemovePrivateAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions. If the receiver or the field RemovePrivateAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) GetRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs {
	if t != nil && t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	return nil
}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOwnAs is set, it can
// safely use t.GetAllowOwnAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOwnAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowOwnAs == nil {
		var v uint8 = 0
		t.AllowOwnAs = &v
	}
	t.RemovePrivateAs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs *bool                                                                                      `path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly  *bool                                                                                      `path:"leading-only" module:"srl_nokia-bgp"`
	Mode         E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {
}

// GetIgnorePeerAs retrieves the value of the leaf IgnorePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnorePeerAs is set, it can
// safely use t.GetIgnorePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnorePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) GetIgnorePeerAs() bool {
	if t == nil || t.IgnorePeerAs == nil {
		return false
	}
	return *t.IgnorePeerAs
}

// GetLeadingOnly retrieves the value of the leaf LeadingOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeadingOnly is set, it can
// safely use t.GetLeadingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeadingOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) GetLeadingOnly() bool {
	if t == nil || t.LeadingOnly == nil {
		return false
	}
	return *t.LeadingOnly
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode {
	if t == nil || t.Mode == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_disabled
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnorePeerAs == nil {
		var v bool = false
		t.IgnorePeerAs = &v
	}
	if t.LeadingOnly == nil {
		var v bool = false
		t.LeadingOnly = &v
	}
	if t.Mode == 0 {
		t.Mode = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_disabled
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-bgp"`
	Password *string `path:"password" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) IsYANGGoStruct() {}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// GetPassword retrieves the value of the leaf Password from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/best-path-selection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection struct {
	AlwaysCompareMed *bool `path:"always-compare-med" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) IsYANGGoStruct() {}

// GetAlwaysCompareMed retrieves the value of the leaf AlwaysCompareMed from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlwaysCompareMed is set, it can
// safely use t.GetAlwaysCompareMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlwaysCompareMed == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) GetAlwaysCompareMed() bool {
	if t == nil || t.AlwaysCompareMed == nil {
		return false
	}
	return *t.AlwaysCompareMed
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlwaysCompareMed == nil {
		var v bool = false
		t.AlwaysCompareMed = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BestPathSelection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel represents the /srl_nokia-network-instance/network-instance/protocols/bgp/bgp-label YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel struct {
	LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast `path:"labeled-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) IsYANGGoStruct() {}

// GetOrCreateLabeledUnicast retrieves the value of the LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) GetOrCreateLabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast {
	if t.LabeledUnicast != nil {
		return t.LabeledUnicast
	}
	t.LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast{}
	return t.LabeledUnicast
}

// GetLabeledUnicast returns the value of the LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel. If the receiver or the field LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) GetLabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast {
	if t != nil && t.LabeledUnicast != nil {
		return t.LabeledUnicast
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LabeledUnicast.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/bgp-label/labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast struct {
	DynamicLabelBlock *string `path:"dynamic-label-block" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) IsYANGGoStruct() {
}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_BgpLabel_LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence struct {
	MinWaitToAdvertise *uint16 `path:"min-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) IsYANGGoStruct() {}

// GetMinWaitToAdvertise retrieves the value of the leaf MinWaitToAdvertise from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinWaitToAdvertise is set, it can
// safely use t.GetMinWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) GetMinWaitToAdvertise() uint16 {
	if t == nil || t.MinWaitToAdvertise == nil {
		return 0
	}
	return *t.MinWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinWaitToAdvertise == nil {
		var v uint16 = 0
		t.MinWaitToAdvertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct {
	Accept    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept               `path:"accept" module:"srl_nokia-bgp"`
	Interface map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface `path:"interface" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAccept retrieves the value of the Accept field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetOrCreateAccept() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept {
	if t.Accept != nil {
		return t.Accept
	}
	t.Accept = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept{}
	return t.Accept
}

// GetAccept returns the value of the Accept struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors. If the receiver or the field Accept is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) GetAccept() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept {
	if t != nil && t.Accept != nil {
		return t.Accept
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accept.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct {
	Match       map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match `path:"match" module:"srl_nokia-bgp"`
	MaxSessions *uint16                                                                                         `path:"max-sessions" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) IsYANGGoStruct() {
}

// NewMatch creates a new entry in the Match list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) NewMatch(
	Prefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Match[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Match", key)
	}

	t.Match[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match{
		Prefix: &Prefix,
	}

	return t.Match[key], nil
}

// RenameMatch renames an entry in the list Match within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) RenameMatch(oldK, newK string) error {
	if _, ok := t.Match[newK]; ok {
		return fmt.Errorf("key %v already exists in Match", newK)
	}

	e, ok := t.Match[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Match", oldK)
	}
	e.Prefix = &newK

	t.Match[newK] = e
	delete(t.Match, oldK)
	return nil
}

// GetOrCreateMatch retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) GetOrCreateMatch(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match {
	key := Prefix

	if v, ok := t.Match[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMatch(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMatch got unexpected error: %v", err))
	}
	return v
}

// GetMatch retrieves the value with the specified key from
// the Match map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) GetMatch(
	Prefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match {
	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Match[key]; ok {
		return lm
	}
	return nil
}

// DeleteMatch deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) DeleteMatch(Prefix string) {
	key := Prefix

	delete(t.Match, key)
}

// AppendMatch appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct to the
// list Match of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) AppendMatch(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match,
) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match)
	}

	if _, ok := t.Match[key]; ok {
		return fmt.Errorf("duplicate key for list Match %v", key)
	}

	t.Match[key] = v
	return nil
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) GetMaxSessions() uint16 {
	if t == nil || t.MaxSessions == nil {
		return 0
	}
	return *t.MaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSessions == nil {
		var v uint16 = 0
		t.MaxSessions = &v
	}
	for _, e := range t.Match {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct {
	AllowedPeerAs []string `path:"allowed-peer-as" module:"srl_nokia-bgp"`
	PeerGroup     *string  `path:"peer-group" module:"srl_nokia-bgp"`
	Prefix        *string  `path:"prefix" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) IsYANGGoStruct() {
}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface struct {
	AllowedPeerAs []string `path:"allowed-peer-as" module:"srl_nokia-bgp"`
	InterfaceName *string  `path:"interface-name" module:"srl_nokia-bgp"`
	MaxSessions   *uint16  `path:"max-sessions" module:"srl_nokia-bgp"`
	PeerGroup     *string  `path:"peer-group" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) IsYANGGoStruct() {
}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetMaxSessions() uint16 {
	if t == nil || t.MaxSessions == nil {
		return 1
	}
	return *t.MaxSessions
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSessions == nil {
		var v uint16 = 1
		t.MaxSessions = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Interface) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ebgp-default-policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy struct {
	ExportRejectAll *bool `path:"export-reject-all" module:"srl_nokia-bgp"`
	ImportRejectAll *bool `path:"import-reject-all" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) IsYANGGoStruct() {}

// GetExportRejectAll retrieves the value of the leaf ExportRejectAll from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRejectAll is set, it can
// safely use t.GetExportRejectAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRejectAll == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) GetExportRejectAll() bool {
	if t == nil || t.ExportRejectAll == nil {
		return true
	}
	return *t.ExportRejectAll
}

// GetImportRejectAll retrieves the value of the leaf ImportRejectAll from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRejectAll is set, it can
// safely use t.GetImportRejectAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRejectAll == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) GetImportRejectAll() bool {
	if t == nil || t.ImportRejectAll == nil {
		return true
	}
	return *t.ImportRejectAll
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExportRejectAll == nil {
		var v bool = true
		t.ExportRejectAll = &v
	}
	if t.ImportRejectAll == nil {
		var v bool = true
		t.ImportRejectAll = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection struct {
	EnableBfd    *bool `path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover *bool `path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) IsYANGGoStruct() {}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetFastFailover retrieves the value of the leaf FastFailover from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFailover is set, it can
// safely use t.GetFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFailover == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) GetFastFailover() bool {
	if t == nil || t.FastFailover == nil {
		return true
	}
	return *t.FastFailover
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.FastFailover == nil {
		var v bool = true
		t.FastFailover = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart struct {
	AdminState           E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	RequestedRestartTime *uint16                     `path:"requested-restart-time" module:"srl_nokia-bgp"`
	StaleRoutesTime      *uint16                     `path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetRequestedRestartTime retrieves the value of the leaf RequestedRestartTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestedRestartTime is set, it can
// safely use t.GetRequestedRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestedRestartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) GetRequestedRestartTime() uint16 {
	if t == nil || t.RequestedRestartTime == nil {
		return 300
	}
	return *t.RequestedRestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) GetStaleRoutesTime() uint16 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.RequestedRestartTime == nil {
		var v uint16 = 300
		t.RequestedRestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint16 = 360
		t.StaleRoutesTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct {
	AdminState        E_SrlNokiaCommon_AdminState                                                                                `path:"admin-state" module:"srl_nokia-bgp"`
	AfiSafi           map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi `path:"afi-safi" module:"srl_nokia-bgp"`
	AsPathOptions     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions                                 `path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication                                `path:"authentication" module:"srl_nokia-bgp"`
	Description       *string                                                                                                    `path:"description" module:"srl_nokia-bgp"`
	ExportPolicy      *string                                                                                                    `path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection                              `path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart                               `path:"graceful-restart" module:"srl_nokia-bgp"`
	GroupName         *string                                                                                                    `path:"group-name" module:"srl_nokia-bgp"`
	ImportPolicy      *string                                                                                                    `path:"import-policy" module:"srl_nokia-bgp"`
	LocalAs           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs                                       `path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference   *uint32                                                                                                    `path:"local-preference" module:"srl_nokia-bgp"`
	Multihop          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop                                      `path:"multihop" module:"srl_nokia-bgp"`
	NextHopSelf       *bool                                                                                                      `path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAs            *uint32                                                                                                    `path:"peer-as" module:"srl_nokia-bgp"`
	RouteReflector    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector                                `path:"route-reflector" module:"srl_nokia-bgp"`
	SendCommunity     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity                                 `path:"send-community" module:"srl_nokia-bgp"`
	SendCommunityType []E_SrlNokiaBgp_CommunityType                                                                              `path:"send-community-type" module:"srl_nokia-bgp"`
	SendDefaultRoute  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute                              `path:"send-default-route" module:"srl_nokia-bgp"`
	Timers            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers                                        `path:"timers" module:"srl_nokia-bgp"`
	TraceOptions      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions                                  `path:"trace-options" module:"srl_nokia-bgp"`
	Transport         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport                                     `path:"transport" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) NewAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// RenameAfiSafi renames an entry in the list AfiSafi within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) RenameAfiSafi(oldK, newK E_SrlNokiaCommon_BgpAddressFamily) error {
	if _, ok := t.AfiSafi[newK]; ok {
		return fmt.Errorf("key %v already exists in AfiSafi", newK)
	}

	e, ok := t.AfiSafi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AfiSafi", oldK)
	}
	e.AfiSafiName = newK

	t.AfiSafi[newK] = e
	delete(t.AfiSafi, oldK)
	return nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi {
	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi {
	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) DeleteAfiSafi(AfiSafiName E_SrlNokiaCommon_BgpAddressFamily) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi struct to the
// list AfiSafi of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) AppendAfiSafi(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi,
) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication{}
	return t.Authentication
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateLocalAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMultihop retrieves the value of the Multihop field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop {
	if t.Multihop != nil {
		return t.Multihop
	}
	t.Multihop = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop{}
	return t.Multihop
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateSendCommunity retrieves the value of the SendCommunity field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity {
	if t.SendCommunity != nil {
		return t.SendCommunity
	}
	t.SendCommunity = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity{}
	return t.SendCommunity
}

// GetOrCreateSendDefaultRoute retrieves the value of the SendDefaultRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute {
	if t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	t.SendDefaultRoute = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute{}
	return t.SendDefaultRoute
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport{}
	return t.Transport
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetLocalAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMultihop returns the value of the Multihop struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Multihop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop {
	if t != nil && t.Multihop != nil {
		return t.Multihop
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetSendCommunity returns the value of the SendCommunity struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field SendCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity {
	if t != nil && t.SendCommunity != nil {
		return t.SendCommunity
	}
	return nil
}

// GetSendDefaultRoute returns the value of the SendDefaultRoute struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field SendDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute {
	if t != nil && t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPeerAs retrieves the value of the leaf PeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetSendCommunityType retrieves the value of the leaf SendCommunityType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendCommunityType is set, it can
// safely use t.GetSendCommunityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendCommunityType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) GetSendCommunityType() []E_SrlNokiaBgp_CommunityType {
	if t == nil || t.SendCommunityType == nil {
		return nil
	}
	return t.SendCommunityType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.NextHopSelf == nil {
		var v bool = false
		t.NextHopSelf = &v
	}
	t.AsPathOptions.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Multihop.PopulateDefaults()
	t.RouteReflector.PopulateDefaults()
	t.SendCommunity.PopulateDefaults()
	t.SendDefaultRoute.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.AfiSafi {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi struct {
	AddPaths           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths           `path:"add-paths" module:"srl_nokia-bgp"`
	AdminState         E_SrlNokiaCommon_AdminState                                                             `path:"admin-state" module:"srl_nokia-bgp"`
	AfiSafiName        E_SrlNokiaCommon_BgpAddressFamily                                                       `path:"afi-safi-name" module:"srl_nokia-bgp"`
	Evpn               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn               `path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy       *string                                                                                 `path:"export-policy" module:"srl_nokia-bgp"`
	ImportPolicy       *string                                                                                 `path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast `path:"ipv4-labeled-unicast" module:"srl_nokia-bgp"`
	Ipv4Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6LabeledUnicast *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast `path:"ipv6-labeled-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-bgp"`
	L3VpnIpv4Unicast   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast   `path:"l3vpn-ipv4-unicast" module:"srl_nokia-bgp"`
	L3VpnIpv6Unicast   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast   `path:"l3vpn-ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths{}
	return t.AddPaths
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4LabeledUnicast retrieves the value of the Ipv4LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateIpv4LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast {
	if t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	t.Ipv4LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast{}
	return t.Ipv4LabeledUnicast
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6LabeledUnicast retrieves the value of the Ipv6LabeledUnicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateIpv6LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast {
	if t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	t.Ipv6LabeledUnicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast{}
	return t.Ipv6LabeledUnicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateL3VpnIpv4Unicast retrieves the value of the L3VpnIpv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateL3VpnIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast {
	if t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	t.L3VpnIpv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast{}
	return t.L3VpnIpv4Unicast
}

// GetOrCreateL3VpnIpv6Unicast retrieves the value of the L3VpnIpv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetOrCreateL3VpnIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast {
	if t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	t.L3VpnIpv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast{}
	return t.L3VpnIpv6Unicast
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetAddPaths() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetEvpn() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4LabeledUnicast returns the value of the Ipv4LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field Ipv4LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetIpv4LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast {
	if t != nil && t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6LabeledUnicast returns the value of the Ipv6LabeledUnicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field Ipv6LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetIpv6LabeledUnicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast {
	if t != nil && t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetL3VpnIpv4Unicast returns the value of the L3VpnIpv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field L3VpnIpv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetL3VpnIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast {
	if t != nil && t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	return nil
}

// GetL3VpnIpv6Unicast returns the value of the L3VpnIpv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi. If the receiver or the field L3VpnIpv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetL3VpnIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast {
	if t != nil && t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiName is set, it can
// safely use t.GetAfiSafiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetAfiSafiName() E_SrlNokiaCommon_BgpAddressFamily {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddPaths.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.Ipv4LabeledUnicast.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6LabeledUnicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.L3VpnIpv4Unicast.PopulateDefaults()
	t.L3VpnIpv6Unicast.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/add-paths YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths struct {
	Receive       *bool     `path:"receive" module:"srl_nokia-bgp"`
	Send          *bool     `path:"send" module:"srl_nokia-bgp"`
	SendMax       *uint8    `path:"send-max" module:"srl_nokia-bgp"`
	SendMultipath YANGEmpty `path:"send-multipath" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMax is set, it can
// safely use t.GetSendMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMax == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// GetSendMultipath retrieves the value of the leaf SendMultipath from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendMultipath is set, it can
// safely use t.GetSendMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendMultipath == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) GetSendMultipath() YANGEmpty {
	if t == nil || t.SendMultipath == false {
		return false
	}
	return t.SendMultipath
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_AddPaths) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn struct {
	AdvertiseIpv6NextHops *bool                                                                                 `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/evpn/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Evpn_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast struct {
	AdvertiseIpv6NextHops *bool                                                                                               `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	NextHopUnchanged      *bool                                                                                               `path:"next-hop-unchanged" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                               `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetNextHopUnchanged retrieves the value of the leaf NextHopUnchanged from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopUnchanged is set, it can
// safely use t.GetNextHopUnchanged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopUnchanged == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) GetNextHopUnchanged() bool {
	if t == nil || t.NextHopUnchanged == nil {
		return false
	}
	return *t.NextHopUnchanged
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHopUnchanged == nil {
		var v bool = false
		t.NextHopUnchanged = &v
	}
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast struct {
	AdvertiseIpv6NextHops *bool                                                                                          `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	LinkBandwidth         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth `path:"link-bandwidth" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit   `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                          `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) GetOrCreateLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) GetLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkBandwidth.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/link-bandwidth YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth struct {
	AddNextHopCountToReceivedBgpRoutes SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union `path:"add-next-hop-count-to-received-bgp-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) IsYANGGoStruct() {
}

// GetAddNextHopCountToReceivedBgpRoutes retrieves the value of the leaf AddNextHopCountToReceivedBgpRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddNextHopCountToReceivedBgpRoutes is set, it can
// safely use t.GetAddNextHopCountToReceivedBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddNextHopCountToReceivedBgpRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) GetAddNextHopCountToReceivedBgpRoutes() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union {
	if t == nil || t.AddNextHopCountToReceivedBgpRoutes == nil {
		return nil
	}
	return t.AddNextHopCountToReceivedBgpRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_LinkBandwidth) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv4Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast struct {
	NextHopUnchanged *bool                                                                                               `path:"next-hop-unchanged" module:"srl_nokia-bgp"`
	PrefixLimit      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetNextHopUnchanged retrieves the value of the leaf NextHopUnchanged from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopUnchanged is set, it can
// safely use t.GetNextHopUnchanged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopUnchanged == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) GetNextHopUnchanged() bool {
	if t == nil || t.NextHopUnchanged == nil {
		return false
	}
	return *t.NextHopUnchanged
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHopUnchanged == nil {
		var v bool = false
		t.NextHopUnchanged = &v
	}
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast struct {
	LinkBandwidth *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth `path:"link-bandwidth" module:"srl_nokia-bgp"`
	PrefixLimit   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit   `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) GetOrCreateLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) GetLinkBandwidth() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LinkBandwidth.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/link-bandwidth YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth struct {
	AddNextHopCountToReceivedBgpRoutes SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union `path:"add-next-hop-count-to-received-bgp-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) IsYANGGoStruct() {
}

// GetAddNextHopCountToReceivedBgpRoutes retrieves the value of the leaf AddNextHopCountToReceivedBgpRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddNextHopCountToReceivedBgpRoutes is set, it can
// safely use t.GetAddNextHopCountToReceivedBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddNextHopCountToReceivedBgpRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) GetAddNextHopCountToReceivedBgpRoutes() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth_AddNextHopCountToReceivedBgpRoutes_Union {
	if t == nil || t.AddNextHopCountToReceivedBgpRoutes == nil {
		return nil
	}
	return t.AddNextHopCountToReceivedBgpRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_LinkBandwidth) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_Ipv6Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast struct {
	AdvertiseIpv6NextHops *bool                                                                                             `path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops   *bool                                                                                             `path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetAdvertiseIpv6NextHops retrieves the value of the leaf AdvertiseIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIpv6NextHops is set, it can
// safely use t.GetAdvertiseIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) GetAdvertiseIpv6NextHops() bool {
	if t == nil || t.AdvertiseIpv6NextHops == nil {
		return false
	}
	return *t.AdvertiseIpv6NextHops
}

// GetReceiveIpv6NextHops retrieves the value of the leaf ReceiveIpv6NextHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveIpv6NextHops is set, it can
// safely use t.GetReceiveIpv6NextHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveIpv6NextHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) GetReceiveIpv6NextHops() bool {
	if t == nil || t.ReceiveIpv6NextHops == nil {
		return false
	}
	return *t.ReceiveIpv6NextHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast struct {
	PrefixLimit *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) IsYANGGoStruct() {
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) GetOrCreatePrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrefixLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes   *uint32 `path:"max-received-routes" module:"srl_nokia-bgp"`
	PreventTeardown     *bool   `path:"prevent-teardown" module:"srl_nokia-bgp"`
	WarningThresholdPct *uint8  `path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) IsYANGGoStruct() {
}

// GetMaxReceivedRoutes retrieves the value of the leaf MaxReceivedRoutes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxReceivedRoutes is set, it can
// safely use t.GetMaxReceivedRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxReceivedRoutes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetMaxReceivedRoutes() uint32 {
	if t == nil || t.MaxReceivedRoutes == nil {
		return 4294967295
	}
	return *t.MaxReceivedRoutes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreventTeardown is set, it can
// safely use t.GetPreventTeardown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreventTeardown == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThresholdPct is set, it can
// safely use t.GetWarningThresholdPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThresholdPct == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 90
	}
	return *t.WarningThresholdPct
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxReceivedRoutes == nil {
		var v uint32 = 4294967295
		t.MaxReceivedRoutes = &v
	}
	if t.PreventTeardown == nil {
		var v bool = false
		t.PreventTeardown = &v
	}
	if t.WarningThresholdPct == nil {
		var v uint8 = 90
		t.WarningThresholdPct = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions struct {
	AllowOwnAs      *uint8                                                                                     `path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs `path:"remove-private-as" module:"srl_nokia-bgp" yangPresence:"true"`
	ReplacePeerAs   *bool                                                                                      `path:"replace-peer-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) IsYANGGoStruct() {}

// GetOrCreateRemovePrivateAs retrieves the value of the RemovePrivateAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetOrCreateRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs {
	if t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	t.RemovePrivateAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs{}
	return t.RemovePrivateAs
}

// GetRemovePrivateAs returns the value of the RemovePrivateAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions. If the receiver or the field RemovePrivateAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetRemovePrivateAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs {
	if t != nil && t.RemovePrivateAs != nil {
		return t.RemovePrivateAs
	}
	return nil
}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowOwnAs is set, it can
// safely use t.GetAllowOwnAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowOwnAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// GetReplacePeerAs retrieves the value of the leaf ReplacePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplacePeerAs is set, it can
// safely use t.GetReplacePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplacePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) GetReplacePeerAs() bool {
	if t == nil || t.ReplacePeerAs == nil {
		return false
	}
	return *t.ReplacePeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RemovePrivateAs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs *bool                                                                                            `path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly  *bool                                                                                            `path:"leading-only" module:"srl_nokia-bgp"`
	Mode         E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode `path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {
}

// GetIgnorePeerAs retrieves the value of the leaf IgnorePeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnorePeerAs is set, it can
// safely use t.GetIgnorePeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnorePeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) GetIgnorePeerAs() bool {
	if t == nil || t.IgnorePeerAs == nil {
		return false
	}
	return *t.IgnorePeerAs
}

// GetLeadingOnly retrieves the value of the leaf LeadingOnly from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeadingOnly is set, it can
// safely use t.GetLeadingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeadingOnly == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) GetLeadingOnly() bool {
	if t == nil || t.LeadingOnly == nil {
		return false
	}
	return *t.LeadingOnly
}

// GetMode retrieves the value of the leaf Mode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) GetMode() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnorePeerAs == nil {
		var v bool = false
		t.IgnorePeerAs = &v
	}
	if t.LeadingOnly == nil {
		var v bool = false
		t.LeadingOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication struct {
	Keychain *string `path:"keychain" module:"srl_nokia-bgp"`
	Password *string `path:"password" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) IsYANGGoStruct() {}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// GetPassword retrieves the value of the leaf Password from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection struct {
	EnableBfd    *bool `path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover *bool `path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) IsYANGGoStruct() {
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetFastFailover retrieves the value of the leaf FastFailover from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastFailover is set, it can
// safely use t.GetFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastFailover == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) GetFastFailover() bool {
	if t == nil || t.FastFailover == nil {
		return false
	}
	return *t.FastFailover
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart struct {
	AdminState           E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	RequestedRestartTime *uint16                     `path:"requested-restart-time" module:"srl_nokia-bgp"`
	StaleRoutesTime      *uint16                     `path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetRequestedRestartTime retrieves the value of the leaf RequestedRestartTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestedRestartTime is set, it can
// safely use t.GetRequestedRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestedRestartTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) GetRequestedRestartTime() uint16 {
	if t == nil || t.RequestedRestartTime == nil {
		return 300
	}
	return *t.RequestedRestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) GetStaleRoutesTime() uint16 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RequestedRestartTime == nil {
		var v uint16 = 300
		t.RequestedRestartTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs  *bool   `path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return false
	}
	return *t.PrependGlobalAs
}

// GetPrependLocalAs retrieves the value of the leaf PrependLocalAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependLocalAs is set, it can
// safely use t.GetPrependLocalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependLocalAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) GetPrependLocalAs() bool {
	if t == nil || t.PrependLocalAs == nil {
		return false
	}
	return *t.PrependLocalAs
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/multihop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop struct {
	AdminState  E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-bgp"`
	MaximumHops *uint8                      `path:"maximum-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetMaximumHops retrieves the value of the leaf MaximumHops from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumHops is set, it can
// safely use t.GetMaximumHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumHops == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) GetMaximumHops() uint8 {
	if t == nil || t.MaximumHops == nil {
		return 0
	}
	return *t.MaximumHops
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Multihop) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector struct {
	Client    *bool                                                                                      `path:"client" module:"srl_nokia-bgp"`
	ClusterId SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union `path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) IsYANGGoStruct() {}

// GetClient retrieves the value of the leaf Client from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Client is set, it can
// safely use t.GetClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Client == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) GetClient() bool {
	if t == nil || t.Client == nil {
		return false
	}
	return *t.Client
}

// GetClusterId retrieves the value of the leaf ClusterId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) GetClusterId() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector_ClusterId_Union {
	if t == nil || t.ClusterId == nil {
		return nil
	}
	return t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity struct {
	Large    *bool `path:"large" module:"srl_nokia-bgp"`
	Standard *bool `path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) IsYANGGoStruct() {}

// GetLarge retrieves the value of the leaf Large from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute struct {
	ExportPolicy *string `path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast  *bool   `path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast  *bool   `path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) IsYANGGoStruct() {
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4Unicast retrieves the value of the leaf Ipv4Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Unicast is set, it can
// safely use t.GetIpv4Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) GetIpv4Unicast() bool {
	if t == nil || t.Ipv4Unicast == nil {
		return false
	}
	return *t.Ipv4Unicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Unicast == nil {
		var v bool = false
		t.Ipv4Unicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = false
		t.Ipv6Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers struct {
	ConnectRetry                 *uint16 `path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime                     *uint16 `path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval            *uint16 `path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval *uint16 `path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
	PrefixLimitRestartTimer      *uint16 `path:"prefix-limit-restart-timer" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetConnectRetry() uint16 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetHoldTime() uint16 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveInterval is set, it can
// safely use t.GetKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetKeepaliveInterval() uint16 {
	if t == nil || t.KeepaliveInterval == nil {
		return 0
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAdvertisementInterval is set, it can
// safely use t.GetMinimumAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetMinimumAdvertisementInterval() uint16 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 5
	}
	return *t.MinimumAdvertisementInterval
}

// GetPrefixLimitRestartTimer retrieves the value of the leaf PrefixLimitRestartTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLimitRestartTimer is set, it can
// safely use t.GetPrefixLimitRestartTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLimitRestartTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) GetPrefixLimitRestartTimer() uint16 {
	if t == nil || t.PrefixLimitRestartTimer == nil {
		return 0
	}
	return *t.PrefixLimitRestartTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConnectRetry == nil {
		var v uint16 = 120
		t.ConnectRetry = &v
	}
	if t.HoldTime == nil {
		var v uint16 = 90
		t.HoldTime = &v
	}
	if t.MinimumAdvertisementInterval == nil {
		var v uint16 = 5
		t.MinimumAdvertisementInterval = &v
	}
	if t.PrefixLimitRestartTimer == nil {
		var v uint16 = 0
		t.PrefixLimitRestartTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct {
	Flag map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag `path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) NewFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// RenameFlag renames an entry in the list Flag within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) RenameFlag(
	oldK, newK E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) error {
	if _, ok := t.Flag[newK]; ok {
		return fmt.Errorf("key %v already exists in Flag", newK)
	}

	e, ok := t.Flag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flag", oldK)
	}
	e.Name = newK

	t.Flag[newK] = e
	delete(t.Flag, oldK)
	return nil
}

// GetOrCreateFlag retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) GetOrCreateFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag {
	key := Name

	if v, ok := t.Flag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlag got unexpected error: %v", err))
	}
	return v
}

// GetFlag retrieves the value with the specified key from
// the Flag map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) GetFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Flag[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlag deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) DeleteFlag(
	Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name,
) {
	key := Name

	delete(t.Flag, key)
}

// AppendFlag appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct to the
// list Flag of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) AppendFlag(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag,
) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag)
	}

	if _, ok := t.Flag[key]; ok {
		return fmt.Errorf("duplicate key for list Flag %v", key)
	}

	t.Flag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Flag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct {
	Modifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier `path:"modifier" module:"srl_nokia-bgp"`
	Name     E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name     `path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) IsYANGGoStruct() {
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier {
	if t == nil || t.Modifier == 0 {
		return 0
	}
	return t.Modifier
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) GetName() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport struct {
	LocalAddress *string `path:"local-address" module:"srl_nokia-bgp"`
	MtuDiscovery *bool   `path:"mtu-discovery" module:"srl_nokia-bgp"`
	PassiveMode  *bool   `path:"passive-mode" module:"srl_nokia-bgp"`
	TcpMss       *uint16 `path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PassiveMode is set, it can
// safely use t.GetPassiveMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PassiveMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetTcpMss retrieves the value of the leaf TcpMss from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PassiveMode == nil {
		var v bool = false
		t.PassiveMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct {
	AdminState        E_SrlNokiaCommon_AdminState                                                                                   `path:"admin-state" module:"srl_nokia-bgp"`
	AfiSafi           map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi `path:"afi-safi" module:"srl_nokia-bgp"`
	AsPathOptions     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions                                 `path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication                                `path:"authentication" module:"srl_nokia-bgp"`
	Description       *string                                                                                                       `path:"description" module:"srl_nokia-bgp"`
	ExportPolicy      *string                                                                                                       `path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection                              `path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart                               `path:"graceful-restart" module:"srl_nokia-bgp"`
	ImportPolicy      *string                                                                                                       `path:"import-policy" module:"srl_nokia-bgp"`
	LocalAs           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs                                       `path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference   *uint32                                                                                                       `path:"local-preference" module:"srl_nokia-bgp"`
	Multihop          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop                                      `path:"multihop" module:"srl_nokia-bgp"`
	NextHopSelf       *bool                                                                                                         `path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAddress       *string                                                                                                       `path:"peer-address" module:"srl_nokia-bgp"`
	PeerAs            *uint32                                                                                                       `path:"peer-as" module:"srl_nokia-bgp"`
	PeerGroup         *string                                                                                                       `path:"peer-group" module:"srl_nokia-bgp"`
	RouteReflector    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector                                `path:"route-reflector" module:"srl_nokia-bgp"`
	SendCommunity     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity                                 `path:"send-community" module:"srl_nokia-bgp"`
	SendCommunityType []E_SrlNokiaBgp_CommunityType                                                                                 `path:"send-community-type" module:"srl_nokia-bgp"`
	SendDefaultRoute  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute                              `path:"send-default-route" module:"srl_nokia-bgp"`
	Timers            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers                                        `path:"timers" module:"srl_nokia-bgp"`
	TraceOptions      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions                                  `path:"trace-options" module:"srl_nokia-bgp"`
	Transport         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport                                     `path:"transport" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) NewAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// RenameAfiSafi renames an entry in the list AfiSafi within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) RenameAfiSafi(oldK, newK E_SrlNokiaCommon_BgpAddressFamily) error {
	if _, ok := t.AfiSafi[newK]; ok {
		return fmt.Errorf("key %v already exists in AfiSafi", newK)
	}

	e, ok := t.AfiSafi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AfiSafi", oldK)
	}
	e.AfiSafiName = newK

	t.AfiSafi[newK] = e
	delete(t.AfiSafi, oldK)
	return nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi {
	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAfiSafi(
	AfiSafiName E_SrlNokiaCommon_BgpAddressFamily,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi {
	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) DeleteAfiSafi(AfiSafiName E_SrlNokiaCommon_BgpAddressFamily) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi struct to the
// list AfiSafi of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) AppendAfiSafi(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi,
) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaCommon_BgpAddressFamily]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication{}
	return t.Authentication
}

// GetOrCreateFailureDetection retrieves the value of the FailureDetection field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection {
	if t.FailureDetection != nil {
		return t.FailureDetection
	}
	t.FailureDetection = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection{}
	return t.FailureDetection
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateLocalAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMultihop retrieves the value of the Multihop field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop {
	if t.Multihop != nil {
		return t.Multihop
	}
	t.Multihop = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop{}
	return t.Multihop
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateSendCommunity retrieves the value of the SendCommunity field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity {
	if t.SendCommunity != nil {
		return t.SendCommunity
	}
	t.SendCommunity = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity{}
	return t.SendCommunity
}

// GetOrCreateSendDefaultRoute retrieves the value of the SendDefaultRoute field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute {
	if t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	t.SendDefaultRoute = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute{}
	return t.SendDefaultRoute
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport{}
	return t.Transport
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAsPathOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetFailureDetection returns the value of the FailureDetection struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field FailureDetection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetFailureDetection() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection {
	if t != nil && t.FailureDetection != nil {
		return t.FailureDetection
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetLocalAs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMultihop returns the value of the Multihop struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Multihop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetMultihop() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Multihop {
	if t != nil && t.Multihop != nil {
		return t.Multihop
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetRouteReflector() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetSendCommunity returns the value of the SendCommunity struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field SendCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetSendCommunity() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity {
	if t != nil && t.SendCommunity != nil {
		return t.SendCommunity
	}
	return nil
}

// GetSendDefaultRoute returns the value of the SendDefaultRoute struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field SendDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetSendDefaultRoute() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute {
	if t != nil && t.SendDefaultRoute != nil {
		return t.SendDefaultRoute
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPeerAddress retrieves the value of the leaf PeerAddress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAddress is set, it can
// safely use t.GetPeerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAddress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetPeerAddress() string {
	if t == nil || t.PeerAddress == nil {
		return ""
	}
	return *t.PeerAddress
}

// GetPeerAs retrieves the value of the leaf PeerAs from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerGroup is set, it can
// safely use t.GetPeerGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerGroup == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// GetSendCommunityType retrieves the value of the leaf SendCommunityType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendCommunityType is set, it can
// safely use t.GetSendCommunityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendCommunityType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) GetSendCommunityType() []E_SrlNokiaBgp_CommunityType {
	if t == nil || t.SendCommunityType == nil {
		return nil
	}
	return t.SendCommunityType
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	t.AsPathOptions.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.FailureDetection.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Multihop.PopulateDefaults()
	t.RouteReflector.PopulateDefaults()
	t.SendCommunity.PopulateDefaults()
	t.SendDefaultRoute.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.Transport.PopulateDefaults()
	for _, e := range t.AfiSafi {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerAddress == nil {
		return nil, fmt.Errorf("nil value for key PeerAddress")
	}

	return map[string]interface{}{
		"peer-address": *t.PeerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛBelongingModule() string {
	return "srl_nokia-bgp"
}
