/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan represents the /srl_nokia-acl/acl/cpm-filter/mac-filter/entry/match/vlan YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan struct {
	OutermostVlanId *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId `path:"outermost-vlan-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) IsYANGGoStruct() {}

// GetOrCreateOutermostVlanId retrieves the value of the OutermostVlanId field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) GetOrCreateOutermostVlanId() *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId {
	if t.OutermostVlanId != nil {
		return t.OutermostVlanId
	}
	t.OutermostVlanId = &SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId{}
	return t.OutermostVlanId
}

// GetOutermostVlanId returns the value of the OutermostVlanId struct pointer
// from SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan. If the receiver or the field OutermostVlanId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) GetOutermostVlanId() *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId {
	if t != nil && t.OutermostVlanId != nil {
		return t.OutermostVlanId
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OutermostVlanId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan.
func (*SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId represents the /srl_nokia-acl/acl/cpm-filter/mac-filter/entry/match/vlan/outermost-vlan-id YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId struct {
	None     YANGEmpty                                                                   `path:"none" module:"srl_nokia-acl"`
	Operator E_SrlNokiaPacketMatchTypes_Operator                                         `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range `path:"range" module:"srl_nokia-acl"`
	Value    *uint16                                                                     `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetOrCreateRange() *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetRange() *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetNone retrieves the value of the leaf None from the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetValue() uint16 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId.
func (*SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range represents the /srl_nokia-acl/acl/cpm-filter/mac-filter/entry/match/vlan/outermost-vlan-id/range YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range struct {
	End   *uint16 `path:"end" module:"srl_nokia-acl"`
	Start *uint16 `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range.
func (*SrlNokiaAcl_Acl_CpmFilter_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter represents the /srl_nokia-acl/acl/ipv4-filter YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter struct {
	Description          *string                                           `path:"description" module:"srl_nokia-acl"`
	Entry                map[uint32]*SrlNokiaAcl_Acl_Ipv4Filter_Entry      `path:"entry" module:"srl_nokia-acl"`
	Name                 *string                                           `path:"name" module:"srl_nokia-acl"`
	StatisticsPerEntry   *bool                                             `path:"statistics-per-entry" module:"srl_nokia-acl"`
	SubinterfaceSpecific E_SrlNokiaAcl_Acl_Ipv4Filter_SubinterfaceSpecific `path:"subinterface-specific" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaAcl_Acl_Ipv4Filter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) NewEntry(SequenceId uint32) (*SrlNokiaAcl_Acl_Ipv4Filter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_Ipv4Filter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaAcl_Acl_Ipv4Filter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaAcl_Acl_Ipv4Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Ipv4Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) GetOrCreateEntry(SequenceId uint32) *SrlNokiaAcl_Acl_Ipv4Filter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaAcl_Acl_Ipv4Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) GetEntry(SequenceId uint32) *SrlNokiaAcl_Acl_Ipv4Filter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Ipv4Filter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaAcl_Acl_Ipv4Filter_Entry struct to the
// list Entry of SrlNokiaAcl_Acl_Ipv4Filter. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_Ipv4Filter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) AppendEntry(v *SrlNokiaAcl_Acl_Ipv4Filter_Entry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_Ipv4Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_Ipv4Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the SrlNokiaAcl_Acl_Ipv4Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatisticsPerEntry retrieves the value of the leaf StatisticsPerEntry from the SrlNokiaAcl_Acl_Ipv4Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatisticsPerEntry is set, it can
// safely use t.GetStatisticsPerEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatisticsPerEntry == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) GetStatisticsPerEntry() bool {
	if t == nil || t.StatisticsPerEntry == nil {
		return false
	}
	return *t.StatisticsPerEntry
}

// GetSubinterfaceSpecific retrieves the value of the leaf SubinterfaceSpecific from the SrlNokiaAcl_Acl_Ipv4Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubinterfaceSpecific is set, it can
// safely use t.GetSubinterfaceSpecific() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubinterfaceSpecific == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) GetSubinterfaceSpecific() E_SrlNokiaAcl_Acl_Ipv4Filter_SubinterfaceSpecific {
	if t == nil || t.SubinterfaceSpecific == 0 {
		return SrlNokiaAcl_Acl_Ipv4Filter_SubinterfaceSpecific_disabled
	}
	return t.SubinterfaceSpecific
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SubinterfaceSpecific == 0 {
		t.SubinterfaceSpecific = SrlNokiaAcl_Acl_Ipv4Filter_SubinterfaceSpecific_disabled
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_Ipv4Filter struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter.
func (*SrlNokiaAcl_Acl_Ipv4Filter) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry represents the /srl_nokia-acl/acl/ipv4-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry struct {
	Action      *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action `path:"action" module:"srl_nokia-acl"`
	Description *string                                  `path:"description" module:"srl_nokia-acl"`
	Match       *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match  `path:"match" module:"srl_nokia-acl"`
	SequenceId  *uint32                                  `path:"sequence-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) GetOrCreateAction() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) GetOrCreateMatch() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) GetAction() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) GetMatch() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_Ipv4Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaAcl_Acl_Ipv4Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_Ipv4Filter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action represents the /srl_nokia-acl/acl/ipv4-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action struct {
	Accept       *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept `path:"accept" module:"srl_nokia-acl" yangPresence:"true"`
	CollectStats *bool                                           `path:"collect-stats" module:"srl_nokia-acl"`
	Drop         *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop   `path:"drop" module:"srl_nokia-acl" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAccept retrieves the value of the Accept field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) GetOrCreateAccept() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept {
	if t.Accept != nil {
		return t.Accept
	}
	t.Accept = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept{}
	return t.Accept
}

// GetOrCreateDrop retrieves the value of the Drop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) GetOrCreateDrop() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop {
	if t.Drop != nil {
		return t.Drop
	}
	t.Drop = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop{}
	return t.Drop
}

// GetAccept returns the value of the Accept struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action. If the receiver or the field Accept is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) GetAccept() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept {
	if t != nil && t.Accept != nil {
		return t.Accept
	}
	return nil
}

// GetDrop returns the value of the Drop struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action. If the receiver or the field Drop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) GetDrop() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop {
	if t != nil && t.Drop != nil {
		return t.Drop
	}
	return nil
}

// GetCollectStats retrieves the value of the leaf CollectStats from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Accept.PopulateDefaults()
	t.Drop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept struct {
	Forward         *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward              `path:"forward" module:"srl_nokia-acl" yangPresence:"true"`
	ForwardingClass SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-acl"`
	Log             *bool                                                                `path:"log" module:"srl_nokia-acl"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                     `path:"profile" module:"srl_nokia-acl"`
	RateLimit       *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit            `path:"rate-limit" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetOrCreateForward() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward{}
	return t.Forward
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetOrCreateRateLimit() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit{}
	return t.RateLimit
}

// GetForward returns the value of the Forward struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetForward() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetRateLimit() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetForwardingClass() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	t.Forward.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/accept/forward YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward struct {
	NextHop *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop `path:"next-hop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) IsYANGGoStruct() {}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) GetOrCreateNextHop() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop{}
	return t.NextHop
}

// GetNextHop returns the value of the NextHop struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) GetNextHop() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/accept/forward/next-hop YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop struct {
	Address  *string `path:"address" module:"srl_nokia-acl"`
	Indirect *bool   `path:"indirect" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_Forward_NextHop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/accept/rate-limit YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit struct {
	Policer *string `path:"policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) IsYANGGoStruct() {}

// GetPolicer retrieves the value of the leaf Policer from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept_RateLimit) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop struct {
	Log *bool `path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) IsYANGGoStruct() {}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match represents the /srl_nokia-acl/acl/ipv4-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match struct {
	DestinationIp   *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp   `path:"destination-ip" module:"srl_nokia-acl"`
	DestinationPort *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort `path:"destination-port" module:"srl_nokia-acl"`
	DscpSet         []SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union  `path:"dscp-set" module:"srl_nokia-acl"`
	FirstFragment   *bool                                                   `path:"first-fragment" module:"srl_nokia-acl"`
	Fragment        *bool                                                   `path:"fragment" module:"srl_nokia-acl"`
	Icmp            *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp            `path:"icmp" module:"srl_nokia-acl"`
	Protocol        SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union   `path:"protocol" module:"srl_nokia-acl"`
	SourceIp        *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp        `path:"source-ip" module:"srl_nokia-acl"`
	SourcePort      *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort      `path:"source-port" module:"srl_nokia-acl"`
	TcpFlags        *string                                                 `path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetOrCreateDestinationIp() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateDestinationPort retrieves the value of the DestinationPort field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetOrCreateDestinationPort() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort {
	if t.DestinationPort != nil {
		return t.DestinationPort
	}
	t.DestinationPort = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort{}
	return t.DestinationPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetOrCreateIcmp() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetOrCreateSourceIp() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp{}
	return t.SourceIp
}

// GetOrCreateSourcePort retrieves the value of the SourcePort field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetOrCreateSourcePort() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort {
	if t.SourcePort != nil {
		return t.SourcePort
	}
	t.SourcePort = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort{}
	return t.SourcePort
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetDestinationIp() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetDestinationPort returns the value of the DestinationPort struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match. If the receiver or the field DestinationPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetDestinationPort() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort {
	if t != nil && t.DestinationPort != nil {
		return t.DestinationPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetIcmp() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetSourceIp() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetSourcePort returns the value of the SourcePort struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match. If the receiver or the field SourcePort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetSourcePort() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort {
	if t != nil && t.SourcePort != nil {
		return t.SourcePort
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetDscpSet() []SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetFirstFragment retrieves the value of the leaf FirstFragment from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstFragment is set, it can
// safely use t.GetFirstFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstFragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetFirstFragment() bool {
	if t == nil || t.FirstFragment == nil {
		return false
	}
	return *t.FirstFragment
}

// GetFragment retrieves the value of the leaf Fragment from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetFragment() bool {
	if t == nil || t.Fragment == nil {
		return false
	}
	return *t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetProtocol() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) GetTcpFlags() string {
	if t == nil || t.TcpFlags == nil {
		return ""
	}
	return *t.TcpFlags
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.DestinationPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
	t.SourcePort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-ip YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range      `path:"range" module:"srl_nokia-acl"`
	Value    SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) GetOrCreateRange() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) GetRange() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) GetValue() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range struct {
	End   SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union   `path:"end" module:"srl_nokia-acl"`
	Start SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) GetEnd() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) GetStart() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/icmp YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp struct {
	Code []uint8                                                `path:"code" module:"srl_nokia-acl"`
	Type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union `path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) GetType() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/source-ip YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                           `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range      `path:"range" module:"srl_nokia-acl"`
	Value    SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) GetOrCreateRange() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) GetRange() *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) GetValue() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range struct {
	End   SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union   `path:"end" module:"srl_nokia-acl"`
	Start SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) GetEnd() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) GetStart() SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter represents the /srl_nokia-acl/acl/ipv6-filter YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter struct {
	Description          *string                                           `path:"description" module:"srl_nokia-acl"`
	Entry                map[uint32]*SrlNokiaAcl_Acl_Ipv6Filter_Entry      `path:"entry" module:"srl_nokia-acl"`
	Name                 *string                                           `path:"name" module:"srl_nokia-acl"`
	StatisticsPerEntry   *bool                                             `path:"statistics-per-entry" module:"srl_nokia-acl"`
	SubinterfaceSpecific E_SrlNokiaAcl_Acl_Ipv6Filter_SubinterfaceSpecific `path:"subinterface-specific" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaAcl_Acl_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) NewEntry(SequenceId uint32) (*SrlNokiaAcl_Acl_Ipv6Filter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_Ipv6Filter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaAcl_Acl_Ipv6Filter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaAcl_Acl_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) GetOrCreateEntry(SequenceId uint32) *SrlNokiaAcl_Acl_Ipv6Filter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaAcl_Acl_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) GetEntry(SequenceId uint32) *SrlNokiaAcl_Acl_Ipv6Filter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaAcl_Acl_Ipv6Filter_Entry struct to the
// list Entry of SrlNokiaAcl_Acl_Ipv6Filter. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) AppendEntry(v *SrlNokiaAcl_Acl_Ipv6Filter_Entry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the SrlNokiaAcl_Acl_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatisticsPerEntry retrieves the value of the leaf StatisticsPerEntry from the SrlNokiaAcl_Acl_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatisticsPerEntry is set, it can
// safely use t.GetStatisticsPerEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatisticsPerEntry == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) GetStatisticsPerEntry() bool {
	if t == nil || t.StatisticsPerEntry == nil {
		return false
	}
	return *t.StatisticsPerEntry
}

// GetSubinterfaceSpecific retrieves the value of the leaf SubinterfaceSpecific from the SrlNokiaAcl_Acl_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubinterfaceSpecific is set, it can
// safely use t.GetSubinterfaceSpecific() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubinterfaceSpecific == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) GetSubinterfaceSpecific() E_SrlNokiaAcl_Acl_Ipv6Filter_SubinterfaceSpecific {
	if t == nil || t.SubinterfaceSpecific == 0 {
		return SrlNokiaAcl_Acl_Ipv6Filter_SubinterfaceSpecific_disabled
	}
	return t.SubinterfaceSpecific
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SubinterfaceSpecific == 0 {
		t.SubinterfaceSpecific = SrlNokiaAcl_Acl_Ipv6Filter_SubinterfaceSpecific_disabled
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_Ipv6Filter struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter.
func (*SrlNokiaAcl_Acl_Ipv6Filter) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry represents the /srl_nokia-acl/acl/ipv6-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry struct {
	Action      *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action `path:"action" module:"srl_nokia-acl"`
	Description *string                                  `path:"description" module:"srl_nokia-acl"`
	Match       *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match  `path:"match" module:"srl_nokia-acl"`
	SequenceId  *uint32                                  `path:"sequence-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) GetOrCreateAction() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) GetOrCreateMatch() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) GetAction() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) GetMatch() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaAcl_Acl_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action represents the /srl_nokia-acl/acl/ipv6-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action struct {
	Accept       *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept `path:"accept" module:"srl_nokia-acl" yangPresence:"true"`
	CollectStats *bool                                           `path:"collect-stats" module:"srl_nokia-acl"`
	Drop         *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop   `path:"drop" module:"srl_nokia-acl" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAccept retrieves the value of the Accept field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) GetOrCreateAccept() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept {
	if t.Accept != nil {
		return t.Accept
	}
	t.Accept = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept{}
	return t.Accept
}

// GetOrCreateDrop retrieves the value of the Drop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) GetOrCreateDrop() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop {
	if t.Drop != nil {
		return t.Drop
	}
	t.Drop = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop{}
	return t.Drop
}

// GetAccept returns the value of the Accept struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action. If the receiver or the field Accept is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) GetAccept() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept {
	if t != nil && t.Accept != nil {
		return t.Accept
	}
	return nil
}

// GetDrop returns the value of the Drop struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action. If the receiver or the field Drop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) GetDrop() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop {
	if t != nil && t.Drop != nil {
		return t.Drop
	}
	return nil
}

// GetCollectStats retrieves the value of the leaf CollectStats from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Accept.PopulateDefaults()
	t.Drop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept struct {
	Forward         *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward              `path:"forward" module:"srl_nokia-acl" yangPresence:"true"`
	ForwardingClass SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-acl"`
	Log             *bool                                                                `path:"log" module:"srl_nokia-acl"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                     `path:"profile" module:"srl_nokia-acl"`
	RateLimit       *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit            `path:"rate-limit" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetOrCreateForward() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward{}
	return t.Forward
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetOrCreateRateLimit() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit{}
	return t.RateLimit
}

// GetForward returns the value of the Forward struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetForward() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetRateLimit() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetForwardingClass() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	t.Forward.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/accept/forward YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward struct {
	NextHop *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop `path:"next-hop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) IsYANGGoStruct() {}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) GetOrCreateNextHop() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop{}
	return t.NextHop
}

// GetNextHop returns the value of the NextHop struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) GetNextHop() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/accept/forward/next-hop YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop struct {
	Address  *string `path:"address" module:"srl_nokia-acl"`
	Indirect *bool   `path:"indirect" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_Forward_NextHop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/accept/rate-limit YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit struct {
	Policer *string `path:"policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) IsYANGGoStruct() {}

// GetPolicer retrieves the value of the leaf Policer from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept_RateLimit) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop struct {
	Log *bool `path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) IsYANGGoStruct() {}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match represents the /srl_nokia-acl/acl/ipv6-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match struct {
	DestinationIp   *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp   `path:"destination-ip" module:"srl_nokia-acl"`
	DestinationPort *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort `path:"destination-port" module:"srl_nokia-acl"`
	DscpSet         []SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union  `path:"dscp-set" module:"srl_nokia-acl"`
	Icmp6           *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6           `path:"icmp6" module:"srl_nokia-acl"`
	NextHeader      SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"srl_nokia-acl"`
	SourceIp        *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp        `path:"source-ip" module:"srl_nokia-acl"`
	SourcePort      *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort      `path:"source-port" module:"srl_nokia-acl"`
	TcpFlags        *string                                                 `path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetOrCreateDestinationIp() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateDestinationPort retrieves the value of the DestinationPort field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetOrCreateDestinationPort() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort {
	if t.DestinationPort != nil {
		return t.DestinationPort
	}
	t.DestinationPort = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort{}
	return t.DestinationPort
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetOrCreateIcmp6() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6{}
	return t.Icmp6
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetOrCreateSourceIp() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp{}
	return t.SourceIp
}

// GetOrCreateSourcePort retrieves the value of the SourcePort field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetOrCreateSourcePort() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort {
	if t.SourcePort != nil {
		return t.SourcePort
	}
	t.SourcePort = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort{}
	return t.SourcePort
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetDestinationIp() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetDestinationPort returns the value of the DestinationPort struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match. If the receiver or the field DestinationPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetDestinationPort() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort {
	if t != nil && t.DestinationPort != nil {
		return t.DestinationPort
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetIcmp6() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetSourceIp() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetSourcePort returns the value of the SourcePort struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match. If the receiver or the field SourcePort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetSourcePort() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort {
	if t != nil && t.SourcePort != nil {
		return t.SourcePort
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetDscpSet() []SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetNextHeader retrieves the value of the leaf NextHeader from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetNextHeader() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) GetTcpFlags() string {
	if t == nil || t.TcpFlags == nil {
		return ""
	}
	return *t.TcpFlags
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.DestinationPort.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
	t.SourcePort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-ip YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range      `path:"range" module:"srl_nokia-acl"`
	Value    SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) GetOrCreateRange() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) GetRange() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) GetValue() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range struct {
	End   SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union   `path:"end" module:"srl_nokia-acl"`
	Start SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) GetEnd() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) GetStart() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/icmp6 YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 struct {
	Code []uint8                                                 `path:"code" module:"srl_nokia-acl"`
	Type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union `path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) GetType() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/source-ip YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                           `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range      `path:"range" module:"srl_nokia-acl"`
	Value    SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) GetOrCreateRange() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) GetRange() *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) GetValue() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range struct {
	End   SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union   `path:"end" module:"srl_nokia-acl"`
	Start SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) GetEnd() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) GetStart() SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter represents the /srl_nokia-acl/acl/mac-filter YANG schema element.
type SrlNokiaAcl_Acl_MacFilter struct {
	Description          *string                                          `path:"description" module:"srl_nokia-acl"`
	Entry                map[uint32]*SrlNokiaAcl_Acl_MacFilter_Entry      `path:"entry" module:"srl_nokia-acl"`
	Name                 *string                                          `path:"name" module:"srl_nokia-acl"`
	StatisticsPerEntry   *bool                                            `path:"statistics-per-entry" module:"srl_nokia-acl"`
	SubinterfaceSpecific E_SrlNokiaAcl_Acl_MacFilter_SubinterfaceSpecific `path:"subinterface-specific" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaAcl_Acl_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_MacFilter) NewEntry(SequenceId uint32) (*SrlNokiaAcl_Acl_MacFilter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_MacFilter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaAcl_Acl_MacFilter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaAcl_Acl_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_MacFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_MacFilter) GetOrCreateEntry(SequenceId uint32) *SrlNokiaAcl_Acl_MacFilter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaAcl_Acl_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter) GetEntry(SequenceId uint32) *SrlNokiaAcl_Acl_MacFilter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_MacFilter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_MacFilter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaAcl_Acl_MacFilter_Entry struct to the
// list Entry of SrlNokiaAcl_Acl_MacFilter. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_MacFilter) AppendEntry(v *SrlNokiaAcl_Acl_MacFilter_Entry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the SrlNokiaAcl_Acl_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatisticsPerEntry retrieves the value of the leaf StatisticsPerEntry from the SrlNokiaAcl_Acl_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatisticsPerEntry is set, it can
// safely use t.GetStatisticsPerEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatisticsPerEntry == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter) GetStatisticsPerEntry() bool {
	if t == nil || t.StatisticsPerEntry == nil {
		return false
	}
	return *t.StatisticsPerEntry
}

// GetSubinterfaceSpecific retrieves the value of the leaf SubinterfaceSpecific from the SrlNokiaAcl_Acl_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubinterfaceSpecific is set, it can
// safely use t.GetSubinterfaceSpecific() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubinterfaceSpecific == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter) GetSubinterfaceSpecific() E_SrlNokiaAcl_Acl_MacFilter_SubinterfaceSpecific {
	if t == nil || t.SubinterfaceSpecific == 0 {
		return SrlNokiaAcl_Acl_MacFilter_SubinterfaceSpecific_disabled
	}
	return t.SubinterfaceSpecific
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SubinterfaceSpecific == 0 {
		t.SubinterfaceSpecific = SrlNokiaAcl_Acl_MacFilter_SubinterfaceSpecific_disabled
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_MacFilter struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_MacFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter.
func (*SrlNokiaAcl_Acl_MacFilter) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry represents the /srl_nokia-acl/acl/mac-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry struct {
	Action      *SrlNokiaAcl_Acl_MacFilter_Entry_Action `path:"action" module:"srl_nokia-acl"`
	Description *string                                 `path:"description" module:"srl_nokia-acl"`
	Match       *SrlNokiaAcl_Acl_MacFilter_Entry_Match  `path:"match" module:"srl_nokia-acl"`
	SequenceId  *uint32                                 `path:"sequence-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) GetOrCreateAction() *SrlNokiaAcl_Acl_MacFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaAcl_Acl_MacFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) GetOrCreateMatch() *SrlNokiaAcl_Acl_MacFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaAcl_Acl_MacFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) GetAction() *SrlNokiaAcl_Acl_MacFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) GetMatch() *SrlNokiaAcl_Acl_MacFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaAcl_Acl_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_MacFilter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry.
func (*SrlNokiaAcl_Acl_MacFilter_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action represents the /srl_nokia-acl/acl/mac-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Action struct {
	Accept       *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept `path:"accept" module:"srl_nokia-acl" yangPresence:"true"`
	CollectStats *bool                                          `path:"collect-stats" module:"srl_nokia-acl"`
	Drop         *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop   `path:"drop" module:"srl_nokia-acl" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAccept retrieves the value of the Accept field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) GetOrCreateAccept() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept {
	if t.Accept != nil {
		return t.Accept
	}
	t.Accept = &SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept{}
	return t.Accept
}

// GetOrCreateDrop retrieves the value of the Drop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) GetOrCreateDrop() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop {
	if t.Drop != nil {
		return t.Drop
	}
	t.Drop = &SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop{}
	return t.Drop
}

// GetAccept returns the value of the Accept struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Action. If the receiver or the field Accept is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) GetAccept() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept {
	if t != nil && t.Accept != nil {
		return t.Accept
	}
	return nil
}

// GetDrop returns the value of the Drop struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Action. If the receiver or the field Drop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) GetDrop() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop {
	if t != nil && t.Drop != nil {
		return t.Drop
	}
	return nil
}

// GetCollectStats retrieves the value of the leaf CollectStats from the SrlNokiaAcl_Acl_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Accept.PopulateDefaults()
	t.Drop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Action.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept represents the /srl_nokia-acl/acl/mac-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept struct {
	Forward         *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward              `path:"forward" module:"srl_nokia-acl" yangPresence:"true"`
	ForwardingClass SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union `path:"forwarding-class" module:"srl_nokia-acl"`
	Log             *bool                                                               `path:"log" module:"srl_nokia-acl"`
	Profile         E_SrlNokiaCommon_ClassifyProfile                                    `path:"profile" module:"srl_nokia-acl"`
	RateLimit       *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit            `path:"rate-limit" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) IsYANGGoStruct() {}

// GetOrCreateForward retrieves the value of the Forward field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetOrCreateForward() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward {
	if t.Forward != nil {
		return t.Forward
	}
	t.Forward = &SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward{}
	return t.Forward
}

// GetOrCreateRateLimit retrieves the value of the RateLimit field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetOrCreateRateLimit() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit {
	if t.RateLimit != nil {
		return t.RateLimit
	}
	t.RateLimit = &SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit{}
	return t.RateLimit
}

// GetForward returns the value of the Forward struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept. If the receiver or the field Forward is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetForward() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward {
	if t != nil && t.Forward != nil {
		return t.Forward
	}
	return nil
}

// GetRateLimit returns the value of the RateLimit struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept. If the receiver or the field RateLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetRateLimit() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit {
	if t != nil && t.RateLimit != nil {
		return t.RateLimit
	}
	return nil
}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetForwardingClass() SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_ForwardingClass_Union {
	if t == nil || t.ForwardingClass == nil {
		return nil
	}
	return t.ForwardingClass
}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetProfile retrieves the value of the leaf Profile from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) GetProfile() E_SrlNokiaCommon_ClassifyProfile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	t.Forward.PopulateDefaults()
	t.RateLimit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward represents the /srl_nokia-acl/acl/mac-filter/entry/action/accept/forward YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward struct {
	NextHop *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop `path:"next-hop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) IsYANGGoStruct() {}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) GetOrCreateNextHop() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop{}
	return t.NextHop
}

// GetNextHop returns the value of the NextHop struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) GetNextHop() *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop represents the /srl_nokia-acl/acl/mac-filter/entry/action/accept/forward/next-hop YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop struct {
	Address  *string `path:"address" module:"srl_nokia-acl"`
	Indirect *bool   `path:"indirect" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndirect retrieves the value of the leaf Indirect from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) GetIndirect() bool {
	if t == nil || t.Indirect == nil {
		return false
	}
	return *t.Indirect
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Indirect == nil {
		var v bool = false
		t.Indirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_Forward_NextHop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit represents the /srl_nokia-acl/acl/mac-filter/entry/action/accept/rate-limit YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit struct {
	Policer *string `path:"policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) IsYANGGoStruct() {}

// GetPolicer retrieves the value of the leaf Policer from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) GetPolicer() string {
	if t == nil || t.Policer == nil {
		return ""
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Accept_RateLimit) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop represents the /srl_nokia-acl/acl/mac-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop struct {
	Log *bool `path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) IsYANGGoStruct() {}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Action_Drop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match represents the /srl_nokia-acl/acl/mac-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Match struct {
	DestinationMac *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac `path:"destination-mac" module:"srl_nokia-acl"`
	Ethertype      SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union `path:"ethertype" module:"srl_nokia-acl"`
	SourceMac      *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac      `path:"source-mac" module:"srl_nokia-acl"`
	Vlan           *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan           `path:"vlan" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDestinationMac retrieves the value of the DestinationMac field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetOrCreateDestinationMac() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac {
	if t.DestinationMac != nil {
		return t.DestinationMac
	}
	t.DestinationMac = &SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac{}
	return t.DestinationMac
}

// GetOrCreateSourceMac retrieves the value of the SourceMac field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetOrCreateSourceMac() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac {
	if t.SourceMac != nil {
		return t.SourceMac
	}
	t.SourceMac = &SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac{}
	return t.SourceMac
}

// GetOrCreateVlan retrieves the value of the Vlan field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetOrCreateVlan() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan {
	if t.Vlan != nil {
		return t.Vlan
	}
	t.Vlan = &SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan{}
	return t.Vlan
}

// GetDestinationMac returns the value of the DestinationMac struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Match. If the receiver or the field DestinationMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetDestinationMac() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac {
	if t != nil && t.DestinationMac != nil {
		return t.DestinationMac
	}
	return nil
}

// GetSourceMac returns the value of the SourceMac struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Match. If the receiver or the field SourceMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetSourceMac() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac {
	if t != nil && t.SourceMac != nil {
		return t.SourceMac
	}
	return nil
}

// GetVlan returns the value of the Vlan struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Match. If the receiver or the field Vlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetVlan() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan {
	if t != nil && t.Vlan != nil {
		return t.Vlan
	}
	return nil
}

// GetEthertype retrieves the value of the leaf Ethertype from the SrlNokiaAcl_Acl_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) GetEthertype() SrlNokiaAcl_Acl_MacFilter_Entry_Match_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationMac.PopulateDefaults()
	t.SourceMac.PopulateDefaults()
	t.Vlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Match.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac represents the /srl_nokia-acl/acl/mac-filter/entry/match/destination-mac YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_DestinationMac) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac represents the /srl_nokia-acl/acl/mac-filter/entry/match/source-mac YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_SourceMac) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan represents the /srl_nokia-acl/acl/mac-filter/entry/match/vlan YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan struct {
	OutermostVlanId *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId `path:"outermost-vlan-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) IsYANGGoStruct() {}

// GetOrCreateOutermostVlanId retrieves the value of the OutermostVlanId field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) GetOrCreateOutermostVlanId() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId {
	if t.OutermostVlanId != nil {
		return t.OutermostVlanId
	}
	t.OutermostVlanId = &SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId{}
	return t.OutermostVlanId
}

// GetOutermostVlanId returns the value of the OutermostVlanId struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan. If the receiver or the field OutermostVlanId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) GetOutermostVlanId() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId {
	if t != nil && t.OutermostVlanId != nil {
		return t.OutermostVlanId
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OutermostVlanId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId represents the /srl_nokia-acl/acl/mac-filter/entry/match/vlan/outermost-vlan-id YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId struct {
	None     YANGEmpty                                                         `path:"none" module:"srl_nokia-acl"`
	Operator E_SrlNokiaPacketMatchTypes_Operator                               `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range `path:"range" module:"srl_nokia-acl"`
	Value    *uint16                                                           `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetOrCreateRange() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetRange() *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetNone retrieves the value of the leaf None from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) GetValue() uint16 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range represents the /srl_nokia-acl/acl/mac-filter/entry/match/vlan/outermost-vlan-id/range YANG schema element.
type SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range struct {
	End   *uint16 `path:"end" module:"srl_nokia-acl"`
	Start *uint16 `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range.
func (*SrlNokiaAcl_Acl_MacFilter_Entry_Match_Vlan_OutermostVlanId_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Policers represents the /srl_nokia-acl/acl/policers YANG schema element.
type SrlNokiaAcl_Acl_Policers struct {
	Policer          map[string]*SrlNokiaAcl_Acl_Policers_Policer          `path:"policer" module:"srl_nokia-acl"`
	SystemCpuPolicer map[string]*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer `path:"system-cpu-policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// SrlNokiaAcl_Acl_Policers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_Policers) NewPolicer(Name string) (*SrlNokiaAcl_Acl_Policers_Policer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[string]*SrlNokiaAcl_Acl_Policers_Policer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &SrlNokiaAcl_Acl_Policers_Policer{
		Name: &Name,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the SrlNokiaAcl_Acl_Policers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_Policers) RenamePolicer(oldK, newK string) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.Name = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Policers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_Policers) GetOrCreatePolicer(Name string) *SrlNokiaAcl_Acl_Policers_Policer {
	key := Name

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of SrlNokiaAcl_Acl_Policers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_Policers) GetPolicer(Name string) *SrlNokiaAcl_Acl_Policers_Policer {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Policers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_Policers) DeletePolicer(Name string) {
	key := Name

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied SrlNokiaAcl_Acl_Policers_Policer struct to the
// list Policer of SrlNokiaAcl_Acl_Policers. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_Policers_Policer already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_Policers) AppendPolicer(v *SrlNokiaAcl_Acl_Policers_Policer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[string]*SrlNokiaAcl_Acl_Policers_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewSystemCpuPolicer creates a new entry in the SystemCpuPolicer list of the
// SrlNokiaAcl_Acl_Policers struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_Policers) NewSystemCpuPolicer(Name string) (*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SystemCpuPolicer == nil {
		t.SystemCpuPolicer = make(map[string]*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SystemCpuPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SystemCpuPolicer", key)
	}

	t.SystemCpuPolicer[key] = &SrlNokiaAcl_Acl_Policers_SystemCpuPolicer{
		Name: &Name,
	}

	return t.SystemCpuPolicer[key], nil
}

// RenameSystemCpuPolicer renames an entry in the list SystemCpuPolicer within
// the SrlNokiaAcl_Acl_Policers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_Policers) RenameSystemCpuPolicer(oldK, newK string) error {
	if _, ok := t.SystemCpuPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in SystemCpuPolicer", newK)
	}

	e, ok := t.SystemCpuPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SystemCpuPolicer", oldK)
	}
	e.Name = &newK

	t.SystemCpuPolicer[newK] = e
	delete(t.SystemCpuPolicer, oldK)
	return nil
}

// GetOrCreateSystemCpuPolicer retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Policers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_Policers) GetOrCreateSystemCpuPolicer(Name string) *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer {
	key := Name

	if v, ok := t.SystemCpuPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSystemCpuPolicer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSystemCpuPolicer got unexpected error: %v", err))
	}
	return v
}

// GetSystemCpuPolicer retrieves the value with the specified key from
// the SystemCpuPolicer map field of SrlNokiaAcl_Acl_Policers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_Policers) GetSystemCpuPolicer(Name string) *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SystemCpuPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteSystemCpuPolicer deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_Policers. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_Policers) DeleteSystemCpuPolicer(Name string) {
	key := Name

	delete(t.SystemCpuPolicer, key)
}

// AppendSystemCpuPolicer appends the supplied SrlNokiaAcl_Acl_Policers_SystemCpuPolicer struct to the
// list SystemCpuPolicer of SrlNokiaAcl_Acl_Policers. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_Policers_SystemCpuPolicer already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_Policers) AppendSystemCpuPolicer(v *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SystemCpuPolicer == nil {
		t.SystemCpuPolicer = make(map[string]*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer)
	}

	if _, ok := t.SystemCpuPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list SystemCpuPolicer %v", key)
	}

	t.SystemCpuPolicer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Policers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Policers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.SystemCpuPolicer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Policers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Policers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Policers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Policers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Policers.
func (*SrlNokiaAcl_Acl_Policers) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Policers_Policer represents the /srl_nokia-acl/acl/policers/policer YANG schema element.
type SrlNokiaAcl_Acl_Policers_Policer struct {
	EntrySpecific *bool                                    `path:"entry-specific" module:"srl_nokia-acl"`
	MaxBurst      *uint32                                  `path:"max-burst" module:"srl_nokia-acl"`
	Name          *string                                  `path:"name" module:"srl_nokia-acl"`
	PeakRate      *uint32                                  `path:"peak-rate" module:"srl_nokia-acl"`
	Scope         E_SrlNokiaAcl_Acl_Policers_Policer_Scope `path:"scope" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers_Policer) IsYANGGoStruct() {}

// GetEntrySpecific retrieves the value of the leaf EntrySpecific from the SrlNokiaAcl_Acl_Policers_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntrySpecific is set, it can
// safely use t.GetEntrySpecific() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntrySpecific == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_Policer) GetEntrySpecific() bool {
	if t == nil || t.EntrySpecific == nil {
		return false
	}
	return *t.EntrySpecific
}

// GetMaxBurst retrieves the value of the leaf MaxBurst from the SrlNokiaAcl_Acl_Policers_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBurst is set, it can
// safely use t.GetMaxBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBurst == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_Policer) GetMaxBurst() uint32 {
	if t == nil || t.MaxBurst == nil {
		return 0
	}
	return *t.MaxBurst
}

// GetName retrieves the value of the leaf Name from the SrlNokiaAcl_Acl_Policers_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_Policer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPeakRate retrieves the value of the leaf PeakRate from the SrlNokiaAcl_Acl_Policers_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRate is set, it can
// safely use t.GetPeakRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_Policer) GetPeakRate() uint32 {
	if t == nil || t.PeakRate == nil {
		return 0
	}
	return *t.PeakRate
}

// GetScope retrieves the value of the leaf Scope from the SrlNokiaAcl_Acl_Policers_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_Policer) GetScope() E_SrlNokiaAcl_Acl_Policers_Policer_Scope {
	if t == nil || t.Scope == 0 {
		return SrlNokiaAcl_Acl_Policers_Policer_Scope_global
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Policers_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Policers_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EntrySpecific == nil {
		var v bool = false
		t.EntrySpecific = &v
	}
	if t.Scope == 0 {
		t.Scope = SrlNokiaAcl_Acl_Policers_Policer_Scope_global
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_Policers_Policer struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_Policers_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Policers_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Policers_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Policers_Policer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Policers_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Policers_Policer.
func (*SrlNokiaAcl_Acl_Policers_Policer) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_Policers_SystemCpuPolicer represents the /srl_nokia-acl/acl/policers/system-cpu-policer YANG schema element.
type SrlNokiaAcl_Acl_Policers_SystemCpuPolicer struct {
	EntrySpecific  *bool   `path:"entry-specific" module:"srl_nokia-acl"`
	MaxPacketBurst *uint32 `path:"max-packet-burst" module:"srl_nokia-acl"`
	Name           *string `path:"name" module:"srl_nokia-acl"`
	PeakPacketRate *uint32 `path:"peak-packet-rate" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers_SystemCpuPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) IsYANGGoStruct() {}

// GetEntrySpecific retrieves the value of the leaf EntrySpecific from the SrlNokiaAcl_Acl_Policers_SystemCpuPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntrySpecific is set, it can
// safely use t.GetEntrySpecific() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntrySpecific == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) GetEntrySpecific() bool {
	if t == nil || t.EntrySpecific == nil {
		return false
	}
	return *t.EntrySpecific
}

// GetMaxPacketBurst retrieves the value of the leaf MaxPacketBurst from the SrlNokiaAcl_Acl_Policers_SystemCpuPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPacketBurst is set, it can
// safely use t.GetMaxPacketBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPacketBurst == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) GetMaxPacketBurst() uint32 {
	if t == nil || t.MaxPacketBurst == nil {
		return 16
	}
	return *t.MaxPacketBurst
}

// GetName retrieves the value of the leaf Name from the SrlNokiaAcl_Acl_Policers_SystemCpuPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPeakPacketRate retrieves the value of the leaf PeakPacketRate from the SrlNokiaAcl_Acl_Policers_SystemCpuPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakPacketRate is set, it can
// safely use t.GetPeakPacketRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakPacketRate == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) GetPeakPacketRate() uint32 {
	if t == nil || t.PeakPacketRate == nil {
		return 0
	}
	return *t.PeakPacketRate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_Policers_SystemCpuPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EntrySpecific == nil {
		var v bool = false
		t.EntrySpecific = &v
	}
	if t.MaxPacketBurst == nil {
		var v uint32 = 16
		t.MaxPacketBurst = &v
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_Policers_SystemCpuPolicer struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_Policers_SystemCpuPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_Policers_SystemCpuPolicer.
func (*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter represents the /srl_nokia-acl/acl/system-filter YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter struct {
	Ipv4Filter *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter `path:"ipv4-filter" module:"srl_nokia-acl"`
	Ipv6Filter *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter `path:"ipv6-filter" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter) IsYANGGoStruct() {}

// GetOrCreateIpv4Filter retrieves the value of the Ipv4Filter field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter) GetOrCreateIpv4Filter() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter {
	if t.Ipv4Filter != nil {
		return t.Ipv4Filter
	}
	t.Ipv4Filter = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter{}
	return t.Ipv4Filter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter) GetOrCreateIpv6Filter() *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetIpv4Filter returns the value of the Ipv4Filter struct pointer
// from SrlNokiaAcl_Acl_SystemFilter. If the receiver or the field Ipv4Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter) GetIpv4Filter() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter {
	if t != nil && t.Ipv4Filter != nil {
		return t.Ipv4Filter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from SrlNokiaAcl_Acl_SystemFilter. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter) GetIpv6Filter() *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4Filter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter.
func (*SrlNokiaAcl_Acl_SystemFilter) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter represents the /srl_nokia-acl/acl/system-filter/ipv4-filter YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter struct {
	Entry map[uint32]*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry `path:"entry" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) NewEntry(SequenceId uint32) (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) GetOrCreateEntry(SequenceId uint32) *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) GetEntry(SequenceId uint32) *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry struct to the
// list Entry of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) AppendEntry(v *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry struct {
	Action      *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action `path:"action" module:"srl_nokia-acl"`
	Description *string                                               `path:"description" module:"srl_nokia-acl"`
	Match       *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match  `path:"match" module:"srl_nokia-acl"`
	SequenceId  *uint32                                               `path:"sequence-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) GetOrCreateAction() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) GetOrCreateMatch() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) GetAction() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) GetMatch() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action struct {
	Accept *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept `path:"accept" module:"srl_nokia-acl" yangPresence:"true"`
	Drop   *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop   `path:"drop" module:"srl_nokia-acl" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAccept retrieves the value of the Accept field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) GetOrCreateAccept() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept {
	if t.Accept != nil {
		return t.Accept
	}
	t.Accept = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept{}
	return t.Accept
}

// GetOrCreateDrop retrieves the value of the Drop field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) GetOrCreateDrop() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop {
	if t.Drop != nil {
		return t.Drop
	}
	t.Drop = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop{}
	return t.Drop
}

// GetAccept returns the value of the Accept struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action. If the receiver or the field Accept is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) GetAccept() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept {
	if t != nil && t.Accept != nil {
		return t.Accept
	}
	return nil
}

// GetDrop returns the value of the Drop struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action. If the receiver or the field Drop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) GetDrop() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop {
	if t != nil && t.Drop != nil {
		return t.Drop
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Accept.PopulateDefaults()
	t.Drop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept struct{}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Accept) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop struct {
	Log *bool `path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) IsYANGGoStruct() {}

// GetLog retrieves the value of the leaf Log from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Action_Drop) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match struct {
	DestinationIp   *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp   `path:"destination-ip" module:"srl_nokia-acl"`
	DestinationPort *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort `path:"destination-port" module:"srl_nokia-acl"`
	DscpSet         []SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union  `path:"dscp-set" module:"srl_nokia-acl"`
	FirstFragment   *bool                                                                `path:"first-fragment" module:"srl_nokia-acl"`
	Fragment        *bool                                                                `path:"fragment" module:"srl_nokia-acl"`
	Icmp            *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp            `path:"icmp" module:"srl_nokia-acl"`
	Protocol        SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union   `path:"protocol" module:"srl_nokia-acl"`
	SourceIp        *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp        `path:"source-ip" module:"srl_nokia-acl"`
	SourcePort      *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort      `path:"source-port" module:"srl_nokia-acl"`
	TcpFlags        *string                                                              `path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDestinationIp retrieves the value of the DestinationIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetOrCreateDestinationIp() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp {
	if t.DestinationIp != nil {
		return t.DestinationIp
	}
	t.DestinationIp = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp{}
	return t.DestinationIp
}

// GetOrCreateDestinationPort retrieves the value of the DestinationPort field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetOrCreateDestinationPort() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort {
	if t.DestinationPort != nil {
		return t.DestinationPort
	}
	t.DestinationPort = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort{}
	return t.DestinationPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetOrCreateIcmp() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateSourceIp retrieves the value of the SourceIp field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetOrCreateSourceIp() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp {
	if t.SourceIp != nil {
		return t.SourceIp
	}
	t.SourceIp = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp{}
	return t.SourceIp
}

// GetOrCreateSourcePort retrieves the value of the SourcePort field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetOrCreateSourcePort() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort {
	if t.SourcePort != nil {
		return t.SourcePort
	}
	t.SourcePort = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort{}
	return t.SourcePort
}

// GetDestinationIp returns the value of the DestinationIp struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match. If the receiver or the field DestinationIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetDestinationIp() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp {
	if t != nil && t.DestinationIp != nil {
		return t.DestinationIp
	}
	return nil
}

// GetDestinationPort returns the value of the DestinationPort struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match. If the receiver or the field DestinationPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetDestinationPort() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort {
	if t != nil && t.DestinationPort != nil {
		return t.DestinationPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetIcmp() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetSourceIp returns the value of the SourceIp struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match. If the receiver or the field SourceIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetSourceIp() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp {
	if t != nil && t.SourceIp != nil {
		return t.SourceIp
	}
	return nil
}

// GetSourcePort returns the value of the SourcePort struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match. If the receiver or the field SourcePort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetSourcePort() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort {
	if t != nil && t.SourcePort != nil {
		return t.SourcePort
	}
	return nil
}

// GetDscpSet retrieves the value of the leaf DscpSet from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetDscpSet() []SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DscpSet_Union {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetFirstFragment retrieves the value of the leaf FirstFragment from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstFragment is set, it can
// safely use t.GetFirstFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstFragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetFirstFragment() bool {
	if t == nil || t.FirstFragment == nil {
		return false
	}
	return *t.FirstFragment
}

// GetFragment retrieves the value of the leaf Fragment from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetFragment() bool {
	if t == nil || t.Fragment == nil {
		return false
	}
	return *t.Fragment
}

// GetProtocol retrieves the value of the leaf Protocol from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetProtocol() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) GetTcpFlags() string {
	if t == nil || t.TcpFlags == nil {
		return ""
	}
	return *t.TcpFlags
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationIp.PopulateDefaults()
	t.DestinationPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.SourceIp.PopulateDefaults()
	t.SourcePort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/destination-ip YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationIp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                             `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range      `path:"range" module:"srl_nokia-acl"`
	Value    SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) GetOrCreateRange() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) GetRange() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) GetValue() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range struct {
	End   SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union   `path:"end" module:"srl_nokia-acl"`
	Start SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) GetEnd() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) GetStart() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/icmp YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp struct {
	Code []uint8                                                             `path:"code" module:"srl_nokia-acl"`
	Type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union `path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) GetCode() []uint8 {
	if t == nil || t.Code == nil {
		return nil
	}
	return t.Code
}

// GetType retrieves the value of the leaf Type from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) GetType() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/source-ip YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp struct {
	Address *string `path:"address" module:"srl_nokia-acl"`
	Mask    *string `path:"mask" module:"srl_nokia-acl"`
	Prefix  *string `path:"prefix" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetPrefix retrieves the value of the leaf Prefix from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourceIp) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort struct {
	Operator E_SrlNokiaPacketMatchTypes_Operator                                        `path:"operator" module:"srl_nokia-acl"`
	Range    *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range      `path:"range" module:"srl_nokia-acl"`
	Value    SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union `path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) GetOrCreateRange() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) GetRange() *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetOperator retrieves the value of the leaf Operator from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) GetOperator() E_SrlNokiaPacketMatchTypes_Operator {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) GetValue() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/system-filter/ipv4-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range struct {
	End   SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union   `path:"end" module:"srl_nokia-acl"`
	Start SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union `path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) GetEnd() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) GetStart() SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv4Filter_Entry_Match_SourcePort_Range) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter represents the /srl_nokia-acl/acl/system-filter/ipv6-filter YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter struct {
	Entry map[uint32]*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry `path:"entry" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) NewEntry(SequenceId uint32) (*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry{
		SequenceId: &SequenceId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SequenceId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) GetOrCreateEntry(SequenceId uint32) *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry {
	key := SequenceId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SequenceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) GetEntry(SequenceId uint32) *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry {
	if t == nil {
		return nil
	}

	key := SequenceId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) DeleteEntry(SequenceId uint32) {
	key := SequenceId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry struct to the
// list Entry of SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter. If the key value(s) specified in
// the supplied SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) AppendEntry(v *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) error {
	if v.SequenceId == nil {
		return fmt.Errorf("invalid nil key received for SequenceId")
	}

	key := *v.SequenceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter) ΛBelongingModule() string {
	return "srl_nokia-acl"
}

// SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry represents the /srl_nokia-acl/acl/system-filter/ipv6-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry struct {
	Action      *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Action `path:"action" module:"srl_nokia-acl"`
	Description *string                                               `path:"description" module:"srl_nokia-acl"`
	Match       *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match  `path:"match" module:"srl_nokia-acl"`
	SequenceId  *uint32                                               `path:"sequence-id" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) GetOrCreateAction() *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) GetOrCreateMatch() *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) GetAction() *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) GetMatch() *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSequenceId retrieves the value of the leaf SequenceId from the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequenceId is set, it can
// safely use t.GetSequenceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequenceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) GetSequenceId() uint32 {
	if t == nil || t.SequenceId == nil {
		return 0
	}
	return *t.SequenceId
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry.
func (*SrlNokiaAcl_Acl_SystemFilter_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "srl_nokia-acl"
}
