/*
Package ygotsrl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.29.17/genutil/names.go
using the following YANG input files:
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/acl/srl_nokia-packet-match-types.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/bfd/srl_nokia-micro-bfd.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-common.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-extensions.yang
	- work/srlinux-yang-models/srl_nokia/models/common/srl_nokia-features.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/ethcfm/srl_nokia-oam-pm-ethcfm.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-authz.yang
	- work/srlinux-yang-models/srl_nokia/models/grpc/srl_nokia-gnsi-certz.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-if-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ethernet-segment-association.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-relay.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-dhcp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-ip-vrrp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-l2cp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-lag.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-local-mirror-destination.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr-virtual-ip-discovery.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-nbr.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-router-adv.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vlans.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/interfaces/srl_nokia-lacp.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-ippm-source-udp-pool.yang
	- work/srlinux-yang-models/srl_nokia/models/ipamps/srl_nokia-link-measurement.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-aggregate-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-statistics.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn-bgp-instance-mpls-vpws-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-evpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-ipvpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-duplication.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning-entries.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-learning.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-limit.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-mac-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-proxy-arp-nd.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-reserved-macs.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-shg.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table-static-mac.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-connection-point.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-icmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-igmp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-isis.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ldp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-linux.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-maintenance-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld-snooping.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mld.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls-route-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mpls.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-multicast-mfib-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-mvpn-l3.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-next-hop-groups.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-lsdb.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf-types.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospf.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-ospfv3-lsas.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pcep.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-pim.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-policy-forwarding.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-rib-bgp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-segment-routing.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-static-routes.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tcp-udp.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-te-policies.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-traffic-engineering.yang
	- work/srlinux-yang-models/srl_nokia/models/network-instance/srl_nokia-tunnel-tables.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-lsp-ping-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-ip.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm-types.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam-pm.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-oam.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-stamp.yang
	- work/srlinux-yang-models/srl_nokia/models/oam/srl_nokia-twamp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-acl.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cgroup.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-chassis.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-control.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-cpu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-datapath-resources.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-disk.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fabric.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-fan.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-healthz.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-lc.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-linecard-fib.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-memory.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-p4rt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-pipeline-counters.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-psu.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-redundancy.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-resource-monitoring.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-secure-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tcam.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-tpm.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform-vxdp.yang
	- work/srlinux-yang-models/srl_nokia/models/platform/srl_nokia-platform.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos-policers.yang
	- work/srlinux-yang-models/srl_nokia/models/qos/srl_nokia-qos.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-policy-types.yang
	- work/srlinux-yang-models/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-freq.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-ptp.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync-types.yang
	- work/srlinux-yang-models/srl_nokia/models/sync/srl_nokia-sync.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-password.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-radius.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-tacacs.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-aaa.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-app-mgmt.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-boot.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration-role.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-configuration.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dhcp-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-dns.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-event-handler.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ftp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gnmi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-gribi-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-json-rpc.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-keychains.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-license.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp-types.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-lldp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-load-balancing.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-logging.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-maintenance-mode.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mirroring.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-evpn-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mpls-services-network-instance-label-management.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-mtu.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ntp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-openconfig.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-p4rt-server.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-packet-link-qual.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ra_guard.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-sflow.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp-trace.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-snmp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-ssh.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-banner.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table-proxy-arp.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-info.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast-mfib-table.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-multicast.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-name.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-evpn-ethernet-segments.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance-bgp-vpn.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-network-instance.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system-protocols.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-system.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-timezone.yang
	- work/srlinux-yang-models/srl_nokia/models/system/srl_nokia-tls.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-macsec.yang
	- work/srlinux-yang-models/srl_nokia/models/transport-security/srl_nokia-transport-security.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-multicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-destinations.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table-unicast-es-destination-vteps.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces-vxlan-interface-bridge-table.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel-interfaces.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-tunnel.yang
	- work/srlinux-yang-models/srl_nokia/models/tunnel/srl_nokia-vxlan-tunnel-vtep.yang
Imported modules were sourced from:
	- work/srlinux-yang-models/...
*/
package ygotsrl

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions struct {
	Trace *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace `path:"trace" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) IsYANGGoStruct() {}

// GetOrCreateTrace retrieves the value of the Trace field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) GetOrCreateTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace {
	if t.Trace != nil {
		return t.Trace
	}
	t.Trace = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace{}
	return t.Trace
}

// GetTrace returns the value of the Trace struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions. If the receiver or the field Trace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) GetTrace() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace {
	if t != nil && t.Trace != nil {
		return t.Trace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Trace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface `path:"interface" module:"srl_nokia-igmp" yangPresence:"true"`
	Packet    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet    `path:"packet" module:"srl_nokia-igmp" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) IsYANGGoStruct() {}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface{}
	return t.Interface
}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetOrCreatePacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet{}
	return t.Packet
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetPacket returns the value of the Packet struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) GetPacket() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Interface.PopulateDefaults()
	t.Packet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-igmp"`
	Name *string   `path:"name" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace/packet YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet struct {
	Interface *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface `path:"interface" module:"srl_nokia-igmp" yangPresence:"true"`
	Modifier  E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier `path:"modifier" module:"srl_nokia-igmp"`
	Type      E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Type     `path:"type" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) IsYANGGoStruct() {
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetOrCreateInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface{}
	return t.Interface
}

// GetInterface returns the value of the Interface struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetInterface() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetModifier retrieves the value of the leaf Modifier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modifier is set, it can
// safely use t.GetModifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modifier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetModifier() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier {
	if t == nil || t.Modifier == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	return t.Modifier
}

// GetType retrieves the value of the leaf Type from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) GetType() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Modifier == 0 {
		t.Modifier = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Modifier_egress_ingress_and_dropped
	}
	t.Interface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface represents the /srl_nokia-network-instance/network-instance/protocols/igmp/trace-options/trace/packet/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface struct {
	All  YANGEmpty `path:"all" module:"srl_nokia-igmp"`
	Name *string   `path:"name" module:"srl_nokia-igmp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Igmp_TraceOptions_Trace_Packet_Interface) ΛBelongingModule() string {
	return "srl_nokia-igmp"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis represents the /srl_nokia-network-instance/network-instance/protocols/isis YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis struct {
	DynamicLabelBlock *string                                                                     `path:"dynamic-label-block" module:"srl_nokia-isis"`
	Instance          map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance `path:"instance" module:"srl_nokia-isis"`
	NonStopForwarding *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding   `path:"non-stop-forwarding" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) NewInstance(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance{
		Name: &Name,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) RenameInstance(oldK, newK string) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.Name = &newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetOrCreateInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance {
	key := Name

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetInstance(Name string) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance {
	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) DeleteInstance(Name string) {
	key := Name

	delete(t.Instance, key)
}

// AppendInstance appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct to the
// list Instance of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) AppendInstance(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance,
) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// GetOrCreateNonStopForwarding retrieves the value of the NonStopForwarding field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetOrCreateNonStopForwarding() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding {
	if t.NonStopForwarding != nil {
		return t.NonStopForwarding
	}
	t.NonStopForwarding = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding{}
	return t.NonStopForwarding
}

// GetNonStopForwarding returns the value of the NonStopForwarding struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis. If the receiver or the field NonStopForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetNonStopForwarding() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_NonStopForwarding {
	if t != nil && t.NonStopForwarding != nil {
		return t.NonStopForwarding
	}
	return nil
}

// GetDynamicLabelBlock retrieves the value of the leaf DynamicLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLabelBlock is set, it can
// safely use t.GetDynamicLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) GetDynamicLabelBlock() string {
	if t == nil || t.DynamicLabelBlock == nil {
		return ""
	}
	return *t.DynamicLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonStopForwarding.PopulateDefaults()
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct {
	AdminState                    E_SrlNokiaCommon_AdminState                                                                    `path:"admin-state" module:"srl_nokia-isis"`
	AttachedBit                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit                   `path:"attached-bit" module:"srl_nokia-isis"`
	Authentication                *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication                `path:"authentication" module:"srl_nokia-isis"`
	AutoCost                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost                      `path:"auto-cost" module:"srl_nokia-isis"`
	EnableCsnpOnP2PLinks          *bool                                                                                          `path:"enable-csnp-on-p2p-links" module:"srl_nokia-isis"`
	ExportPolicy                  *string                                                                                        `path:"export-policy" module:"srl_nokia-isis"`
	GracefulRestart               *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart               `path:"graceful-restart" module:"srl_nokia-isis"`
	HelloPadding                  E_SrlNokiaIsis_IsisHelloPaddingType                                                            `path:"hello-padding" module:"srl_nokia-isis"`
	IidTlv                        *bool                                                                                          `path:"iid-tlv" module:"srl_nokia-isis"`
	InstanceId                    *uint32                                                                                        `path:"instance-id" module:"srl_nokia-isis"`
	InterLevelPropagationPolicies *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies `path:"inter-level-propagation-policies" module:"srl_nokia-isis"`
	Interface                     map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface          `path:"interface" module:"srl_nokia-isis"`
	Ipv4Unicast                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast                   `path:"ipv4-unicast" module:"srl_nokia-isis"`
	Ipv6Unicast                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast                   `path:"ipv6-unicast" module:"srl_nokia-isis"`
	LdpSynchronization            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization            `path:"ldp-synchronization" module:"srl_nokia-isis" yangPresence:"true"`
	Level                         map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level               `path:"level" module:"srl_nokia-isis"`
	LevelCapability               E_SrlNokiaIsis_IsisLevel                                                                       `path:"level-capability" module:"srl_nokia-isis"`
	LoopfreeAlternate             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate             `path:"loopfree-alternate" module:"srl_nokia-isis"`
	MaxEcmpPaths                  *uint8                                                                                         `path:"max-ecmp-paths" module:"srl_nokia-isis"`
	Name                          *string                                                                                        `path:"name" module:"srl_nokia-isis"`
	Net                           []string                                                                                       `path:"net" module:"srl_nokia-isis"`
	Overload                      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload                      `path:"overload" module:"srl_nokia-isis"`
	PoiTlv                        *bool                                                                                          `path:"poi-tlv" module:"srl_nokia-isis"`
	SegmentRouting                *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting                `path:"segment-routing" module:"srl_nokia-isis"`
	TeDatabaseInstall             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall             `path:"te-database-install" module:"srl_nokia-isis" yangPresence:"true"`
	Timers                        *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers                        `path:"timers" module:"srl_nokia-isis"`
	TraceOptions                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions                  `path:"trace-options" module:"srl_nokia-isis"`
	TrafficEngineering            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering            `path:"traffic-engineering" module:"srl_nokia-isis"`
	Transport                     *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport                     `path:"transport" module:"srl_nokia-isis"`
	WeightedEcmp                  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp                  `path:"weighted-ecmp" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) NewInterface(
	InterfaceName string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface {
	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetInterface(
	InterfaceName string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface {
	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct to the
// list Interface of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) AppendInterface(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface,
) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) NewLevel(
	LevelNumber uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level{
		LevelNumber: &LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) RenameLevel(oldK, newK uint8) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level {
	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level {
	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) DeleteLevel(LevelNumber uint8) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level struct to the
// list Level of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) AppendLevel(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level,
) error {
	if v.LevelNumber == nil {
		return fmt.Errorf("invalid nil key received for LevelNumber")
	}

	key := *v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateAttachedBit retrieves the value of the AttachedBit field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateAttachedBit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit {
	if t.AttachedBit != nil {
		return t.AttachedBit
	}
	t.AttachedBit = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit{}
	return t.AttachedBit
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication{}
	return t.Authentication
}

// GetOrCreateAutoCost retrieves the value of the AutoCost field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateAutoCost() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost {
	if t.AutoCost != nil {
		return t.AutoCost
	}
	t.AutoCost = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost{}
	return t.AutoCost
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateInterLevelPropagationPolicies retrieves the value of the InterLevelPropagationPolicies field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateInterLevelPropagationPolicies() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies {
	if t.InterLevelPropagationPolicies != nil {
		return t.InterLevelPropagationPolicies
	}
	t.InterLevelPropagationPolicies = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies{}
	return t.InterLevelPropagationPolicies
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateLoopfreeAlternate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload{}
	return t.Overload
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTeDatabaseInstall retrieves the value of the TeDatabaseInstall field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall {
	if t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	t.TeDatabaseInstall = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall{}
	return t.TeDatabaseInstall
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateTrafficEngineering retrieves the value of the TrafficEngineering field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering {
	if t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	t.TrafficEngineering = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering{}
	return t.TrafficEngineering
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport{}
	return t.Transport
}

// GetOrCreateWeightedEcmp retrieves the value of the WeightedEcmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOrCreateWeightedEcmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp {
	if t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	t.WeightedEcmp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp{}
	return t.WeightedEcmp
}

// GetAttachedBit returns the value of the AttachedBit struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field AttachedBit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAttachedBit() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit {
	if t != nil && t.AttachedBit != nil {
		return t.AttachedBit
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAutoCost returns the value of the AutoCost struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field AutoCost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAutoCost() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost {
	if t != nil && t.AutoCost != nil {
		return t.AutoCost
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetGracefulRestart() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetInterLevelPropagationPolicies returns the value of the InterLevelPropagationPolicies struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field InterLevelPropagationPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetInterLevelPropagationPolicies() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies {
	if t != nil && t.InterLevelPropagationPolicies != nil {
		return t.InterLevelPropagationPolicies
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLoopfreeAlternate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetOverload() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTeDatabaseInstall returns the value of the TeDatabaseInstall struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field TeDatabaseInstall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTeDatabaseInstall() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall {
	if t != nil && t.TeDatabaseInstall != nil {
		return t.TeDatabaseInstall
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetTrafficEngineering returns the value of the TrafficEngineering struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field TrafficEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTrafficEngineering() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TrafficEngineering {
	if t != nil && t.TrafficEngineering != nil {
		return t.TrafficEngineering
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetTransport() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetWeightedEcmp returns the value of the WeightedEcmp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance. If the receiver or the field WeightedEcmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetWeightedEcmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_WeightedEcmp {
	if t != nil && t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetEnableCsnpOnP2PLinks retrieves the value of the leaf EnableCsnpOnP2PLinks from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableCsnpOnP2PLinks is set, it can
// safely use t.GetEnableCsnpOnP2PLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableCsnpOnP2PLinks == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetEnableCsnpOnP2PLinks() bool {
	if t == nil || t.EnableCsnpOnP2PLinks == nil {
		return true
	}
	return *t.EnableCsnpOnP2PLinks
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetHelloPadding() E_SrlNokiaIsis_IsisHelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return SrlNokiaIsis_IsisHelloPaddingType_disable
	}
	return t.HelloPadding
}

// GetIidTlv retrieves the value of the leaf IidTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IidTlv is set, it can
// safely use t.GetIidTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IidTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetIidTlv() bool {
	if t == nil || t.IidTlv == nil {
		return false
	}
	return *t.IidTlv
}

// GetInstanceId retrieves the value of the leaf InstanceId from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetLevelCapability() E_SrlNokiaIsis_IsisLevel {
	if t == nil || t.LevelCapability == 0 {
		return SrlNokiaIsis_IsisLevel_L2
	}
	return t.LevelCapability
}

// GetMaxEcmpPaths retrieves the value of the leaf MaxEcmpPaths from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpPaths is set, it can
// safely use t.GetMaxEcmpPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpPaths == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetMaxEcmpPaths() uint8 {
	if t == nil || t.MaxEcmpPaths == nil {
		return 1
	}
	return *t.MaxEcmpPaths
}

// GetName retrieves the value of the leaf Name from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNet retrieves the value of the leaf Net from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Net is set, it can
// safely use t.GetNet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Net == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetNet() []string {
	if t == nil || t.Net == nil {
		return nil
	}
	return t.Net
}

// GetPoiTlv retrieves the value of the leaf PoiTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoiTlv is set, it can
// safely use t.GetPoiTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoiTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) GetPoiTlv() bool {
	if t == nil || t.PoiTlv == nil {
		return false
	}
	return *t.PoiTlv
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.EnableCsnpOnP2PLinks == nil {
		var v bool = true
		t.EnableCsnpOnP2PLinks = &v
	}
	if t.HelloPadding == 0 {
		t.HelloPadding = SrlNokiaIsis_IsisHelloPaddingType_disable
	}
	if t.IidTlv == nil {
		var v bool = false
		t.IidTlv = &v
	}
	if t.InstanceId == nil {
		var v uint32 = 0
		t.InstanceId = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = SrlNokiaIsis_IsisLevel_L2
	}
	if t.MaxEcmpPaths == nil {
		var v uint8 = 1
		t.MaxEcmpPaths = &v
	}
	if t.PoiTlv == nil {
		var v bool = false
		t.PoiTlv = &v
	}
	t.AttachedBit.PopulateDefaults()
	t.Authentication.PopulateDefaults()
	t.AutoCost.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.InterLevelPropagationPolicies.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.TeDatabaseInstall.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.TrafficEngineering.PopulateDefaults()
	t.Transport.PopulateDefaults()
	t.WeightedEcmp.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/attached-bit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit struct {
	Ignore   *bool `path:"ignore" module:"srl_nokia-isis"`
	Suppress *bool `path:"suppress" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) IsYANGGoStruct() {
}

// GetIgnore retrieves the value of the leaf Ignore from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ignore is set, it can
// safely use t.GetIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ignore == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) GetIgnore() bool {
	if t == nil || t.Ignore == nil {
		return false
	}
	return *t.Ignore
}

// GetSuppress retrieves the value of the leaf Suppress from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suppress is set, it can
// safely use t.GetSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suppress == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ignore == nil {
		var v bool = false
		t.Ignore = &v
	}
	if t.Suppress == nil {
		var v bool = false
		t.Suppress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AttachedBit) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication struct {
	CsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication  `path:"csnp-authentication" module:"srl_nokia-isis"`
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                             `path:"keychain" module:"srl_nokia-isis"`
	LspAuthentication   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication   `path:"lsp-authentication" module:"srl_nokia-isis"`
	PsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication  `path:"psnp-authentication" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) IsYANGGoStruct() {
}

// GetOrCreateCsnpAuthentication retrieves the value of the CsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication {
	if t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	t.CsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication{}
	return t.CsnpAuthentication
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key{}
	return t.Key
}

// GetOrCreateLspAuthentication retrieves the value of the LspAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreateLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication {
	if t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	t.LspAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication{}
	return t.LspAuthentication
}

// GetOrCreatePsnpAuthentication retrieves the value of the PsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetOrCreatePsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication {
	if t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	t.PsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication{}
	return t.PsnpAuthentication
}

// GetCsnpAuthentication returns the value of the CsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field CsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication {
	if t != nil && t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	return nil
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetLspAuthentication returns the value of the LspAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field LspAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication {
	if t != nil && t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	return nil
}

// GetPsnpAuthentication returns the value of the PsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication. If the receiver or the field PsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetPsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication {
	if t != nil && t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CsnpAuthentication.PopulateDefaults()
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
	t.LspAuthentication.PopulateDefaults()
	t.PsnpAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/csnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_CsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/lsp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_LspAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/authentication/psnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Authentication_PsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/auto-cost YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost struct {
	ReferenceBandwidth *uint64 `path:"reference-bandwidth" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) IsYANGGoStruct() {}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 0
	}
	return *t.ReferenceBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_AutoCost) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart struct {
	AcceptableDuration *uint32 `path:"acceptable-duration" module:"srl_nokia-isis"`
	HelperMode         *bool   `path:"helper-mode" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) IsYANGGoStruct() {
}

// GetAcceptableDuration retrieves the value of the leaf AcceptableDuration from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptableDuration is set, it can
// safely use t.GetAcceptableDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptableDuration == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) GetAcceptableDuration() uint32 {
	if t == nil || t.AcceptableDuration == nil {
		return 60
	}
	return *t.AcceptableDuration
}

// GetHelperMode retrieves the value of the leaf HelperMode from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return false
	}
	return *t.HelperMode
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptableDuration == nil {
		var v uint32 = 60
		t.AcceptableDuration = &v
	}
	if t.HelperMode == nil {
		var v bool = false
		t.HelperMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_GracefulRestart) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/inter-level-propagation-policies YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies struct {
	Level1ToLevel2 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 `path:"level1-to-level2" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) IsYANGGoStruct() {
}

// GetOrCreateLevel1ToLevel2 retrieves the value of the Level1ToLevel2 field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) GetOrCreateLevel1ToLevel2() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 {
	if t.Level1ToLevel2 != nil {
		return t.Level1ToLevel2
	}
	t.Level1ToLevel2 = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2{}
	return t.Level1ToLevel2
}

// GetLevel1ToLevel2 returns the value of the Level1ToLevel2 struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies. If the receiver or the field Level1ToLevel2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) GetLevel1ToLevel2() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 {
	if t != nil && t.Level1ToLevel2 != nil {
		return t.Level1ToLevel2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Level1ToLevel2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 struct {
	SummaryAddress map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress `path:"summary-address" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) IsYANGGoStruct() {
}

// NewSummaryAddress creates a new entry in the SummaryAddress list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) NewSummaryAddress(
	IpPrefix string,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryAddress", key)
	}

	t.SummaryAddress[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress{
		IpPrefix: &IpPrefix,
	}

	return t.SummaryAddress[key], nil
}

// RenameSummaryAddress renames an entry in the list SummaryAddress within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) RenameSummaryAddress(oldK, newK string) error {
	if _, ok := t.SummaryAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryAddress", newK)
	}

	e, ok := t.SummaryAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryAddress", oldK)
	}
	e.IpPrefix = &newK

	t.SummaryAddress[newK] = e
	delete(t.SummaryAddress, oldK)
	return nil
}

// GetOrCreateSummaryAddress retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) GetOrCreateSummaryAddress(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress {
	key := IpPrefix

	if v, ok := t.SummaryAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryAddress(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryAddress got unexpected error: %v", err))
	}
	return v
}

// GetSummaryAddress retrieves the value with the specified key from
// the SummaryAddress map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) GetSummaryAddress(
	IpPrefix string,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress {
	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SummaryAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSummaryAddress deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) DeleteSummaryAddress(IpPrefix string) {
	key := IpPrefix

	delete(t.SummaryAddress, key)
}

// AppendSummaryAddress appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress struct to the
// list SummaryAddress of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) AppendSummaryAddress(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress,
) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress)
	}

	if _, ok := t.SummaryAddress[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryAddress %v", key)
	}

	t.SummaryAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SummaryAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress struct {
	IpPrefix *string `path:"ip-prefix" module:"srl_nokia-isis"`
	RouteTag *uint32 `path:"route-tag" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRouteTag retrieves the value of the leaf RouteTag from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_InterLevelPropagationPolicies_Level1ToLevel2_SummaryAddress) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct {
	AdminState               E_SrlNokiaCommon_AdminState                                                                   `path:"admin-state" module:"srl_nokia-isis"`
	Authentication           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication     `path:"authentication" module:"srl_nokia-isis"`
	CircuitType              E_SrlNokiaIsis_IsisCircuitType                                                                `path:"circuit-type" module:"srl_nokia-isis"`
	Delay                    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay              `path:"delay" module:"srl_nokia-isis"`
	HelloPadding             E_SrlNokiaIsis_IsisHelloPaddingType                                                           `path:"hello-padding" module:"srl_nokia-isis"`
	InterfaceName            *string                                                                                       `path:"interface-name" module:"srl_nokia-isis"`
	InterfaceRef             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef       `path:"interface-ref" module:"srl_nokia-isis"`
	Ipv4Unicast              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast        `path:"ipv4-unicast" module:"srl_nokia-isis"`
	Ipv6Unicast              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast        `path:"ipv6-unicast" module:"srl_nokia-isis"`
	LdpSynchronization       *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization `path:"ldp-synchronization" module:"srl_nokia-isis"`
	Level                    map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level    `path:"level" module:"srl_nokia-isis"`
	LoopfreeAlternateExclude *bool                                                                                         `path:"loopfree-alternate-exclude" module:"srl_nokia-isis"`
	Passive                  *bool                                                                                         `path:"passive" module:"srl_nokia-isis"`
	SegmentRouting           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting     `path:"segment-routing" module:"srl_nokia-isis" yangPresence:"true"`
	Timers                   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers             `path:"timers" module:"srl_nokia-isis"`
	TraceOptions             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions       `path:"trace-options" module:"srl_nokia-isis"`
	WeightedEcmp             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp       `path:"weighted-ecmp" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) NewLevel(
	LevelNumber uint8,
) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level, error) {
	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level{
		LevelNumber: &LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) RenameLevel(oldK, newK uint8) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level {
	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetLevel(
	LevelNumber uint8,
) *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level {
	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If there is no such element, the function
// is a no-op.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) DeleteLevel(LevelNumber uint8) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level struct to the
// list Level of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the key value(s) specified in
// the supplied SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level already exist in the list, an error is
// returned.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) AppendLevel(
	v *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level,
) error {
	if v.LevelNumber == nil {
		return fmt.Errorf("invalid nil key received for LevelNumber")
	}

	key := *v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint8]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateDelay retrieves the value of the Delay field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateDelay() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay {
	if t.Delay != nil {
		return t.Delay
	}
	t.Delay = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay{}
	return t.Delay
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateLdpSynchronization retrieves the value of the LdpSynchronization field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization {
	if t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	t.LdpSynchronization = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization{}
	return t.LdpSynchronization
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers{}
	return t.Timers
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions{}
	return t.TraceOptions
}

// GetOrCreateWeightedEcmp retrieves the value of the WeightedEcmp field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetOrCreateWeightedEcmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp {
	if t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	t.WeightedEcmp = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp{}
	return t.WeightedEcmp
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetDelay returns the value of the Delay struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Delay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetDelay() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay {
	if t != nil && t.Delay != nil {
		return t.Delay
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetInterfaceRef() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetIpv4Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetIpv6Unicast() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetLdpSynchronization returns the value of the LdpSynchronization struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field LdpSynchronization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetLdpSynchronization() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization {
	if t != nil && t.LdpSynchronization != nil {
		return t.LdpSynchronization
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetSegmentRouting() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetWeightedEcmp returns the value of the WeightedEcmp struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface. If the receiver or the field WeightedEcmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetWeightedEcmp() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp {
	if t != nil && t.WeightedEcmp != nil {
		return t.WeightedEcmp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetCircuitType retrieves the value of the leaf CircuitType from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitType is set, it can
// safely use t.GetCircuitType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitType == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetCircuitType() E_SrlNokiaIsis_IsisCircuitType {
	if t == nil || t.CircuitType == 0 {
		return 0
	}
	return t.CircuitType
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetHelloPadding() E_SrlNokiaIsis_IsisHelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// GetPassive retrieves the value of the leaf Passive from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	t.Authentication.PopulateDefaults()
	t.Delay.PopulateDefaults()
	t.InterfaceRef.PopulateDefaults()
	t.Ipv4Unicast.PopulateDefaults()
	t.Ipv6Unicast.PopulateDefaults()
	t.LdpSynchronization.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
	t.WeightedEcmp.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication struct {
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                                       `path:"keychain" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) IsYANGGoStruct() {
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key{}
	return t.Key
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/delay YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay struct {
	DelaySelection E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay_DelaySelection `path:"delay-selection" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) IsYANGGoStruct() {
}

// GetDelaySelection retrieves the value of the leaf DelaySelection from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelaySelection is set, it can
// safely use t.GetDelaySelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelaySelection == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) GetDelaySelection() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay_DelaySelection {
	if t == nil || t.DelaySelection == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay_DelaySelection_static_preferred
	}
	return t.DelaySelection
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DelaySelection == 0 {
		t.DelaySelection = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay_DelaySelection_static_preferred
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Delay) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/interface-ref YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef struct {
	Interface    *string `path:"interface" module:"srl_nokia-isis"`
	Subinterface *uint32 `path:"subinterface" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_InterfaceRef) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	EnableBfd     *bool                       `path:"enable-bfd" module:"srl_nokia-isis"`
	IncludeBfdTlv *bool                       `path:"include-bfd-tlv" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	EnableBfd     *bool                       `path:"enable-bfd" module:"srl_nokia-isis"`
	IncludeBfdTlv *bool                       `path:"include-bfd-tlv" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetEnableBfd retrieves the value of the leaf EnableBfd from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableBfd is set, it can
// safely use t.GetEnableBfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableBfd == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) GetEnableBfd() bool {
	if t == nil || t.EnableBfd == nil {
		return false
	}
	return *t.EnableBfd
}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.EnableBfd == nil {
		var v bool = false
		t.EnableBfd = &v
	}
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization struct {
	Disable       YANGEmpty `path:"disable" module:"srl_nokia-isis"`
	EndOfLib      *bool     `path:"end-of-lib" module:"srl_nokia-isis"`
	HoldDownTimer *uint16   `path:"hold-down-timer" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) IsYANGGoStruct() {
}

// GetDisable retrieves the value of the leaf Disable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Disable is set, it can
// safely use t.GetDisable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Disable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) GetDisable() YANGEmpty {
	if t == nil || t.Disable == false {
		return false
	}
	return t.Disable
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level struct {
	Authentication    *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication `path:"authentication" module:"srl_nokia-isis"`
	Disable           *bool                                                                                           `path:"disable" module:"srl_nokia-isis"`
	Ipv6UnicastMetric *uint32                                                                                         `path:"ipv6-unicast-metric" module:"srl_nokia-isis"`
	LevelNumber       *uint8                                                                                          `path:"level-number" module:"srl_nokia-isis"`
	Metric            *uint32                                                                                         `path:"metric" module:"srl_nokia-isis"`
	Priority          *uint8                                                                                          `path:"priority" module:"srl_nokia-isis"`
	Timers            *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers         `path:"timers" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication{}
	return t.Authentication
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetOrCreateTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers{}
	return t.Timers
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetTimers() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetDisable retrieves the value of the leaf Disable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Disable is set, it can
// safely use t.GetDisable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Disable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetDisable() bool {
	if t == nil || t.Disable == nil {
		return false
	}
	return *t.Disable
}

// GetIpv6UnicastMetric retrieves the value of the leaf Ipv6UnicastMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetric is set, it can
// safely use t.GetIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetIpv6UnicastMetric() uint32 {
	if t == nil || t.Ipv6UnicastMetric == nil {
		return 0
	}
	return *t.Ipv6UnicastMetric
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetLevelNumber() uint8 {
	if t == nil || t.LevelNumber == nil {
		return 0
	}
	return *t.LevelNumber
}

// GetMetric retrieves the value of the leaf Metric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPriority retrieves the value of the leaf Priority from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 64
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Disable == nil {
		var v bool = false
		t.Disable = &v
	}
	if t.Priority == nil {
		var v uint8 = 64
		t.Priority = &v
	}
	t.Authentication.PopulateDefaults()
	t.Timers.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelNumber == nil {
		return nil, fmt.Errorf("nil value for key LevelNumber")
	}

	return map[string]interface{}{
		"level-number": *t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication struct {
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                                             `path:"keychain" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) IsYANGGoStruct() {
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key{}
	return t.Key
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/level/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers struct {
	HelloInterval   *uint32 `path:"hello-interval" module:"srl_nokia-isis"`
	HelloMultiplier *uint8  `path:"hello-multiplier" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) IsYANGGoStruct() {
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) GetHelloMultiplier() uint8 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint8 = 3
		t.HelloMultiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Level_Timers) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting struct {
	Mpls *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls `path:"mpls" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) IsYANGGoStruct() {
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls struct {
	Ipv4AdjacencySid *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid `path:"ipv4-adjacency-sid" module:"srl_nokia-isis" yangPresence:"true"`
	Ipv4NodeSid      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid      `path:"ipv4-node-sid" module:"srl_nokia-isis" yangPresence:"true"`
	Ipv6AdjacencySid *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid `path:"ipv6-adjacency-sid" module:"srl_nokia-isis" yangPresence:"true"`
	Ipv6NodeSid      *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid      `path:"ipv6-node-sid" module:"srl_nokia-isis" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) IsYANGGoStruct() {
}

// GetOrCreateIpv4AdjacencySid retrieves the value of the Ipv4AdjacencySid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv4AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid {
	if t.Ipv4AdjacencySid != nil {
		return t.Ipv4AdjacencySid
	}
	t.Ipv4AdjacencySid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid{}
	return t.Ipv4AdjacencySid
}

// GetOrCreateIpv4NodeSid retrieves the value of the Ipv4NodeSid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv4NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid {
	if t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	t.Ipv4NodeSid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid{}
	return t.Ipv4NodeSid
}

// GetOrCreateIpv6AdjacencySid retrieves the value of the Ipv6AdjacencySid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv6AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid {
	if t.Ipv6AdjacencySid != nil {
		return t.Ipv6AdjacencySid
	}
	t.Ipv6AdjacencySid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid{}
	return t.Ipv6AdjacencySid
}

// GetOrCreateIpv6NodeSid retrieves the value of the Ipv6NodeSid field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetOrCreateIpv6NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid {
	if t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	t.Ipv6NodeSid = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid{}
	return t.Ipv6NodeSid
}

// GetIpv4AdjacencySid returns the value of the Ipv4AdjacencySid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv4AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv4AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid {
	if t != nil && t.Ipv4AdjacencySid != nil {
		return t.Ipv4AdjacencySid
	}
	return nil
}

// GetIpv4NodeSid returns the value of the Ipv4NodeSid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv4NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv4NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid {
	if t != nil && t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	return nil
}

// GetIpv6AdjacencySid returns the value of the Ipv6AdjacencySid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv6AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv6AdjacencySid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid {
	if t != nil && t.Ipv6AdjacencySid != nil {
		return t.Ipv6AdjacencySid
	}
	return nil
}

// GetIpv6NodeSid returns the value of the Ipv6NodeSid struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls. If the receiver or the field Ipv6NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) GetIpv6NodeSid() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid {
	if t != nil && t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4AdjacencySid.PopulateDefaults()
	t.Ipv4NodeSid.PopulateDefaults()
	t.Ipv6AdjacencySid.PopulateDefaults()
	t.Ipv6NodeSid.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid struct {
	Assignment E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment `path:"assignment" module:"srl_nokia-isis"`
	Static     *uint32                                                                                                                     `path:"static" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) IsYANGGoStruct() {
}

// GetAssignment retrieves the value of the leaf Assignment from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Assignment is set, it can
// safely use t.GetAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Assignment == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) GetAssignment() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment {
	if t == nil || t.Assignment == 0 {
		return 0
	}
	return t.Assignment
}

// GetStatic retrieves the value of the leaf Static from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) GetStatic() uint32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid struct {
	Index *uint32 `path:"index" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4NodeSid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid struct {
	Assignment E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment `path:"assignment" module:"srl_nokia-isis"`
	Static     *uint32                                                                                                                     `path:"static" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) IsYANGGoStruct() {
}

// GetAssignment retrieves the value of the leaf Assignment from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Assignment is set, it can
// safely use t.GetAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Assignment == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) GetAssignment() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv4AdjacencySid_Assignment {
	if t == nil || t.Assignment == 0 {
		return 0
	}
	return t.Assignment
}

// GetStatic retrieves the value of the leaf Static from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) GetStatic() uint32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6AdjacencySid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid struct {
	Index *uint32 `path:"index" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_SegmentRouting_Mpls_Ipv6NodeSid) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers struct {
	CsnpInterval      *uint16 `path:"csnp-interval" module:"srl_nokia-isis"`
	LspPacingInterval *uint64 `path:"lsp-pacing-interval" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) IsYANGGoStruct() {
}

// GetCsnpInterval retrieves the value of the leaf CsnpInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpInterval is set, it can
// safely use t.GetCsnpInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) GetCsnpInterval() uint16 {
	if t == nil || t.CsnpInterval == nil {
		return 10
	}
	return *t.CsnpInterval
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) GetLspPacingInterval() uint64 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CsnpInterval == nil {
		var v uint16 = 10
		t.CsnpInterval = &v
	}
	if t.LspPacingInterval == nil {
		var v uint64 = 100
		t.LspPacingInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_Timers) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions struct {
	Trace []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions_Trace `path:"trace" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) GetTrace() []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/interface/weighted-ecmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp struct {
	LoadBalancingWeight SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union `path:"load-balancing-weight" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) IsYANGGoStruct() {
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) GetLoadBalancingWeight() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Union {
	if t == nil || t.LoadBalancingWeight == nil {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum_auto
	}
	return t.LoadBalancingWeight
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoadBalancingWeight == nil {
		t.LoadBalancingWeight = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp_LoadBalancingWeight_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Interface_WeightedEcmp) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv4Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast struct {
	AdminState    E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	MultiTopology *bool                       `path:"multi-topology" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_enable
	}
	return t.AdminState
}

// GetMultiTopology retrieves the value of the leaf MultiTopology from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiTopology is set, it can
// safely use t.GetMultiTopology() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiTopology == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) GetMultiTopology() bool {
	if t == nil || t.MultiTopology == nil {
		return false
	}
	return *t.MultiTopology
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_enable
	}
	if t.MultiTopology == nil {
		var v bool = false
		t.MultiTopology = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Ipv6Unicast) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/ldp-synchronization YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization struct {
	EndOfLib      *bool   `path:"end-of-lib" module:"srl_nokia-isis"`
	HoldDownTimer *uint16 `path:"hold-down-timer" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) IsYANGGoStruct() {
}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) GetHoldDownTimer() uint16 {
	if t == nil || t.HoldDownTimer == nil {
		return 60
	}
	return *t.HoldDownTimer
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndOfLib == nil {
		var v bool = false
		t.EndOfLib = &v
	}
	if t.HoldDownTimer == nil {
		var v uint16 = 60
		t.HoldDownTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LdpSynchronization) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level struct {
	Authentication           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication  `path:"authentication" module:"srl_nokia-isis"`
	BgpLsExclude             *bool                                                                                  `path:"bgp-ls-exclude" module:"srl_nokia-isis"`
	LevelNumber              *uint8                                                                                 `path:"level-number" module:"srl_nokia-isis"`
	LoopfreeAlternateExclude *bool                                                                                  `path:"loopfree-alternate-exclude" module:"srl_nokia-isis"`
	MetricStyle              E_SrlNokiaIsis_IsisMetricStyle                                                         `path:"metric-style" module:"srl_nokia-isis"`
	RoutePreference          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference `path:"route-preference" module:"srl_nokia-isis"`
	TraceOptions             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions    `path:"trace-options" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetOrCreateAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication{}
	return t.Authentication
}

// GetOrCreateRoutePreference retrieves the value of the RoutePreference field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetOrCreateRoutePreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference {
	if t.RoutePreference != nil {
		return t.RoutePreference
	}
	t.RoutePreference = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference{}
	return t.RoutePreference
}

// GetOrCreateTraceOptions retrieves the value of the TraceOptions field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetOrCreateTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions {
	if t.TraceOptions != nil {
		return t.TraceOptions
	}
	t.TraceOptions = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions{}
	return t.TraceOptions
}

// GetAuthentication returns the value of the Authentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetRoutePreference returns the value of the RoutePreference struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level. If the receiver or the field RoutePreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetRoutePreference() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference {
	if t != nil && t.RoutePreference != nil {
		return t.RoutePreference
	}
	return nil
}

// GetTraceOptions returns the value of the TraceOptions struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level. If the receiver or the field TraceOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetTraceOptions() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions {
	if t != nil && t.TraceOptions != nil {
		return t.TraceOptions
	}
	return nil
}

// GetBgpLsExclude retrieves the value of the leaf BgpLsExclude from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLsExclude is set, it can
// safely use t.GetBgpLsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLsExclude == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetBgpLsExclude() bool {
	if t == nil || t.BgpLsExclude == nil {
		return false
	}
	return *t.BgpLsExclude
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetLevelNumber() uint8 {
	if t == nil || t.LevelNumber == nil {
		return 0
	}
	return *t.LevelNumber
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// GetMetricStyle retrieves the value of the leaf MetricStyle from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricStyle is set, it can
// safely use t.GetMetricStyle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricStyle == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) GetMetricStyle() E_SrlNokiaIsis_IsisMetricStyle {
	if t == nil || t.MetricStyle == 0 {
		return SrlNokiaIsis_IsisMetricStyle_wide
	}
	return t.MetricStyle
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLsExclude == nil {
		var v bool = false
		t.BgpLsExclude = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	if t.MetricStyle == 0 {
		t.MetricStyle = SrlNokiaIsis_IsisMetricStyle_wide
	}
	t.Authentication.PopulateDefaults()
	t.RoutePreference.PopulateDefaults()
	t.TraceOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelNumber == nil {
		return nil, fmt.Errorf("nil value for key LevelNumber")
	}

	return map[string]interface{}{
		"level-number": *t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication struct {
	CsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication  `path:"csnp-authentication" module:"srl_nokia-isis"`
	HelloAuthentication *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication `path:"hello-authentication" module:"srl_nokia-isis"`
	Key                 *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key                 `path:"key" module:"srl_nokia-isis"`
	Keychain            *string                                                                                                   `path:"keychain" module:"srl_nokia-isis"`
	LspAuthentication   *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication   `path:"lsp-authentication" module:"srl_nokia-isis"`
	PsnpAuthentication  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication  `path:"psnp-authentication" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) IsYANGGoStruct() {
}

// GetOrCreateCsnpAuthentication retrieves the value of the CsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication {
	if t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	t.CsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication{}
	return t.CsnpAuthentication
}

// GetOrCreateHelloAuthentication retrieves the value of the HelloAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication {
	if t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	t.HelloAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication{}
	return t.HelloAuthentication
}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key{}
	return t.Key
}

// GetOrCreateLspAuthentication retrieves the value of the LspAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreateLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication {
	if t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	t.LspAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication{}
	return t.LspAuthentication
}

// GetOrCreatePsnpAuthentication retrieves the value of the PsnpAuthentication field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetOrCreatePsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication {
	if t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	t.PsnpAuthentication = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication{}
	return t.PsnpAuthentication
}

// GetCsnpAuthentication returns the value of the CsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field CsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetCsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication {
	if t != nil && t.CsnpAuthentication != nil {
		return t.CsnpAuthentication
	}
	return nil
}

// GetHelloAuthentication returns the value of the HelloAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field HelloAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetHelloAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication {
	if t != nil && t.HelloAuthentication != nil {
		return t.HelloAuthentication
	}
	return nil
}

// GetKey returns the value of the Key struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetKey() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetLspAuthentication returns the value of the LspAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field LspAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetLspAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication {
	if t != nil && t.LspAuthentication != nil {
		return t.LspAuthentication
	}
	return nil
}

// GetPsnpAuthentication returns the value of the PsnpAuthentication struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication. If the receiver or the field PsnpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetPsnpAuthentication() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication {
	if t != nil && t.PsnpAuthentication != nil {
		return t.PsnpAuthentication
	}
	return nil
}

// GetKeychain retrieves the value of the leaf Keychain from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CsnpAuthentication.PopulateDefaults()
	t.HelloAuthentication.PopulateDefaults()
	t.Key.PopulateDefaults()
	t.LspAuthentication.PopulateDefaults()
	t.PsnpAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/csnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_CsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/hello-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_HelloAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/key YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key struct {
	AuthPassword    *string                     `path:"auth-password" module:"srl_nokia-isis"`
	CryptoAlgorithm E_SrlNokiaIsis_IsisAuthType `path:"crypto-algorithm" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) IsYANGGoStruct() {
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPassword is set, it can
// safely use t.GetAuthPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPassword == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetCryptoAlgorithm retrieves the value of the leaf CryptoAlgorithm from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CryptoAlgorithm is set, it can
// safely use t.GetCryptoAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CryptoAlgorithm == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) GetCryptoAlgorithm() E_SrlNokiaIsis_IsisAuthType {
	if t == nil || t.CryptoAlgorithm == 0 {
		return 0
	}
	return t.CryptoAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_Key) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/lsp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_LspAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/authentication/psnp-authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication struct {
	CheckReceived E_SrlNokiaIsis_IsisAuthCheckType `path:"check-received" module:"srl_nokia-isis"`
	Generate      *bool                            `path:"generate" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) IsYANGGoStruct() {
}

// GetCheckReceived retrieves the value of the leaf CheckReceived from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckReceived is set, it can
// safely use t.GetCheckReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckReceived == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) GetCheckReceived() E_SrlNokiaIsis_IsisAuthCheckType {
	if t == nil || t.CheckReceived == 0 {
		return 0
	}
	return t.CheckReceived
}

// GetGenerate retrieves the value of the leaf Generate from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Generate is set, it can
// safely use t.GetGenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Generate == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) GetGenerate() bool {
	if t == nil || t.Generate == nil {
		return false
	}
	return *t.Generate
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_Authentication_PsnpAuthentication) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/route-preference YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference struct {
	External *uint8 `path:"external" module:"srl_nokia-isis"`
	Internal *uint8 `path:"internal" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) IsYANGGoStruct() {
}

// GetExternal retrieves the value of the leaf External from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if External is set, it can
// safely use t.GetExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.External == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) GetExternal() uint8 {
	if t == nil || t.External == nil {
		return 0
	}
	return *t.External
}

// GetInternal retrieves the value of the leaf Internal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Internal is set, it can
// safely use t.GetInternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Internal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) GetInternal() uint8 {
	if t == nil || t.Internal == nil {
		return 0
	}
	return *t.Internal
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_RoutePreference) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/level/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions struct {
	Trace []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions_Trace `path:"trace" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) IsYANGGoStruct() {
}

// GetTrace retrieves the value of the leaf Trace from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trace is set, it can
// safely use t.GetTrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trace == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) GetTrace() []E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions_Trace {
	if t == nil || t.Trace == nil {
		return nil
	}
	return t.Trace
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Level_TraceOptions) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate struct {
	AdminState        E_SrlNokiaCommon_AdminState                                                                         `path:"admin-state" module:"srl_nokia-isis"`
	AugmentRouteTable *bool                                                                                               `path:"augment-route-table" module:"srl_nokia-isis"`
	Exclude           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude          `path:"exclude" module:"srl_nokia-isis"`
	MultiHomedPrefix  *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix `path:"multi-homed-prefix" module:"srl_nokia-isis"`
	RemoteLfa         *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa        `path:"remote-lfa" module:"srl_nokia-isis"`
	TiLfa             *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa            `path:"ti-lfa" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) IsYANGGoStruct() {
}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetOrCreateExclude() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetOrCreateMultiHomedPrefix retrieves the value of the MultiHomedPrefix field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetOrCreateMultiHomedPrefix() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix {
	if t.MultiHomedPrefix != nil {
		return t.MultiHomedPrefix
	}
	t.MultiHomedPrefix = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix{}
	return t.MultiHomedPrefix
}

// GetOrCreateRemoteLfa retrieves the value of the RemoteLfa field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetOrCreateRemoteLfa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa {
	if t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	t.RemoteLfa = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa{}
	return t.RemoteLfa
}

// GetOrCreateTiLfa retrieves the value of the TiLfa field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetOrCreateTiLfa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa {
	if t.TiLfa != nil {
		return t.TiLfa
	}
	t.TiLfa = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa{}
	return t.TiLfa
}

// GetExclude returns the value of the Exclude struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetExclude() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetMultiHomedPrefix returns the value of the MultiHomedPrefix struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate. If the receiver or the field MultiHomedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetMultiHomedPrefix() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix {
	if t != nil && t.MultiHomedPrefix != nil {
		return t.MultiHomedPrefix
	}
	return nil
}

// GetRemoteLfa returns the value of the RemoteLfa struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate. If the receiver or the field RemoteLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetRemoteLfa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa {
	if t != nil && t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	return nil
}

// GetTiLfa returns the value of the TiLfa struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate. If the receiver or the field TiLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetTiLfa() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa {
	if t != nil && t.TiLfa != nil {
		return t.TiLfa
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetAugmentRouteTable retrieves the value of the leaf AugmentRouteTable from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AugmentRouteTable is set, it can
// safely use t.GetAugmentRouteTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AugmentRouteTable == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) GetAugmentRouteTable() bool {
	if t == nil || t.AugmentRouteTable == nil {
		return false
	}
	return *t.AugmentRouteTable
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.AugmentRouteTable == nil {
		var v bool = false
		t.AugmentRouteTable = &v
	}
	t.Exclude.PopulateDefaults()
	t.MultiHomedPrefix.PopulateDefaults()
	t.RemoteLfa.PopulateDefaults()
	t.TiLfa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate/exclude YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) IsYANGGoStruct() {
}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate/multi-homed-prefix YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix struct {
	AdminState E_SrlNokiaCommon_AdminState                                                                                     `path:"admin-state" module:"srl_nokia-isis"`
	Preference E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix_Preference `path:"preference" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetPreference retrieves the value of the leaf Preference from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) GetPreference() E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix_Preference {
	if t == nil || t.Preference == 0 {
		return SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix_Preference_none
	}
	return t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.Preference == 0 {
		t.Preference = SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix_Preference_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_MultiHomedPrefix) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa struct {
	AdminState  E_SrlNokiaCommon_AdminState                                                                              `path:"admin-state" module:"srl_nokia-isis"`
	MaxPqCost   *uint32                                                                                                  `path:"max-pq-cost" module:"srl_nokia-isis"`
	NodeProtect *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect `path:"node-protect" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) IsYANGGoStruct() {
}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) GetOrCreateNodeProtect() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) GetNodeProtect() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetMaxPqCost retrieves the value of the leaf MaxPqCost from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqCost is set, it can
// safely use t.GetMaxPqCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqCost == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) GetMaxPqCost() uint32 {
	if t == nil || t.MaxPqCost == nil {
		return 4261412864
	}
	return *t.MaxPqCost
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.MaxPqCost == nil {
		var v uint32 = 4261412864
		t.MaxPqCost = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa/node-protect YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
	MaxPqNodes *uint32                     `path:"max-pq-nodes" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetMaxPqNodes retrieves the value of the leaf MaxPqNodes from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqNodes is set, it can
// safely use t.GetMaxPqNodes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqNodes == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) GetMaxPqNodes() uint32 {
	if t == nil || t.MaxPqNodes == nil {
		return 16
	}
	return *t.MaxPqNodes
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.MaxPqNodes == nil {
		var v uint32 = 16
		t.MaxPqNodes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa struct {
	AdminState           E_SrlNokiaCommon_AdminState                                                                          `path:"admin-state" module:"srl_nokia-isis"`
	MaxSrPolicyLfaLabels *uint32                                                                                              `path:"max-sr-policy-lfa-labels" module:"srl_nokia-isis"`
	NodeProtect          *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect `path:"node-protect" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) IsYANGGoStruct() {
}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) GetOrCreateNodeProtect() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) GetNodeProtect() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// GetMaxSrPolicyLfaLabels retrieves the value of the leaf MaxSrPolicyLfaLabels from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrPolicyLfaLabels is set, it can
// safely use t.GetMaxSrPolicyLfaLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrPolicyLfaLabels == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) GetMaxSrPolicyLfaLabels() uint32 {
	if t == nil || t.MaxSrPolicyLfaLabels == nil {
		return 2
	}
	return *t.MaxSrPolicyLfaLabels
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
	if t.MaxSrPolicyLfaLabels == nil {
		var v uint32 = 2
		t.MaxSrPolicyLfaLabels = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa/node-protect YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect struct {
	AdminState E_SrlNokiaCommon_AdminState `path:"admin-state" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) GetAdminState() E_SrlNokiaCommon_AdminState {
	if t == nil || t.AdminState == 0 {
		return SrlNokiaCommon_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = SrlNokiaCommon_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_LoopfreeAlternate_TiLfa_NodeProtect) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/overload YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload struct {
	AdvertiseExternal   *bool                                                                               `path:"advertise-external" module:"srl_nokia-isis"`
	AdvertiseInterlevel *bool                                                                               `path:"advertise-interlevel" module:"srl_nokia-isis"`
	Immediate           *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate `path:"immediate" module:"srl_nokia-isis"`
	OnBoot              *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot    `path:"on-boot" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) IsYANGGoStruct() {}

// GetOrCreateImmediate retrieves the value of the Immediate field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetOrCreateImmediate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate {
	if t.Immediate != nil {
		return t.Immediate
	}
	t.Immediate = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate{}
	return t.Immediate
}

// GetOrCreateOnBoot retrieves the value of the OnBoot field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetOrCreateOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot {
	if t.OnBoot != nil {
		return t.OnBoot
	}
	t.OnBoot = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot{}
	return t.OnBoot
}

// GetImmediate returns the value of the Immediate struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload. If the receiver or the field Immediate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetImmediate() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate {
	if t != nil && t.Immediate != nil {
		return t.Immediate
	}
	return nil
}

// GetOnBoot returns the value of the OnBoot struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload. If the receiver or the field OnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetOnBoot() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot {
	if t != nil && t.OnBoot != nil {
		return t.OnBoot
	}
	return nil
}

// GetAdvertiseExternal retrieves the value of the leaf AdvertiseExternal from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseExternal is set, it can
// safely use t.GetAdvertiseExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseExternal == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetAdvertiseExternal() bool {
	if t == nil || t.AdvertiseExternal == nil {
		return false
	}
	return *t.AdvertiseExternal
}

// GetAdvertiseInterlevel retrieves the value of the leaf AdvertiseInterlevel from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInterlevel is set, it can
// safely use t.GetAdvertiseInterlevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInterlevel == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) GetAdvertiseInterlevel() bool {
	if t == nil || t.AdvertiseInterlevel == nil {
		return false
	}
	return *t.AdvertiseInterlevel
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseExternal == nil {
		var v bool = false
		t.AdvertiseExternal = &v
	}
	if t.AdvertiseInterlevel == nil {
		var v bool = false
		t.AdvertiseInterlevel = &v
	}
	t.Immediate.PopulateDefaults()
	t.OnBoot.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/overload/immediate YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate struct {
	MaxMetric *bool `path:"max-metric" module:"srl_nokia-isis"`
	SetBit    *bool `path:"set-bit" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) IsYANGGoStruct() {
}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetSetBit retrieves the value of the leaf SetBit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBit is set, it can
// safely use t.GetSetBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) GetSetBit() bool {
	if t == nil || t.SetBit == nil {
		return false
	}
	return *t.SetBit
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
	if t.SetBit == nil {
		var v bool = false
		t.SetBit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_Immediate) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/overload/on-boot YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot struct {
	MaxMetric *bool   `path:"max-metric" module:"srl_nokia-isis"`
	SetBit    *bool   `path:"set-bit" module:"srl_nokia-isis"`
	Timeout   *uint16 `path:"timeout" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) IsYANGGoStruct() {
}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetSetBit retrieves the value of the leaf SetBit from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetBit is set, it can
// safely use t.GetSetBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetBit == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) GetSetBit() bool {
	if t == nil || t.SetBit == nil {
		return false
	}
	return *t.SetBit
}

// GetTimeout retrieves the value of the leaf Timeout from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_Overload_OnBoot) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting struct {
	Mpls *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls `path:"mpls" module:"srl_nokia-isis" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) IsYANGGoStruct() {
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) GetOrCreateMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) GetMpls() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls struct {
	DynamicAdjacencySids *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids `path:"dynamic-adjacency-sids" module:"srl_nokia-isis"`
	StaticLabelBlock     *string                                                                                                   `path:"static-label-block" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) IsYANGGoStruct() {
}

// GetOrCreateDynamicAdjacencySids retrieves the value of the DynamicAdjacencySids field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) GetOrCreateDynamicAdjacencySids() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids {
	if t.DynamicAdjacencySids != nil {
		return t.DynamicAdjacencySids
	}
	t.DynamicAdjacencySids = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids{}
	return t.DynamicAdjacencySids
}

// GetDynamicAdjacencySids returns the value of the DynamicAdjacencySids struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls. If the receiver or the field DynamicAdjacencySids is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) GetDynamicAdjacencySids() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids {
	if t != nil && t.DynamicAdjacencySids != nil {
		return t.DynamicAdjacencySids
	}
	return nil
}

// GetStaticLabelBlock retrieves the value of the leaf StaticLabelBlock from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelBlock is set, it can
// safely use t.GetStaticLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelBlock == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) GetStaticLabelBlock() string {
	if t == nil || t.StaticLabelBlock == nil {
		return ""
	}
	return *t.StaticLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicAdjacencySids.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids struct {
	AllInterfaces *bool                                                                                                                   `path:"all-interfaces" module:"srl_nokia-isis"`
	HoldTime      SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union `path:"hold-time" module:"srl_nokia-isis"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) IsYANGGoStruct() {
}

// GetAllInterfaces retrieves the value of the leaf AllInterfaces from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllInterfaces is set, it can
// safely use t.GetAllInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllInterfaces == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) GetAllInterfaces() bool {
	if t == nil || t.AllInterfaces == nil {
		return false
	}
	return *t.AllInterfaces
}

// GetHoldTime retrieves the value of the leaf HoldTime from the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) GetHoldTime() SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids_HoldTime_Union {
	if t == nil || t.HoldTime == nil {
		return UnionUint16(15)
	}
	return t.HoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllInterfaces == nil {
		var v bool = false
		t.AllInterfaces = &v
	}
	if t.HoldTime == nil {
		t.HoldTime = UnionUint16(15)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_SegmentRouting_Mpls_DynamicAdjacencySids) ΛBelongingModule() string {
	return "srl_nokia-isis"
}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall represents the /srl_nokia-network-instance/network-instance/protocols/isis/instance/te-database-install YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall struct {
	BgpLs *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs `path:"bgp-ls" module:"srl_nokia-isis" yangPresence:"true"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) IsYANGGoStruct() {
}

// GetOrCreateBgpLs retrieves the value of the BgpLs field
// or returns the existing field if it already exists.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) GetOrCreateBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs {
	if t.BgpLs != nil {
		return t.BgpLs
	}
	t.BgpLs = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs{}
	return t.BgpLs
}

// GetBgpLs returns the value of the BgpLs struct pointer
// from SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall. If the receiver or the field BgpLs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) GetBgpLs() *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall_BgpLs {
	if t != nil && t.BgpLs != nil {
		return t.BgpLs
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Isis_Instance_TeDatabaseInstall) ΛBelongingModule() string {
	return "srl_nokia-isis"
}
